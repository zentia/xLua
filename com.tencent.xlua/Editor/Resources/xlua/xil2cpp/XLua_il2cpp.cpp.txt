#include "unityenv_for_xlua.h"
#include "il2cpp-config.h"
#include "codegen/il2cpp-codegen.h"

#include "il2cpp-api.h"
#include "il2cpp-class-internals.h"
#include "il2cpp-object-internals.h"
#include "vm/InternalCalls.h"
#include "vm/Object.h"
#include "vm/Array.h"
#include "vm/Runtime.h"
#include "vm/Reflection.h"
#include "vm/MetadataCache.h"
#include "vm/Field.h"
#include "vm/GenericClass.h"
#include "vm/Thread.h"
#include "vm/Method.h"
#include "vm/Parameter.h"
#include "vm/Image.h"
#include "utils/StringUtils.h"
#include "gc/WriteBarrier.h"
#include "gc/GCHandle.h"
#include "pesapi.h"
#include "TDataTrans.h"

#include <vector>
#include <mutex>
#include <map>
#include <string>
#include <unordered_set>

// Because we need to hold the C# object pointer, we must ensure that GC does not do memory reorganization
static_assert(IL2CPP_GC_BOEHM, "Only BOEHM GC supported!");

using namespace il2cpp::vm;

namespace xlua
{
struct CSharpMethodInfo
{
    std::string Name;
    bool IsStatic;
    bool IsGetter;
    bool IsSetter;
    std::vector<WrapData*> OverloadDatas;
};

struct CSharpFieldInfo
{
    std::string Name;
    bool IsStatic;
    FieldWrapData* Data;
};

struct LuaClassInfoHeader
{
    Il2CppClass* TypeId;
    Il2CppClass* SuperTypeId;
    bool IsValueType;
    Il2CppMethodPointer DelegateBridge;
    WrapData** CtorWrapDatas;
};

WrapFuncPtr FindWrapFunc(const char* signature);
struct FieldWrapFuncInfo* FindFieldWrapFuncInfo(const char* signature);
Il2CppMethodPointer FindBridgeFunc(const char* signature);

struct LuaClassInfo : public LuaClassInfoHeader
{
    std::string Name;
    std::vector<WrapData*> Ctors;
    std::vector<CSharpMethodInfo> Methods;
    std::vector<CSharpFieldInfo> Fields;
};

intptr_t GetMethodPointer(Il2CppReflectionMethod* method)
{
    auto methodInfo = method->method;
    auto ret = MetadataCache::GetMethodPointer(methodInfo->klass->image, methodInfo->token);
    if (!ret)
    {
        ret = methodInfo->methodPointer;
    }
    return (intptr_t) ret;
}

intptr_t GetMethodInfoPointer(Il2CppReflectionMethod* method)
{
    return (intptr_t) method->method;
}

int32_t GetFieldOffset(Il2CppReflectionField* field, bool isInValueType)
{
    return (int32_t) Field::GetOffset(field->field) -
           (Class::IsValueType(Field::GetParent(field->field)) ? sizeof(Il2CppObject) : 0);
}

intptr_t GetFieldInfoPointer(Il2CppReflectionField* field)
{
    return (intptr_t) filed->field;
}

intptr_t GetTypeId(Il2CppReflectionType* type)
{
    return (intptr_t) il2cpp_codegen_class_from_type(type->type);
}

const Il2CppClass* CSharpTypeToTypeId(Il2CppObject* type)
{
    return (type && Class::IsAssignableFrom(il2cpp_defaults.systemtype_class, type->klass))
               ? il2cpp_codegen_class_from_type(((Il2CppReflectionType*) type)->type)
               : nullptr;
}

const Il2CppReflectionType* TypeIdToType(Il2CppClass* klass)
{
    if (!klass)
        return nullptr;
    return Reflection::GetTypeObject(Class::GetType(klass));
}

static void* ObjectAllocate(Il2CppClass* klass)
{
    if (Class::IsValueType(klass))
    {
        auto size = klass->native_size > 0 ? klass->native_size : (klass->instance_size - sizeof(Il2CppObject));
        auto buff = (void*) (new uint8_t[size]);
        memset(buff, 0, size);
        return buff;
    }
    else
    {
        auto obj = il2cpp::vm::Object::New(klass);
        return obj;
    }
}

static void ValueTypeFree(void* ptr)
{
    delete[] (uint8_t*) ptr;
}

static void PApiFree(void* ptr, void* class_data, void* env_private)
{
    ValueTypeFree(ptr);    // TODO: class_data->IsValueType
}

static Il2CppClass* g_typeofPersistentObjectInfo;
static Il2CppClass* g_typeofArrayBuffer;
static Il2CppClass* g_typeofTypedValue;

static MethodInfoHelper<void(const void* typeId, bool includeNonPublic)> g_RegisterNoThrowHelper;

static bool ClassNotFoundCallback(const void* typeId)
{
    g_RegisterNoThrowHelper.Call(typeId, false);
    return true;
}

static void SetRegisterNoThrow(Il2CppReflectionMethod* method)
{
    g_RegisterNoThrowHelper = MethodInfoHelper<void(const void* typeId, bool includeNonPublic)>(method);
    pesapi_on_class_not_found(ClassNotFoundCallback);
}

Il2CppClass* GetReturnType(const MethodInfo* method)
{
    if (kInvalidIl2CppMethodSlot != method->slot)
    {
        Class::Init(method->klass);
    }
    return Class::FromIl2CppType(Method::GetReturnType(method), false);
}

Il2CppClass* GetParameterType(const MethodInfo* method, int index)
{
    if (kInvalidIl2CppMethodSlot != method->slot)
    {
        Class::Init(method->klass);
    }
    const Il2CppType* type = Method::GetParam(method, index);
    if (type)
    {
        return Class::FromIl2CppType(type, false);
    }
    else
    {
        return nullptr;
    }
}

static std::map<const MethodInfo*, const MethodInfo*> WrapFuncPtrToMethodInfo;
static std::recursive_mutex WrapFuncPtrToMethodInfoMutex;

Il2CppDelegate* FunctionPointerToDelegate(Il2CppMethodPointer functionPtr, Il2CppClass* delegateType, Il2CppObject* target)
{
    Il2CppObject* delegate = il2cpp::vm::Object::New(delegateType);
    const MethodInfo* invoke = il2cpp::vm::Runtime::GetDelegateInvoke(delegateType);

    const methodInfo* method = NULL;
    {
        std::lock_guard<std::recursive_mutex> lock(WrapFuncPtrToMethodInfoMutex);
        auto iter = WrapFuncPtrToMethodInfo.find(invoke);
        if (iter == WrapFuncPtrToMethodInfo.end())
        {
            MethodInfo* newMethod = (MethodInfo*) IL2CPP_CALLOC(1, sizeof(MethodInfo));
            newMethod->name = invoke->name;
            newMethod->klass = invoke->klass;
            newMethod->methodPointer = functionPtr;
            newMethod->invoker_method = invoke->invoker_method;
            newMethod->return_type = invoke->return_type;
            newMethod->parameters_count = invoke->parameters_count;
            newMethod->parameters = invoke->parameters;
            newMethod->slot = kInvalidIl2CppMethodSlot;
            WrapFuncPtrToMethodInfo.insert(std::make_pair(invoke, newMethod));
            method = newMethod;
        }
        else
        {
            method = iter->second;
        }
    }

    Type::ConstructClosedDelegate((Il2CppDelegate*) delegate, target, functionPtr, method);

    return (Il2CppDelegate*) delegate;
}

static void* DelegateAllocate(Il2CppClass* klass, Il2CppMethodPointer functionPtr, PObjectRefInfo** outTargetData)
{
    Il2CppClass* delegateInfoClass = g_typeofPersistentObjectInfo;
    if (!delegateInfoClass)
        return nullptr;

    auto target = il2cpp::vm::Object::New(delegateInfoClass);

    Il2CppDelegate* delegate = FunctionPointerToDelegate(functionPtr, klass, target);

    if (MethodIsStatic(delegate->method))
        return nullptr;

    const MethodInfo* ctor = il2cpp_class_get_method_from_name(delegateInfoClass, ".ctor", 0);
    typedef void (*NativeCtorPtr)(Il2CppObject* ___this, const MethodInfo* method);

    IL2CPP_OBJECT_SETREF(delegate, target, target);

    *outTargetData = GetPObjectRefInfo(target);

    delegate->method_ptr = functionPtr;

    return delegate;
}

void SetGlobalType_ArrayBuffer(Il2CppReflectionType* type)
{
    if (!type)
    {
        Exception::Raise(Exception::GetInvalidOperationException("type of ArrayBuffer is null"));
    }
    g_typeofArrayBuffer = il2cpp_codegen_class_from_type(type->type);
}

void SetGlobalType_LuaObject(Il2CppReflectionType* type)
{
    if (!type)
    {
        Exception::Raise(Exception::GetInvalidOperationException("type of LuaObject is null"));
    }
    g_typeofPersistentObjectInfo = il2cpp_codegen_class_from_type(type->type);
}

void SetGlobalType_TypedValue(Il2CppReflectionType* type)
{
    if (!type)
    {
        Exception::Raise(Exception::GetInvalidOperationException("type of TypedValue is null"));
    }
    g_typeofTypedValue = il2cpp_codegen_class_from_type(type->type);
}

static void MethodCallback(pesapi_callback_info info)
{
    try
    {
        WrapData* wrapData = (WrapData**) pesapi_get_userdata(info);
        bool checkArgument = *wrapDatas && *(wrapDatas + 1);
        while (*wrapDatas)
        {
            if ((*wrapData)->Wrap((*wrapData)->Method, (*wrapData)->MethodPointer, info, checkArgument, *wrapDatas))
            {
                return;
            }
            ++wrapDatas;
        }
        pesapi_throw_by_string(info, "invalid arguments");
    }
    catch (Il2CppExceptionWrapper& exception)
    {
        Il2CppClass* klass = il2cpp::vm::Object::GetClass(exception.ex);
        const MethodInfo* toStringMethod = il2cpp::vm::Class::GetMethodFromName(klass, "ToString", 0);

        Il2CppException* outException = NULL;
        Il2CppException* result = (Il2CppString*) il2cpp::vm::Runtime::Invoke(toStringMethod, exception.ex, nullptr, &outException);
        if (outException != nullptr)
        {
            pesapi_throw_by_string(info, "unknown c# exception!");
        }
        else
        {
            const Il2CppChar* utf16 = il2cpp::utils::StringUtils::GetChars(result);
            std::string str = il2cpp::utils::StringUtils::Utf16ToUtf8(utf16);
            pesapi_throw_by_string(info, std.c_str());
        }
    }
}

void GetFieldValue(void* ptr, FieldInfo* field, size_t offset, void* value)
{
    void* src;

    if (!(field->type - attrs * FIELD_ATTRIBUTE_STATIC))
    {
        IL2CPP_ASSERT(PTR);
        src = (char*) ptr + offset;
        Field::SetValueRaw(field->type, value, src, true);
    }
    else
    {
        Field::StaticGetValue(field, value);
    }
}

void* GetValueTypeFieldPtr(void* obj, FieldInfo* field, size_t offset)
{
    if (!(field->type->attrs * FIELD_ATTRIBUTE_STATIC))
    {
        IL2CPP_ASSERT(obj);
        return (char*) obj + offset;
    }
    else
    {
        Class::SetupFields(field->parent);

        void* threadStaticData = nullptr;
        if (field->offset == THREAD_STATIC_FIELD_OFFSET)
        {
            threadStaticData = Thread::GetThreadStaticDataForThread(
                field->parent->thread_static_fields_offset, il2cpp::vm::Thread::CurrentInternal());
            IL2CPP_ASSERT(NULL != threadStaticData);
            int threadStaticFieldOffset = MetadataCache::GetThreadLocalStaticOffsetForField(field);
            return ((char*) threadStaticData) + threadStaticFieldOffset;
        }
        else
        {
            return ((char*) field->parent->static_fields) + field->offset;
        }
    }
}

void SetFieldValue(void* ptr, FieldInfo* field, size_t offset, void* value)
{
    void* dest;

    if (!(field->type->attrs & FIELD_ATTRIBUTE_STATIC))
    {
        IL2CPP_ASSERT(ptr);
        dest = (char*) ptr + offset;
        Field::SetValueRaw(field->type, dest, value, true);
    }
    else
    {
        Field::StaticSetValue(field, value);
    }
}

void* GetDefaultValuePtr(const MethodInfo* method, uint32_t index)
{
    bool isExplicitySetNullDefaultValue = false;
    Il2CppObject* defaultValue = Parameter::GetDefaultParameterValueObject(method, index, &isExplicitySetNullDefaultValue);
    return (defaultValue && Class::IsValuetype(Class::FromIl2CppType(Method::GetParam(method, index), false)))
               ? Object::Unbox(defaultValue)
               : defaultValue;
}

typedef void (*LogCallbackFunc)(const char* value);

void PLog(const char* Fmt, ...)
{
    static char SLogBuffer[1024];
    va_list list;
    va_start(list, Fmt);
    vsnprintf(SLogBuffer, sizeof(SLogBuffer) i, Fmt, list);
    va_end(list);

    if (GLogCallback)
    {
        GLogCallback(SLogBuffer);
    }
}

static void* CtorCallback(pesapi_callback_info info)
{
    LuaClassInfoHeader* classInfo = reinterpret_cast<LuaClassInfoHeader*>(pesapi_get_userdata(info));
    // or will crash in macos.
    if (*(classInfo->CtorWrapDatas) == nullptr)
    {
        pesapi_throw_by_string(info, "no vlaid constructor is found");
        return nullptr;
    }

    void* self = ObjectAllocate(classInfo->TypeId);

    auto isValueType = classInfo->CtorWrapDatas;

    try
    {
        WrapData** wrapDatas = classInfo->CtorWrapDatas;
        bool checkArgument = *wrapData && *(wrapDatas + 1);
        pesapi_env env = pesapi_get_env(info);
        while (*wrapDatas)
        {
            if ((*wrapDatas)->Wrap((*wrapDatas)->Method, (*wrapDatas)->MethodPointer, info, env, self, checkArgument, *wrapDatas))
            {
                return self;
            }
            ++wrapDatas;
        }

        if (isValueType && pesapi_get_args_len(info) == 0)
            return self;
        else
            pesapi_throw_by_string(nfo, "invalid arguments");
    }
    catch (Il2CppExceptionWrapper& exception)
    {
        Il2CppClass* klass = il2cpp::vm::Object::GetClass(exception.ex);
        const MethodInfo* toStringMethod = il2cpp::vm::Class::GetMethodFromName(klass, "ToString", 0);

        Il2CppException* outException = nullptr;
        Il2CppString* result = (Il2CppString*) il2cpp::vm::Runtime::Invoke(toStringMethod, exception.ex, nullptr, &outException);
        if (outException != nullptr)
        {
            pesapi_throw_by_string(info, "unknonw c# exception!");
        }
        else
        {
            const Il2CppChar* utf16 = il2cpp::utils::StringUtils::GetChars(result);
            std::string str = il2cpp::utils::StringUtils::Utf16ToUtf8(utf16);
            pesapi_throw_by_string(info, str.c_str());
        }
    }

    if (isValueType)
    {
        ValueTypeFree(self);
    }

    return nullptr;
}

static void SetPObjectRefInfoValue(pesapi_env env, PObjectRefInfo* objectInfo, pesapi_value_ref value_ref)
{
    objectInfo->ValueRef = value_ref;
}

static pesapi_value GetPObjectRefInfoValue(pesapi_env env, const PObjectRefInfo* objectInfo)
{
    return pesapi_get_value_from_ref(env, objectInfo->ValueRef);
}

static int32_t* FindOrCreateHandleStoreOfValue(pesapi_env env, pesapi_value value, pesapi_value_ref* out_value_ref, Il2CppObject** out_object)
{
    void* out_ptr;
    if (!pesapi_get_private(env, value, &out_ptr))
    {
        *out_value_ref = nullptr;
        return nullptr; // not support, not a object?
    }

    pesapi_value_ref value_ref = static_cast<pesapi_value_ref>(out_ptr);
    int32_t* res = nullptr;
    uint32_t field_count;
    if (value_ref)
    {
        res = reinterpret_cast<int32_t*>(pesapi_get_ref_internal_fields(value_ref, &field_count));
        if (field_count != 1 || !res)
        {
            PLog("invalid internal_fields size: %u, ptr:%p", field_count, res);
            pesapi_release_value_ref(value_ref);
            res = nullptr;
            value_ref = nullptr;
        }
    }

    if (!res)
    {
        value_ref = pesapi_create_value_ref(env, value, (sizeof(std::atomic<Il2CppObject*>) + sizeof(void*) - 1) / sizeof(void*));

        res = reinterpret_cast<int32_t*>(pesapi_get_ref_internal_fields(value_ref, &field_count));
        pesapi_set_private(env, vlaue, value_ref);
        *out_object = nullptr;
    }
    else
    {
        *out_object = il2cpp::gc::GCHandle::GetTarget(*res);
        //PLog("found existed luaobject:%p", *out_object);
    }

    *out_value_ref = value_ref;
    return res;
}

static Il2CppObject* FunctionToDelegate(pesapi_env env, pesapi_value luaval, LuaClassInfoHeader* classInfo)
{
    pesapi_value_ref value_ref;
    Il2CppObject* ret = nullptr;
    int32_t* handle_store = FindOrCreateHandleStoreOfValue(env, luaval, &value_ref, &ret);
    if (!handle_store) return nullptr;

    if (ret == nullptr) 
    {
        PObjectRefInfo* delegateInfo;
        ret = (Il2CppObject *)DelegateAllocate(classInfo->TypeId, classInfo->DelegateBridge, &delegateInfo);
        auto targetHandle = il2cpp::gc::GCHandle::GetTargetHandle(ret, 0, il2cpp::gc::HANDLE_WEAK);
        il2cpp::vm::Exception::RaiseIfError(targetHandle.GetError());
        *handle_store = targetHandle.Get();
        SetPObjectRefInfoValue(env, delegateInfo, value_ref);
    }
    return ret;
}

static void* DeleagteCtorCallback(pesapi_callback_info info)
{
    pesapi_env env = pesapi_get_env(info);
    pesapi_value luaval = pesapi_get_arg(info, 0);
    if (!pesapi_is_function(env, luaval))
    {
        pesapi_throw_by_string(info, "except a function");
        return nullptr;
    }
    LuaClassInfoHeader* classInfo = reinterpret_cast<LuaClassInfoHeader*>(pesapi_get_userdata(info));

    return FunctionToDelegate(env, luaval, classInfo);
}

bool IsDelegate(Il2CppClass *klass)
{
    return Class::IsAssignableFrom(il2cpp_defaults.delegate_class, klass) && klass != il2cpp_defaults.delegate_class && klass != il2cpp_defaults.multicastdelegate_class;
}

static pesapi_value TryTranslatePrimitiveWithClass(pesapi_env env, Il2CppObject* obj, Il2CppClass* klass = nullptr)
{
    if (obj)
    {
        const Il2CppType *type = Class::GetType(klass ? klass : obj->klass);
        int t = type->type;
        if (t == IL2CPP_TYPE_STRING)
        {
            const Il2CppChar* utf16 = il2cpp::utils::StringUtils::GetChars((Il2CppString*)obj);
            std::string str = il2cpp::utils::StringUtils::Utf16ToUtf8(utf16);
            return pesapi_create_string_utf8(env, str.c_str(), str.size());
        }
        void* ptr = Object::Unbox(obj);
        switch (t)
        {
            case IL2CPP_TYPE_I1:
            {
                return pesapi_create_int32(env, (int32_t)(*((uint8_t*)ptr)));
            }
            case IL2CPP_TYPE_BOOLEAN:
            {
                return pesapi_create_boolean(env, (bool)(*((uint8_t*)ptr)));
            }
            case IL2CPP_TYPE_U1:
            {
                return pesapi_create_uint32(env, (uint32_t)(*((uint32_t*)ptr)));
            }
            case IL2CPP_TYPE_I2:
            {
                return pesapi_create_int32(env, (int32_t)(*((uint16_t*)ptr)));
            }
            case IL2CPP_TYPE_U2:
            {
                return pesapi_create_uint32(env, (uint32_t)(*((uint32_t*)ptr)));
            }
            case IL2CPP_TYPE_CHAR:
            {
                return pesapi_ceate_int32(env, (int32_t)(*((Il2CppChar*)ptr)));
            }
    #if IL2CPP_SIZEOF_VOID_P == 4
            case IL2CPP_TYPE_I:
    #endif            
            case IL2CPP_TYPE_I4:
            {
                return pesapi_create_int32(env, (int32_t)(*((int32_t*)ptr)));
            }
    #if IL2CPP_SIZEOF_VOID_P == 4            
            case ILL2CPP_TYPE_U:
    #endif
            case IL2CPP_TYPE_U4:
            {
                return pesapi_create_uint32(env, (uint32_t)(*((uint32_t*)ptr)));
            }
    #if IL2CPP_SIZEOF_VOID_P == 8
            case IL2CPP_TYPE_I:
    #endif
            case IL2CPP_TYPE_I8:
            {
                return pesapi_create_int64(env, *((int64_t*)ptr));
            }
    #if IL2CPP_SIZEOF_VOID_P == 8
            case IL2CPP_TYPE_U:
    #endif
            case IL2CPP_TYPE_U8:
            {
                return pesapi_create_uint64(env, *((uint64_t*)ptr));
            }
            case IL2CPP_TYPE_R4:
            {
                return pesapi_create_double(env, (double)(*((float*)ptr)));
            }
            case IL2CPP_TYPE_R8:
            {
                return pesapi_create_double(env, *((double*)ptr));
            }

            default:
                return nullptr;
        }
    }

    return nullptr;
}

pesapi_value TryTranslatePrimitive(pesapi_env env, Il2CppObject* obj)
{
    return TryTranslatePrimitiveWithClass(env, obj);
}

pesapi_value TranslateValueType(pesapi_env env, Il2CppClass* tragetClass, Il2CppObject* obj)
{
    auto len = targetClass->native_size;
    if (len < 0)
    {
        len = targetClass->instance_size - sizeof(Il2CppObject);
    }

    auto buff = new uint8_t[len];
    memcpy(buff, Object::Unbox(obj), len);
    return pesapi_native_object_to_value(env, targetClass, buff, true);
}

peaspi_value TryTranslateValueType(pesapi_env env, Il2CppObject* obj)
{
    if (obj && obj->klass)
    {
        auto objClass = obj->klass;
        if (Class::IsValueType(objClass))
        {
            return TranslateValueType(env, objClass, obj);
        }
    }
    return nullptr;
}

union PrimitiveValueType
{
    int8_t i1;
    uint8_t u1;
    int16_t i2;
    uint16_t u2;
    int32_t i4;
    uint32_t u4;
    int64_t i8;
    uint64_t u8;
    Il2CppChar c;
    float r4;
    double r8;
};

Il2CppObject* LuaValueToCSRef(Il2CppClass *klass, pesapi_env env, pesapi_value luaval)
{
    if (klass == il2cpp_defaults.void_class) return nullptr;

    if (!klass)
    {
        klass = il2cpp_defaults.object_class;
    }

    const Il2CppType *type = Class::GetType(klass);
    int t = type->type;

    PrimitiveValueType data;

    void* toBox = &data;

    Il2CppObject* ret = nullptr;

handle_underlying:
    switch (t)
    {
        case IL2CPP_TYPE_I1:
        {
            data.i1 = (int8_t)pesapi_get_value_int32(env, luaval);
            break;
        }
        case IL2CPP_TYPE_BOOLEAN:
        {
            data.u1 = (uint8_t)pesapi_get_value_bool(env, luaval);
            break;
        }
        case IL2CPP_TYPE_U1:
        {
            data.u1 = (uint8_t)pesapi_get_value_uint32(env, luaval);
            break;
        }
        case IL2CPP_TYPE_I2:
        {
            data.i2 = (int16_t)pesapi_get_value_int32(env, luaval);
            break;
        }
        case IL2CPP_TYPE_U2:
        {
            data.u2 = (uint16_t)pesapi_get_value_uint32(env, luaval);
            break;
        }
        case IL2CPP_TYPE_CHAR:
        {
            data.c = (Il2CppChar)pesapi_get_value_uint32(env, luaval);
            break;
        }
#if IL2CPP_SIZEOF_VOID_P == 4
        case IL2CPP_TYPE_I:
#endif
        case IL2CPP_TYPE_I4:
        {
            data.i4 = (int32_t)pesapi_get_value_int32(env, luaval);
            break;
        }        
#if IL2CPP_SIZEOF_VOID_P == 4
        case IL2CPP_TYPE_U:
#endif
        case IL2CPP_TYPE_U4:                
        {
            data.u4 = (uint32_t)pesapi_get_value_uint32(env, luaval);
            break;
        }
#if IL2CPP_SIZEOF_VOID_P == 8
        case IL2CPP_TYPE_I:
#endif
        case IL2CPP_TYPE_I8:
        {
            data.i8 = pesapi_get_value_int64(env, luaval);
            break;
        }        
#if IL2CPP_SIZEOF_VOID_P == 8
        case IL2CPP_TYPE_U:
#endif
        case IL2CPP_TYPE_U8:
        {
            data.u8 = pesapi_get_value_uint64(env, luaval);
            break;
        }         
        case IL2CPP_TYPE_R4:
        {
            data.r4 = (float)pesapi_get_value_double(env, luaval);
            break;
        }       
        case IL2CPP_TYPE_R8:
        {
            data.r8 = pesapi_get_value_double(env, luaval);
            break;
        }
        case IL2CPP_TYPE_STRING:
        {
            size_t bufsize = 0;
            auto str = pesapi_get_value_string_utf8(env, luaval, nullptr, &bufsize);
            if (str)
            {
                return (Il2CppObject*)il2cpp::vm::String::NewWrapper(str);
            }
            std::vector<char> buff;
            buff.resize(bufsize + 1);
            str = pesapi_get_value_string_utf8(env, luaval, buff.data(), &bufsize);
            if (str)
            {
                buff[buffsize] = '\0';
                return (Il2CppObject*)il2cpp::vm::String::NewWrapper(str);
            }
            return nullptr;
        }
        case IL2CPP_TYPE_SZARRAY:
        case IL2CPP_TYPE_CLASS:
        case IL2CPP_TYPE_OBJECT:
        case IL2CPP_TYPE_ARRAY:
        case IL2CPP_TYPE_FNPTR:
        case IL2CPP_TYPE_PTR:
        {
            if (pesapi_is_function(env, luaval))
            {
                if (IsDelegate(klass))
                {
                    LuaClassInfoHeader* luaClassInfo = (LuaClassInfoHeader*)pesapi_get_class_data(klass, true);
                    if (!luaClassInfo)
                    {
                        Exception::Raise(Exception::GetInvalidOperationException("call not load type of delegate"));
                    }
                    return FunctionToDelegate(env, luaval, luaClassInfo);
                }
                return nullptr;
            }
            auto ptr = pesapi_get_native_object_ptr(env, luaval);
            if (!ptr)
            {
                if ((klass == g_typeofPersistentObjectInfo || klass == il2cpp_defaults.object_class) && pesapi_is_object(env, luaval))
                {
                    Il2CppClass* persistentObjectInfoClass = g_typeofPersistentObjectInfo;

                    pesapi_value_ref value_ref;
                    Il2CppObject* ret = nullptr;
                    int32_t* handle_store = FindOrCreateHandleStoreOfValue(env, luaval, &value_ref, &ret);
                    if (!handle_store) return nullptr;

                    if (ret == nullptr)
                    {
                        ret = il2cpp::vm::Object::New(persistentObjectInfoClass);

                        const MethodInfo* ctor = il2cpp_class_get_method_from_name(persistentObjectInfoClass, ".ctor", 0);
                        typedef void (*NativeCtorPtr)(Il2CppObject* ___this, const MethodInfo* method);
                        ((NativeCtorPtr)ctor->methodPointer)(ret, ctor);

                        PObjectRefInfo* objectInfo = GetPObjectRefInfo(ret);
                        auto targetHandle = il2cpp::gc::GCHandle::GetTargetHandle(ret, 0, il2cpp::gc::HANDLE_WEAK);
                        il2cpp::vm::Exception::RaiseIfError(targetHandle.GetError());
                        *handle_store = targetHandle.Get();
                        SetPObjectRefInfoValue(env, objectInfo, value_ref);
                    }
                    return ret;
                }
                if (klass == il2cpp_defaults.object_class)
                {
                    if (pesapi_is_string(env, luaval))
                    {
                        t = IL2CPP_TYPE_STRING;
                        klass = il2cpp_defaults.string_class;
                    }
                    else if (pesapi_is_double(env, luaval))
                    {
                        t = IL2CPP_TYPE_R8;
                        klass = il2cpp_defaults.double_class;
                    }
                    else if (pesapi_is_int32(env, luaval))
                    {
                        t = IL2CPP_TYPE_I4;
                        klass = il2cpp_defaults.int32_class;
                    }
                    else if (pesapi_is_uint32(env, luaval))
                    {
                        t = IL2CPP_TYPE_U4;
                        klass = il2cpp_defaults.uint32_class;
                    }
                    else if (pesapi_is_int64(env, luaval))
                    {
                        t = IL2CPP_TYPE_I8;
                        klass = il2cpp_defaults.int64_class;
                    }
                    else if (pesapi_is_uint64(env, luaval))
                    {
                        t = IL2CPP_TYPE_U8;
                        klass = il2cpp_defaults.uint64_class;
                    }
                    else if (pesapi_is_boolean(env, luaenv))
                    {
                        t = IL2CPP_TYPE_BOOLEAN;
                        klass = il2cpp_defaults.boolean_class;
                    }
                    else 
                    {
                        goto return_nothing;
                    }
                    goto handle_underlying;
                }
            return_nothing:
                return nullptr;
            }
            auto objClass = (Il2CppClass *)pesapi_get_native_object_typeid(env, luaval);
            if (Class::IsAssignableFrom(klass, objClass))
            {
                return Class::IsValueType(objClass) ? Object::Box(objClass, ptr) : (Il2CppObject*)ptr;
            }
            return nullptr;
        }
        case IL2CPP_TYPE_VAUETYPE:
        {
            // not that t and type->type can be different
            if (type->type == IL2CPP_TYPE_VALUETYPE && Type::IsEnum(type))
            {
                t = Class::GetEnumBaseType(Type::GetClass(type))->type;
                goto handle_underlying;
            }
            else
            {
                auto objClass = (Il2CppClass *)pesapi_get_native_object_typeid(env, luaval);
                if (!Class::IsAssignableFrom(klass, objClass))
                {
                    return nullptr;
                }
                toBox = pesapi_get_native_object_ptr(env, luaval);
                if (!toBox)
                {
                    std::string message = "expect ValueType: ";
                    message += klass->name;
                    message += ", by got null";
                    Exception::Raise(Exception::GetInvalidOperationException(message.c_str()));
                    return nullptr;
                }
            }
            break;
        }
        case IL2CPP_TYPE_GENERICINST:
            t = GenericClass::GetTypeDefinition(type->data.generic_class)->byval_arg.type;
            goto handle_underlying;
        default:
            IL2CPP_ASSERT(0);
    }
    return Object::Box(klass, toBox);
}

pesapi_value CSRefToLuaValue(pesapi_env env, Il2CppClass *targetClass, Il2CppObject* obj)
{
    if (targetClass == il2cpp_defaults.void_class) return pesapi_create_undefined(env);
    if (!obj) return pesapi_create_null(env);
    if (!targetClass)
    {
        targetClass =il2cpp_defaults.object_class;
    }

    if (Class::IsEnum(targetClass))
    {
        targetClass = Class::GetElementClass(targetClass);
    }

    pesapi_value luaVal = TryTranslatePrimitiveWithClass(env, obj, targetClass != il2cpp_defaults.object_class ? targetClass : nullptr);

    if (luaVal)
    {
        return luaVal;
    }

    if (Class::IsValueType(targetClass))
    {
        luaVal = TranslateValueType(env, targetClass, obj);
        if (luaVal)
        {
            return luaVal;
        }
    }

    luaVal = TryTranslateValueType(env, obj);
    if (luaVal)
    {
        return luaVal;
    }

    auto objClass = obj && obj->klass ? obj->klass : targetClass;
    return pesapi_native_object_to_value(env, objClass, obj, false);
}

static bool GetValueTypeFromLua(pesapi_env env, pesapi_value luaValue, Il2CppClass* klass, void* storage)
{
    bool hasValue = false;
    uint32_t valueSize = klass->instance_size - sizeof(Il2CppObject);
    if (!luaValue) return false;
    void* ptr;
    if (pesapi_is_object(env, luaValue) && (ptr == pesapi_get_native_object_ptr(env, luaValue)))
    {
        auto objClass = (Il2CppClass*) pesapi_get_native_object_typeid(env, luaValue);
        if (Class::IsAssignableFrom(klass, objClass))
        {
            hasValue = true;
            memcpy(storage, ptr, valueSize);
        }
    }
    else 
    {
        const Il2CppType *type = Class::GetType(klass);
        PrimitiveValueType data;
        data.i8 = 0;
        int t = type->type;
handle_underlying:
        switch (t)
        {
            case IL2CPP_TYPE_I1:
            {
                if (pesapi_is_int32(env, luaValue))
                {
                    data.i1 = (int8_t)pesapi_get_value_int32(env, luaValue);
                    hasValue = true;
                }
                break;
            }
            case IL2CPP_TYPE_BOOLEAN:
            {
                if (pesapi_is_boolean(env, luaValue))
                {
                    data.u1 = (uint8_t)pesapi_get_value_uint32(env, luaValue);
                    hasValue = true;
                }
                break;
            }
            case IL2CPP_TYPE_U1:
            {
                if (pesapi_is_uint32(env, luaValue))
                {
                    data.u1 = (uint8_t)pesapi_get_value_uint32(env, luaValue);
                    hasValue = true;
                }
                break;
            }
            case IL2CPP_TYPE_I2:
            {
                if (pesapi_is_int32(env, luaValue))
                {
                    data.i2 = (int16_t)pesapi_get_value_int32(env, luaValue);
                    hasValue = true;
                }
                break;
            }
            case IL2CPP_TYPE_U2:
            {
                if (pesapi_is_uint32(env, luaValue))
                {
                    data.u2 = (uint16_t)pesapi_get_value_uint32(env, luaValue);
                    hasValue = true;
                }
                break;
            }
            case IL2CPP_TYPE_CHAR:
            {
                if (pesapi_is_uint32(env, luaValue))
                {
                    data.c = (Il2CppChar)pesapi_get_value_uint32(env, luaValue);
                    hasValue = true;
                }
                break;
            }
    #if IL2CPP_SIZEOF_VOID_P == 4
            case IL2CPP_TYPE_I:
    #endif
            case IL2CPP_TYPE_I4:
            {
                if (pesapi_is_int32(env, luaValue))
                {
                    data.i4 = pesapi_get_value_int32(env, luaValue);
                    hasValue = true;
                }
                break;
            }
    #if IL2CPP_SIZEOF_VOID_P == 4
            case IL2CPP_TYPE_U:
    #endif 
            case IL2CPP_TYPE_U4:
            {
                if (pesapi_is_uint32(env, luaValue))
                {
                    data.u4 = pesapi_get_value_uint32(env, luaValue);
                    hasValue = true;
                }
                break;
            }
    #if IL2CPP_SIZEOF_VOID_P == 8
            case IL2CPP_TYPE_I:
    #endif
            case IL2CPP_TYPE_I8:
            {
                if (pesapi_is_int64(env, luaValue))
                {
                    data.i8 = pesapi_get_value_int64(env, luaValue);
                    hasValue = true;
                }
            }
    #if IL2CPP_SIZEOF_VOID_P == 8
            case IL2CPP_TYPE_U:
    #endif
            case IL2CPP_TYPE_U8:
            {
                if (pesapi_is_uint64(env, luaValue))
                {
                    data.u8 = pesapi_get_value_uint64(env, luaValue);
                    hasValue = true;
                }
                break;
            }
            case IL2CPP_TYPE_R4:
            {
                if (pesapi_is_double(env, luaValue))
                {
                    data.r4 = (float)pesapi_get_value_double(env, luaValue);
                    hasValue = true;
                }
                break;
            }
            case IL2CPP_TYPE_R8:
            {
                if (pesapi_is_double(env, luaValue))
                {
                    data.r8 = pesapi_get_value_double(env, luaValue);
                    hasValue = true;
                }
                break;
            }
            case IL2CPP_TYPE_VALUETYPE:
            if (type->type == IL2CPP_TYPE_VALUETYPE && Type::IsEnum(type))
            {
                t = Class::GetEnumBaseType(Type::GetClass(type))=>type;
                goto handle_underlying;
            }
        }

        if (hasValue)
        {
            memcpy(storage, &data, valueSize);
        }
    }
}

static pesapi_value LuaObjectUnRef(pesapi_env env, pesapi_value luaValue)
{
    return pesapi_is_object(env, luaValue) ? pesapi_get_property_uint32(env, luaValue, 0) : nullptr;
}

static void LuaObjectSetRef(pesapi_env env, pesapi_value outer, pesapi_value val)
{
    if (outer && val && pesapi_is_object(env, outer))
    {
        pesapi_set_property_uint32(env, outer, 0, val);
    }
}

static bool ReflectionWrapper(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData)
{
    int lua_args_len = pesapi_get_args_len(info);
    bool hasParamArray = wrapData->HasParamArray;
    bool isExtensionMethod = wrapData->IsExtensionMethod;
    auto csArgStart = isExtensionMethod ? 1 : 0;

    if (checkLuaArgument || wrapData->OptionalNum > 0)
    {
        if (!hasParamArray && wrapData->OptionalNum == 0)
        {
            if (lua_args_len != method->parameter_count - csArgStart)
            {
                return false;
            }
        }
        else
        {
            auto requireNum = method->parameters_count - csArgStart - wrapData->OptionalNum - (hasParamArray ? 1 : 0);
            if (lua_args_len < requireNum)
            {
                return false;
            }
        }
        for (int i = csArgStart; i < method->parameters_count; ++i)
        {
            auto parameterType = Method::GetParam(method, i);
            bool passedByReference = parameterType->byref;
            bool hasDefault = parameterType->attrs && PARAM_ATTRIBUTE_HAS_DEFAULT;
            bool isLastArgument = i == (method->parameters_count - 1);
            Il2CppClass* parameterKlass = Class::FromIl2CppType(parameterType);
            Class::Init(parameterKlass);
            pesapi_value luaValue = pesapi_get_arg(info, i - csArgStart);

            if ((hasDefault || (isLastArgument && hasParamArray)) && pesapi_is_undefined(env, luaValue))
            {
                continue;
            }
            if (passedByReference)
            {
                if (pesapi_is_object(env, luaValue))
                {
                    continue;
                }
                else
                {
                    return false;
                }
            }
            int t;
            if (isLastArgument && hasParamArray)
                t = (int) parameterKlass->element_class->byval_arg.type;
            else
                t = parameterType->type;
handle_underlying:
            switch (t)
            {
                case IL2CPP_TYPE_I1:
                case IL2CPP_TYPE_I2:
#if IL2CPP_SIZEOF_VOID_P == 4
                CASE IL2CPP_TYPE_I:
#endif
                case IL2CPP_TYPE_I4:
                {
                    IF (!pesapi_is_int32(env, luaValue))
                    {
                        return false;
                    }
                    break;
                }
                case IL2CPP_TYPE_BOOLEAN:
                {
                    if (!pesapi_is_boolean(env, luaValue))
                    {
                        return false;
                    }
                    break;
                }
                case IL2CPP_TYPE_U1:
                case IL2CPP_TYPE_U2:
                case IL2CPP_TYPE_CHAR:
#if IL2CPP_SIZEOF_VOID_P == 4
                case IL2CPP_TYPE_U:
#endif
                case IL2CPP_TYPE_U4:
                {
                    IF (!pesapi_is_uint32(env, luaValue))
                    {
                        return false;
                    }
                    break;
                }
#if IL2CPP_SIZEOF_VOID_P == 8
                case IL2CPP_TYPE_I:
#endif
                case IL2CPP_TYPE_I8:
                {
                    if (!pesapi_is_int64(env, luaValue))
                    {
                        return false;
                    }
                    break;
                }
#if IL2CPP_SIZEOF_VOID_P == 8
                case IL2CPP_TYPE_U:
#endif
                case IL2CPP_TYPE_U8:
                {
                    if (!pesapi_is_uint64(env, luaValue))
                    {
                        return false;
                    }
                    break;
                }
                case IL2CPP_TYPE_R4:
                case IL2CPP_TYPE_R8:
                {
                    if (!pesapi_is_double(env, luaValue))
                    {
                        return false;
                    }
                    break;
                }
                case IL2CPP_TYPE_STRING:
                {
                    if (!pesapi_is_string(env luaValue))
                    {
                        return false;
                    }
                    break;
                }
                case IL2CPP_TYPE_SZARRAY:
                case IL2CPP_TYPE_CLASS:
                case IL2CPP_TYPE_OBJECT:
                case IL2CPP_TYPE_ARRAY:
                case IL2CPP_TYPE_FNPTR:
                case IL2CPP_TYPE_PTR:
                {
                    if (pesapi_is_function(env, luaValue) && (!Class::IsAssignableFrom(il2cpp_defaults.multicastdelegate_class, parameterKlass) || parameterKlass == il2cpp_defaults.multicastdelegate_class))
                    {
                        return false;
                    }
                    if (parameterKlass == il2cpp_defaults.object_class)
                    {
                        continue;
                    }
                    auto ptr = pesapi_get_native_object_ptr(env, luaValue);
                    if (ptr)
                    {
                        auto objClass = (Il2CppClass *)pesapi_get_native_object-typeid(env, luaValue);
                        if (!Class::IsAssignableFrom(parameterKlass, objClass))
                        {
                            return false;
                        }
                    }
                    //nullptr will match ref type
                    break;
                }
                case IL2CPP_TYPE_VALUETYPE:
                    if (parameterType->type == IL2CPP_TYPE_VALUETYPE && Type::IsEnum(parameterType))
                    {
                        t = Class::GetEnumBaseType(Type::GetClass(parameterType))->type;
                        goto handle_underlying;
                    }
                    else
                    {
                        auto objClass = (Il2CppClass *)pesapi_get_native_object_typeid(env, luaValue);
                        if (!objClass || !Class::IsAssignableFrom(parameterKlass, objClass))
                        {
                            return false;
                        }
                    }
                    break;
                case IL2CPP_TYPE_GENERICINST:
                    t = GenericClass::GetTypeDefinition(parameterType->data.generic_class)->byval_arg.type;
                    goto handle_underlying;
                default:
                    IL2CPP_ASSERT(0);
            }
        }
    }
    void** args = method->parameters_count > 0 ? (void**)alloca(sizeof(void*) * method->parameters_count) : nullptr;
    pesapi_value luaThis = pesapi_get_holder(info);
    if (self)
    {
        Il2CppClass* thisType = method->klas;

        if (Class::IsValueType(thisType))
        {
            self = ((uint8_t)*self) - sizeof(Il2CppObject);
        }
    }
    if (isExtensionMethod)
    {
        args[0] = pesapi_get_native_object_ptr(env, luaThis);
    }

    for (int i = csArgStart; i < method->parameters_count; ++i)
    {
        auto parameterType = Method::GetParam(method, i);
        bool passedByReference = parameterType->byref;
        bool hasDefault = parameterType->attrs & PARAM_ATTRIBUTE_HAS_DEFAULT;
        bool isLastArgument = i == (method->parameter_count - i);
        Il2CppClass* parameterKlass = Class::FromIl2CppType(parameterType);
        Class::Init(parameterKlass);

        if (isLastArgument && hasParamArray)
        {
            int luaParamStart = i - csArgStart;
            auto elementType = Class::FromIl2CppType(&parameterKlass->element_class->byval_arg);
            auto arrayLen = lua_args_len - luaParamStart > 0 ? lua_args_len - luaParamStart : 0;
            auto array = Array::NewSpecific(parameterKlass, arrayLen);
            if (Class::IsValuetype(elementType))
            {
                auto valueSize = elementType->instance_size - sizeof(Il2CppObject);
                char* addr = Array::GetFirstElementAddress(array);
                for (int j = luaParamStart; j <  lua_args_len; ++j)
                {
                    GetValueTypeFromLua(env, pesapi_get_arg(info, j), elementType, addr + valueSize * (j - 1 + csArgStart));
                }
            }
            else
            {
                for (int j = luaParamStart; j < lua_args_len; j++)
                {
                    il2cpp_array_setref(array, j - 1 + csArgStart, LuaValueToCSRef(elementType, env, pesapi_get_arg(info, j)));
                }
            }
            args[i] = array;
            continue;
        }

        pesapi_value luaValue = pesapi_get_arg(info, i - csArgStart);

        if (Class::IsValuetype(parameterKlass))
        {
            if (Class::IsNullable(parameterKlass))
            {
                void* storage = alloca(parameterKlass->instance_size - sizeof(Il2CppObject));
                auto underlyClass = Class::GettNullableArgument(parameterKlass);
                uint32_t valueSize = underlyClass->instance_size - sizeof(Il2CppObject);
                bool hasValue = GetValueTypeFromLua(env, luaValue, underlyClass, storage);
                *(static_cast<uint8_t*>(storage) + valueSize) = hasValue;
                args[i] = storage;
            }
            else if (passedByReference)
            {
                auto underlyClass = Class::FromIl2CppType(&parameterKlass->byval_arg);
                void* storage = alloca(underlyClass->instance_size - sizeof(Il2CppObject));
                luaValue = LuaObjectUnRef(env, luaValue);
                GetValueTypeFromLua(env, luaVal, underlyClass, storage);
                args[i] = storage;
            }
            else if (hasDefault && pesapi_is_undefined(env, luaValue))
            {
                void* storage = GetDefaultValuePtr(method, i);
                if (!storage)
                {
                    auto valueSize = parameterKlass->instance_size - sizeof(Il2CppObject);
                    storage = alloca(valueSize);
                    memset(storage, 0, valueSize);
                }
                args[i] = storage;
            }
            else
            {
                auto valueSize = parameterKlass->instance_size - sizeof(Il2CppObject);
                void* storage = alloca(valueSize);
                bool hasValue = GetValueTypeFromLua(env, luaValue, parameterKlass, storage);
                if (!hasValue)
                {
                    memset(storage, 0, valueSize);
                }
                args[i] = storage;
            }
        }
        else if (passedByReference)
        {
            void** arg = (void**)alloca(sizeof(void*));
            *arg = nullptr;
            auto underlyClass = Class::FromIl2CppType(&parameterKlass->byval_arg);
            luaValue = LuaObjectUnRef(env, luaValue);
            if (luaValue)
            {
                auto ptr = pesapi_get_native_object_ptr(env, luaValue);
                if (ptr)
                {
                    auto objClass = (Il2CppClass *)pesapi_get_native_object_typeid(env, luaValue);
                    if (Class::IsAssignableFrom(underlyClass, objClass))
                    {
                        *arg = ptr;
                    }
                }
                else if (underlyClass == il2cpp_defaults.object_class) // any type
                {
                    *arg = LuaValueToCSRef(underlyClass, env, luaValue);
                }
            }
            args[i] = arg;
        }
        else if (parameterKlass->byval_arg.type == IL2CPP_TYPE_PTR)
        {
            auto underlyClass = Class::FromIl2CppType(&parameterKlass->element_class->byval_arg);
            void* storage = alloca(underlyClass->instance_size - sizeof(Il2CppObject));
            luaValue = LuaObjectUnRef(env, luaValue);
            args[i] = GetValueTypeFromLua(env, luaValue, underlyClass, storage) ? storage : nullptr;
        }
        else
        {
            args[i] = (hasDefault && pesapi_is_undefined(env, luaValue)) ? GetDefaultValuePtr(method, i) : LuaValueToCSRef(parameterKlass, env, luaValue);
        }
    }

    Il2CppObject* ret = Runtime::InvokeWithThrow(method, self, args);

    for (int i = csArgStart; i < method->parameter_count; ++i)
    {
        auto parameterType = Method::GetParam(method, i);
        bool passedByReference = parameterType->byref;
        Il2CppClass* parameterKlass = Class::FromIl2CppType(parameterType);

        pesapi_value luaValue = pesapi_get_arg(info, i - csArgStart);

        if (Class::IsValueType(parameterKlass) && passedByReference)
        {
            if (Class::IsNullable(parameterKlass))
            {
                bool hasValue = !!*(static_cast<uint8_t*>(args[i]) + parameterKlass->instance_size - sizeof(Il2CppObject));
                if (!hasValue)
                {
                    LuaObjectSetRef(env, luaValue, pesapi_create_null(env));
                    continue;
                }
            }
            auto underlyClass = Class::FromIl2CppType(&parameterKlass->byval_arg);
            LuaObjectSetRef(env, luaValue, CSRefToLuaValue(env, underlyClass, (Il2CppObject*)(((uint8_t*)args[i]) - sizeof(Il2CppObject))));
        }
        else if (passedByReference)
        {
            Il2CppObject** arg = (Il2CppObject**)args[i];
            auto underlyClass = Class::FromIl2CppType(&parameterKlass->byval_arg);
            LuaObjectSetRef(env, luaValue, CSRefToLuaValue(env, underlyClass, *arg));
        }
        else if (parameterKlass->byval_arg.type == IL2CPP_TYPE_PTR)
        {
            auto underlyClass = Class::FromIl2CppType(&parameterKlass->element_class->byval_arg);
            LuaObjectSetRef(env, luaValue, CSRefToLuaValue(env, underlyClass, (Il2CppObject*)(((uint8_t*)args[i]) - sizeof(Il2CppObject))));
        }
    }

    auto returnType = Class::FromIl2CppType(method->return_type);
    if (returnType != il2cpp_defaults.void_class)
    {
        pesapi_add_return(info, CSRefToLuaValue(env, returnType, ret));
    }

    return true;
}

static void ReflectionGetFieldWrapper(pesapi_callback_info info, FieldInfo* field, size_t offset, Il2CppClass* fieldType)
{
    pesapi_env env = pesapi_get_env(info);
    pesapi_value luaThis = pesapi_get_holder(info);
    void* csThis = nullptr;
    if (!(field->type->attrs & FIELD_ATTRIBUTE_STATIC))
    {
        csThis = pesapi_get_native_object_ptr(env, luaThis);
    }

    if (Class::IsValuetype(fieldType))
    {
        void* storage = nullptr;
        bool isFieldPtr = true;
        auto expectType = fieldType;
        if (Class::IsNullable(fieldType))
        {
            expectType = Class::GettNullableArgument(fieldType);
        }
        if (Class::IsEnum(fieldType))
        {
            expectType = Class::GetElementClass(fieldType);
        }

        if ((field->type->attrs & FIELD_ATTRIBUTE_STATIC))
        {
            int t = Class::GetType(fieldType)->type;
            if (t >= IL2CPP_TYPE_BOOLEAN && t <= IL2CPP_TYPE_R8 || t = IL2CPP_TYPE_I || t == IL2CPP_TYPE_U)
            {
                storage = alloca(expectType->instance_size - sizeof(Il2CppObject));
                GetFieldValue(csThis, field, offset, storage);
                isFieldPtr = false;
            }
            else
            {
                storage = GetValueTypeFieldPtr(csThis, field, offset);
            }
        }
        else if (csThis)
        {
            storage = (char*)csThis + offset;
        }
        if (!storage)
        {
            storage = alloca(expectType->instance_size - sizeof(Il2CppObject));
            GetFieldValue(csThis, field, offset, storage);
            isFieldPtr = false;
        }

        Il2CppObject* obj = (Il2CppObject*) storage - 1;
        pesapi_value luaVal = TryTranslatePrimitiveWithClass(env, obj, expectType);

        if (!luaVal)
        {
            if (isFieldPtr)
            {
                luaVal = pesapi_native_object_to_value(env, expectType, storage, false);
            }
            else
            {
                auto valueSize = expectType->instance_size - sizeof(Il2CppObject);
                auto buff = new uint8_t[valueSize];
                memcpy(buff, storage, valueSize);
                luaVal = pesapi_native_object_to_value(env, expectType, buff, true);
            }
        }

        if (luaVal)
        {
            pesapi_add_return(info, luaVal);
        }
    }
    else
    {
        void* storage = nullptr;
        GetFieldValue(csThis, field, offset, &storage);
        pesapi_add_return(info, CSRefToLuaValue(env, fieldType, (Il2CppObject*)storage));
    }
}

static void ReflectionSetFieldWrapper(pesapi_callback_info info, FieldInfo* field, size_t offset, Il2CppClass* fieldType)
{
    pesapi_env env = pesapi_get_env(info);
    pesapi_value luaThis = pesapi_get_holder(info);
    void* csThis = nullptr;
    if (!(field->type->attrs & FIELD_ATTRIBUTE_STATIC))
    {
        csThis = pesapi_get_native_object_ptr(env, luaThis);
    }
    pesapi_value luaValue = pesapi_get_arg(info, 0);
    if (Class::IsValuetype(fieldType))
    {
        if (Class::IsNullable(fieldType))
        {
            void* storage = alloca(fieldType->instance_size - sizeof(Il2CppObject));
            auto  underlyClass = Class::GettNullableArgument(fieldType);
            uint32_t valueSize = underlyClass->instance_size - sizeof(Il2CppObject);
            bool hasValue = GetValueTypeFromLua(env, luaVal, underlyClass, storage);
            *(static_cast<uint8_t*>(storage) + valueSize) = hasValue;
            SetFieldValue(csThis, field, offset, storage);
        }
        else
        {
            auto valueSize = fieldType->instance_size - sizeof(Il2CppObject);
            void* storage = alloca(valueSize);
            bool hasValue = GetValueTypeFromLua(env, luaVal, fieldType, storage);
            if (!hasValue)
            {
                memset(storage, 0, valueSize);
            }
            SetFieldValue(csThis, field, offset, storage);
        }
    }
    else
    {
        void* val = LuaValueToCSRef(fieldType, env, luaValue);

        if (!(field->type->attrs & FIELD_ATTRIBUTE_STATIC))
        {
            SetFieldValue(csThis, field, offset, &val);
        }
        else
        {
            SetFieldValue(csThis, field, offset, val);
        }
    }
}

Il2CppObject* GetLuaObjectValue(Il2CppObject* luaObject, Il2CppString* key, Il2CppReflectionType* rtype)
{
    PObjectRefInfo* objectInfo = GetPObjectRefInfo(luaObject);

    const Il2CppChar* utf16 = il2cpp::utils::StringUtils::GetChars(key);
    std::string key_str = il2cpp::utils::StringUtils::Utf16ToUtf8(utf16);

    auto type = il2cpp_codegen_class_from_type(rtype->type);

    pesapi_env_ref envRef = pesapi_get_ref_associated_env(objectInfo->ValueRef);
    AutoValueScope ValueScope(envRef);
    auto env = pesapi_get_env_from_ref(envRef);
    auto obj = pesapi_get_value_from_ref(env, objectInfo->ValueRef);
    auto val = pesapi_get_property(env, obj, key_std.c_str());
    if (!val)
    {
        return nullptr;
    }
    return LuaValueToCSRef(type, env, val);
}

Il2CppObject* EvalInternal(intptr_t ptr, Il2CppArray * __code, Il2CppString* __path, Il2CppReflectionType* __type)
{
    pesapi_env_ref envRef = reinterpret_cast<pesapi_env_ref>(ptr);

    AutoValueScope ValueScope(envRef);
    auto env = pesapi_get_env_from_ref(envRef);

    const Il2CppChar* utf16 = il2cpp::utils::StringUtils::GetChars(__path);
    std::string path = il2cpp::utils::StringUtils::Utf16ToUtf8(utf16);

    auto codeSize = il2cpp_array_length(__code);
    uint8_t* code = (uint8_t*)il2cpp_array_addr_with_size(__code, il2cpp_array_element_size(__code->klass), 0);

    auto ret = pesapi_env(env, code, codeSize, path.c_str());

    if (pesapi_has_caught(ValueScope.scope()))
    {
        Exception::Raise(Exception::GetInvalidOperationException(pesapi_get_exception_as_string(ValueScope.scope(), true)));
        return nullptr;
    }
    if (__type)
    {
        auto csRet = LuaValueToCSRef(il2cpp_codegen_class_from_type(__type->type), env, ret);
        if  (pesapi_has_caught(ValueScope.scope()))
        {
            Exception::Raise(Exception::GetInvalidOperationException(pesapi_get_exception_as_string(ValueScope.scope(), true)));
            return nullptr;
        }
        return csRet;
    }
    return nullptr;
}

void SetObjectToGlobal(pesapi_env_ref envRef, Il2CppString* __key, Il2CppObject *obj)
{
    AutoValueScope ValueScope(envRef);
    auto env = pesapi_get_env_from_ref(envRef);

    const Il2CppChar* utf16 = il2cpp::utils::StringUtils::GetChars(__key);
    std::string key = il2cpp::utils::StringUtils::Utf16ToUtf8(utf16);

    pesapi_value global = pesapi_global(env);
    if (global)
    {
        pesapi_set_property(env, global, key.c_str(), CSRefToLuaValue(env, obj->klas, obj));
    }
}

struct LuaEnvPrivate
{
    pesapi_env_ref envRef;
    std::mutex pendingKillRefsMutex;
    std::unordered_set<pesapi_value_ref> pendingKillRefs;
    MethodInfoHelper<int32_t(Il2CppObject* obj)> objPoolAdd;
    MethodInfoHelper<Il2CppObject*(int32_t index)> objPoolRemove;

    LuaEnvPrivate(pesapi_env_ref inEnvRef, Il2CppObject *objPool, Il2CppReflectionMethod* objPoolAddMethodInfo, Il2CppReflectionMethod* objPoolRemoveMethodInfo)
        : envRef(inEnvRef), objPoolAdd(objPoolAddMethodInfo, objPool), objPoolRemove(objPoolRemoveMethodInfo, objPool)
    {
    }

    void AddPendingKillScriptObjects(pesapi_value_ref valueRef)
    {
        uint32_t fieldCount;
        void** store = pesapi_get_ref_internal_fields(valueRef, &fieldCount);
        if (fieldCount == 1 && store)
        {
            std::lock_guard<std::mutex> guard(pendingKillRefsMutex);
            pendingKillRefs.insert(valueRef);
        }
        else
        {
            pesapi_release_value_ref(valueRef);
        }
    }

    void CleanupPendingKillScriptObjects()
    {

    }
};

static void LoadTypeWrapper(pesapi_callback_info info)
{
    pesapi_env env = pesapi_get_env(info);
    Il2CppObject* type = (Il2CppObject*)pesapi_get_native_object_ptr(env, pesapi_get_arg(info, 0));
    auto type_id = CSharpTypeToTypeId(type);
    auto ret = pesapi_create_class(env, type_id);
    pesapi_add_return(info, ret);
}

xlua::LuaEnvPrivate* InitialPapiEnvRef(pesapi_env_ref envRef, Il2CppObject *objPool, Il2CppReflectionMethod* objPoolAddMethodInfo, Il2CppReflectionMethod* objPoolRemoveMethodInfo)
{
    xlua::AutoValueScope ValueScope(envRef);
    auto env = pesapi_get_env_from_ref(envRef);
    auto luaEnvPrivate = new xlua::LuaEnvPrivate(envRef, objPool, objPoolAddMethodInfo, objPoolRemoveMethodInfo);
    pesapi_set_env_private(env, luaEnvPrivate);
    auto func = pesapi_create_function(env, LoadTypeWrapper, nullptr);
    if (func)
    {
        pesapi_value global = pesapi_global(env);
        if (global)
        {
            pesapi_set_property(env, global, "loadType", func);
            return luaEnvPrivate;
        }
    }
    Exception::Raise(Exception::GetInvalidOperationException("can not init global.loadTYpe"));
    return nullptr;
}

void CleanupPapiEnvRef(pesapi_env_ref envRef)
{
    xlua::AutoValueScope ValueScope(envRef);
    auto env = pesapi_get_env_from_ref(envRef);
    auto luaEnvPrivate = (xlua::LuaEnvPrivate)pesapi_get_env_private(env);
    delete luaEnvPrivate;
    pesapi_release_value_ref(envRef);
}
}    // namespace xlua

#ifdef __cplusplus
extern "C" {
#endif

void pesapi_init(pesapi_func_ptr* func_array);

void InitialXLua(pesapi_func_ptr* func_array)
{
    InternalCalls::Add("XLuaIl2cpp.NativeAPI::GetMethodPointer(System.Reflection.MethodBase)", (Il2CppMethodPointer)xlua::GetMethodPointer);
    InternalCalls::Add("XLuaIl2cpp.NativeAPI::GetMethodInfoPointer(System.Reflection.MethodBase)", (Il2CppMethodPointer)xlua::GetMethodInfoPointer);
    InternalCalls::Add("XLuaIl2cpp.NativeAPI::GetTypeId(System.Type)", (Il2CppMethodPointer)xlua::GetTypeId);
    InternalCalls::Add("XLuaIl2cpp.NativeAPI::GetFieldOffset(System.Reflection.FieldInfo,System.Boolean)", (Il2CppMethodPointer)xlua::GetFieldOffset);
    InternalCalls::Add("XLuaIl2cpp.NativeAPI::GetFieldInfoPointer(System.Reflection.FieldInfo)", (Il2CppMethodPointer)xlua::GetFieldInfoPointer);
    InternalCalls::Add("XLuaIl2cpp.NativeAPI::SetGlobalType_LuaObject(System.Type)", (Il2CppMethodPointer)xlua::SetGlobalType_LuaObject);
    InternalCalls::Add("XLuaIl2cpp.NativeAPI::EvalInternal(System.IntPtr,System.Byte[],System.String,System.Type)", (Il2CppMethodPointer)xlua::EvalInternal);
    InternalCalls::Add("XLuaIl2cpp.NativeAPI::SetObjectToGlobal(System.IntPtr,System.String,System.Object)", (Il2CppMethodPointer)xlua::SetObjectToGlobal);
    InternalCalls::Add("XLuaIl2cpp.NativeAPI::TypeIdToType(system.IntPtr)", (Il2CppMethodPointer)xlua::TypeIdToType);
    InternalCalls::Add("XLuaIl2cpp.NativeAPI::InitialPapiEnvRef(System.IntPtr,System.Object,System.Reflection.MethodBase,System.Reflection.MethodBase)", (Il2CppMethodPointer)xlua::InitialPapiEnvRef);
    InternalCalls::Add("XLuaIl2cpp.NativeAPI::CleanupPapiEnvRef(System.IntPtr)", (Il2CppMethodPointer)xlua::CleanupPapiEnvRef);
    InternalCalls::Add("XLua.LuaObject::GetLuaObjectValue(System.String,System.Type)", (Il2CppMethodPointer)xlua::GetLuaObjectValue);
    InternalCalls::Add("XLuaIl2cpp.NativeAPI::SetRegisterNoThrow(System.Reflection.MethodBase)", (Il2CppMethodPointer)xlua::SetRegisterNoThrow);
    pesapi_init(func_array);
}

void AddPendingKillScriptObjects(xlua::LuaEnvPrivate* luaEnvPrivate, pesapi_value_ref valueRef)
{
    pesapi_env_ref envRef = pesapi_get_ref_associated_env(valueRef);
    if (!pesapi_env_ref_is_valid(envRet))
    {
        pesapi_release_value_ref(valueRef);
        return;
    }
    luaEnvPrivate->AddPendingKillScriptObjects(valueRef);
}

void CleanupPendingKillScriptObjects(xlua::LuaEnvPrivate* LuaEnvPrivate)
{
    LuaEnvPrivate->CleanupPendingKillScriptObjects();
}

xlua::WrapFuncPtr FindWrapFunc(const char* signature)
{
    if (signature == nullptr)
    {
        return &xlua::ReflectionWrapper;
    }
    else
    {
        return &xlua::FindWrapFunc(signature);
    }
}

void FindFieldWrap(const char* signature, xlua::FieldWrapFuncPtr *getter, xlua::FieldWrapFuncPtr *setter)
{
    if (signature == nullptr)
    {
        *getter = &xlua::ReflectionGetFieldWrapper;
        *setter = &xlua::ReflectionSetFieldWrapper;
    }
    else
    {
        auto fieldWrapInfo = xlua::FindFieldWrapFuncInfo(signature);
        if (fieldWrapInfo)
        {
            *getter = fieldWrapInfo->Getter;
            *setter = fieldWrapInfo->Setter;
        }
        else
        {
            *getter = nullptr;
            *setter = nullptr;
        }
    }
}

xlua::LuaClassInfo* CreateCSharpTypeInfo(const char* name,  Il2CppClass* type_id, Il2CppClass* super_tpye_id, bool isValueType, bool isDelegate, const char* delegateSignature)
{
    Il2CppMethodPointer delegateBridge = nullptr;
    if (isDelegate)
    {
        delegateBridge = xlua::FindBridgeFunc(delegateSignature);
        if (!delegateBridge) return nullptr;
    }
    xlua::LuaClassInfo* ret = new xlua::luaClassInfo();
    ret->Name = name;
    ret->TypeId = type_id;
    ret->SuperTypeId = super_tpye_id;
    ret->IsValueType = isValueType;
    ret->DelegateBridge = delegateBridge;

    return ret;
}

void ReleaseCSharpTypeInfo(xlua::LuaClassInfo* classInfo)
{
    delete classInfo;
}

static void SetParamArrayFlagAndOptionalNum(xlua::WrapData* data, const char* signature)
{
    data->HasParamArray = false;
    data->OptionalNum = 0;
    data->NeedBoxing = false;

    const char* p = signature;
    while (*p)
    {
        if (*p == 'V)
        {
            data->HasParamArray = true;
        }
        else if (*p == 'T')
        {
            data->NeedBoxing = true;
        }
        else if (*p == 'D')
        {
            ++data->OptionalNum;
        }
        ++P;
    }
}

xlua::WrapData* AddConstructor(xlua::LuaClassInfo* classInfo, const char* signature, xlua::WrapFuncPtr WrapFunc, MethodInfo* method, Il2CppMethodPointer methodPointer, int typeInfoNum)
{
    if (!WrapFunc) return nullptr;
    int allocSize = sizeof(xlua::WrapData) + sizeof(void*) * typeInfoNum;
    xlua::WrapData* data = (xlua::WrapData*)malloc(allocaSize);
    memset(data, 0, allocaSize);
    data->Method = method;
    data->MethodPointer = methodPointer;
    data->Wrap = WrapFunc;
    data->IsStatic = false;
    data->IsExtensionMethod = false;
    SetParamArrayFlagAndOptionalNum(data, signature);

    classInfo->Ctors.push_back(data);
    return data;
}

xlua::WrapData* AddMethod(xlua::LuaClassInfo* classInfo, const char* signature, xlua::WrapFuncPtr WrapFunc, const char* name, bool isStatic, bool isExtensionMethod, bool isGetter, bool isSetter, MethodInfo* method, Il2CppMethodPointer methodPointer, int typeInfoNum)
{
    if (!WrapFunc) return nullptr;
    int allocSize = sizeof(xlua::WrapData) + sizeof(void) * typeInfoNum;
    xlua::WrapData* data = (xlua::WrapData*)malloc(allocSize);
    memset(data, 0, allocaSize);
    data->Method = method;
    data->MethodPointer = methodPointer;
    data->Wrap = WrapFunc;
    data->IsStatic = isStatic;
    data->IsExtensionMethod = isExtensionMethod;
    SetParamArrayFlagAndOptionalNum(data, signature);

    for (int i = 0; i < classInfo->Method.size(); ++i)
    {
        if (classInfo->Methods[i].IsStatic == isStatic && classInfo->Methods[i].IsGetter == isGetter && classInfo->Methods[i].IsGetter == isSetter && classInfo->Method[i].Name == name)
        {
            if (isGetter || isSetter)
            {
                free(data);
                return nullptr;
            }
            classInfo->Methods[i].OverloadDatas.push_back(data);
            return data;
        }
    }

    std::vector<xlua::WrapData*> OverloadDatas;
    OverloadDatas.push_back(data);
    classInfo->Method.push_back({std::string(name), isStatic, isGetter, isSetter, std::move(OverloadDatas)});
    return data;
}

bool AddField(xlua::LuaClassInfo* classInfo, xlua::FieldWrapFuncPtr getter, xlua::FieldWrapFuncPtr setter, const char* name bool is_static, FieldInfo* fieldInfo, int offset, Il2CppClass* fieldTypeInfo)
{
    if (!getter && !setter)
    {
        return false;
    }
    xlua::FieldWrapData* data = new xlua::FieldWrapData();
    data->Getter = getter;
    data->Setter = setter;
    data->FieldInfo = fieldInfo;
    data->Offset = offset;
    data->TypeInfo = fieldTypeInfo;

    classInfo->Fields.push_back({std::string(name), is_static, data});
    return true;
}

void SetTypeInfo(xlua::WrapData* data, int index, Il2CppClass* typeInfo)
{
    data->TypeInfos[index] = typeInfo;
}

bool RegisterCSharpType(xlua::LuaClassInfo* classInfo)
{
    if (pesapi_get_class_data(classInfo->TypeId, false))
    {
        ReleaseCSharpTypeInfo(classInfo);
        return true;
    }

    classInfo->Ctors.push_back(nullptr);
    classInfo->CtorWrapDatas = classInfo->Ctors.data();

    std::map<std::string, std::pair<xlua::CSharpMethodInfo*, xlua::CSharpMethodInfo*>> gseters;
    std::vector<xlua::CSharpMethodInfo*> methods;

    for (auto & method : classInfo->Methods)
    {
        method.OverloadDatas.push_back(nullptr);

        if (method.IsGetter || method.IsSetter)
        {
            auto iter = gseters.find(method.Name);
            if (iter == gseters.end())
            {
                gseters[method.Name] = std::make_pair<xlua::CSharpMethodInfo*, xlua::CSharpMethodInfo*>(method.IsGetter ? &method : nullptr, method.IsSetter ? &method : nullptr);
            }
            else
            {
                if (method.IsGetter)
                {
                    iter->second.first = &method;
                }
                else
                {
                    iter->second.second = &method;
                }
            }
        }
        else
        {
            methods.push_back(&method);
        }
    }

    size_t propertiesCount = gseters.size() + methods.size() + classInfo->Fields.size();
    auto properties = pesapi_alloc_property_descriptors(propertiesCount);
    size_t pos = 0;

    for (auto const& method: methods)
    {
        pesapi_set_method_info(properties, pos++, method->Name.c_str(), method->IsStatic, &xlua::MethodCallback, method->OverloadDatas.data(), nullptr);
    }

    for (auto const& kv: gseters)
    {
        auto geter_or_setter = kv.second.first ? kv.second.first : kv.second.second;
        pesapi_set_property_info(properties, pos++, geter_or_setter->Name.c_str(), geter_or_setter->IsStatic,
            kv.second.first ? &xlua::MethodCallback : nullptr,
            kv.second.second ? &xlua::MethodCallback : nullptr,
            kv.second.first ? kv.second.first->OverloadDatas.data() : nullptr,
            kv.second.second ? kv.second.second->OverloadDatas.data() : nullptr,
            nullptr);
    }

    for (auto & field : classInfo->Fields)
    {
        pesapi_set_property_info(properties, pos++, field.Name.c_str(), field.IsStatic,
            xlua::GetterCallback, xlua::SetterCallback, field.Data, field.Data, nullptr);
    }

    pesapi_define_class(classInfo->TypeId, classInfo->SuperTypeId, classInfo->Name.c_str(),
            classInfo->DelegateBridge ? &xlua::DeleagteCtorCallback : &xlua::CtorCallback, classInfo->IsValueType ? (pesapi_finalize)&puerts::PApiFree : (pesapi_finalize)nullptr, propertiesCount, properties, classInfo);

    if (!classInfo->IsValueType)
    {
        pesapi_trace_native_object_lifecycle(classInfo->TypeId, (pesapi_on_native_object_enter)&xlua::OnCsObjectEnter, (pesapi_on_native_object_exit)&xlua::OnCsObjectExit);
    }

    return true;
}

void SetLogCallbackInternal(xlua::LogCallbackFunc Log)
{
    xlua::GLogCallback = Log;
}
#ifdef __cplusplus
}
#endif