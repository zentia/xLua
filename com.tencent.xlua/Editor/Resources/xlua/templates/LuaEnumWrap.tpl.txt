using LuaAPI = XLua.LuaDLL.Lua;
using RealStatePtr = System.IntPtr;
using LuaCSFunction = XLua.LuaDLL.lua_CSFunction;
using Utils = XLua.Utils;
using XLua;
using System.Collections.Generic;
#if OSG_PROFILE
using Assets.Plugins.Perf;
#endif
<%
require "TemplateCommon"
%>
namespace XLua.CSObjectWrap
{
    <%ForEachCsList(types, function(type)
	local fields = type2fields and type2fields[type] or type:GetFields((CS.System.Reflection.BindingFlags.Public | CS.System.Reflection.BindingFlags.Static))
	local fields_to_gen  = {}
	ForEachCsList(fields, function(field) 
	    if field.Name ~= "value__" and not IsObsolute(field) then 
		    table.insert(fields_to_gen, field)
		end
	end)
	%>
    public class <%=CSVariableName(type)%>Wrap
    {
		public static void __Register(RealStatePtr L)
        {
		    ObjectTranslator translator = ObjectTranslatorPool.Instance.Find(L);
		    Utils.BeginObjectRegister(typeof(<%=CsFullTypeName(type)%>), L, translator, 0, 0, 0, 0);
			Utils.EndObjectRegister(typeof(<%=CsFullTypeName(type)%>), L, translator, null, null, null, null, null);
			Utils.BeginClassRegister(typeof(<%=CsFullTypeName(type)%>), L, null, <%=fields.Length + 1%>, 0, 0);
<%if #fields_to_gen <= 20 then%>
            <% ForEachCsList(fields, function(field) 
			if field.Name == "value__" or IsObsolute(field) then return end
			%>
            Utils.RegisterObject(L, translator, Utils.CLS_IDX, "<%=field.Name%>", (int)<%=CsFullTypeName(type)%>.<%=UnK(field.Name)%>);
            <%end)%>
<%else%>
            Utils.RegisterEnumType(L, typeof(<%=CsFullTypeName(type)%>));
<%end%>
            Utils.EndClassRegister(typeof(<%=CsFullTypeName(type)%>), L, translator);
        }
	}
    <%end)%>
}