// Auto Gen
    
#include "il2cpp-api.h"
#include "il2cpp-class-internals.h"
#include "il2cpp-object-internals.h"
#include "vm/InternalCalls.h"
#include "vm/Object.h"
#include "vm/Array.h"
#include "vm/Runtime.h"
#include "vm/Reflection.h"
#include "vm/MetadataCache.h"
#include "vm/Field.h"
#include "vm/GenericClass.h"
#include "vm/Thread.h"
#include "vm/Method.h"
#include "vm/Parameter.h"
#include "vm/Image.h"
#include "utils/StringUtils.h"
#include "gc/WriteBarrier.h"
#include "pesapi.h"
#include "TDataTrans.h"
#include "XLuaValueType.h"

namespace xlua
{

// Void LaunchFile(UnityEngine.WSA.Folder, System.String, Boolean)bool w_vi4sb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vi4sb");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(int32_t p1, Il2CppString* p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void GetCounterValuesBatch(UnityEngine.Profiling.ProfilerArea, System.String, Int32, Single, Single[], Single ByRef)bool w_vi4si4r4oPr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vi4si4r4oPr4");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp5 = wrapData->TypeInfos[2];
    auto TIp6 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<float>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    float p4 = converter::Converter<float>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
    typedef void (*FuncToCall)(int32_t p1, Il2CppString* p2, int32_t p3, float p4, Il2CppObject* p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void DoEditModeInspectorModeButton(SceneViewEditMode, System.String, UnityEngine.GUIContent, UnityEngine.Bounds, UnityEditor.Editor)bool w_vi4soS_S_r4r4r4_S_r4r4r4__o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vi4soS_S_r4r4r4_S_r4r4r4__o");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal struct
    S_S_r4r4r4_S_r4r4r4__* pp4 = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4__>(env, _sv4);
    S_S_r4r4r4_S_r4r4r4__ p4 = pp4 ? *pp4 : S_S_r4r4r4_S_r4r4r4__ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(int32_t p1, Il2CppString* p2, Il2CppObject* p3, struct S_S_r4r4r4_S_r4r4r4__ p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void DoEditModeInspectorModeButton(SceneViewEditMode, System.String, UnityEngine.GUIContent, System.Func`1[UnityEngine.Bounds], UnityEditor.Editor)bool w_vi4sooo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vi4sooo");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(int32_t p1, Il2CppString* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Log(Int32, System.String, System.String)bool w_vi4ss(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vi4ss");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
    typedef void (*FuncToCall)(int32_t p1, Il2CppString* p2, Il2CppString* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind, System.String, System.String, System.String, System.Exception)bool w_vi4ssso(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vi4ssso");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
     // LuaValToCSVal s
    Il2CppString* p4 = converter::Converter<Il2CppString*>::toCpp(env, _sv4);
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(int32_t p1, Il2CppString* p2, Il2CppString* p3, Il2CppString* p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void AddMemoryPressure(Int64)bool w_vi8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vi8");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!converter::Converter<int64_t>::accept(env, _sv1)) return false;            }
 // LuaValToCSVal P any
    int64_t p1 = converter::Converter<int64_t>::toCpp(env, _sv1);        
        
    typedef void (*FuncToCall)(int64_t p1, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1,  method);
    

        return true;
}
// Void LongToTwoInt(Int64, Int32 ByRef, Int32 ByRef)bool w_vi8Pi4Pi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vi8Pi4Pi4");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<int64_t>::accept(env, _sv1)) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    int64_t p1 = converter::Converter<int64_t>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(int64_t p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void AreEqual(Int64, Int64)bool w_vi8i8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vi8i8");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<int64_t>::accept(env, _sv1)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    int64_t p1 = converter::Converter<int64_t>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    int64_t p2 = converter::Converter<int64_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(int64_t p1, int64_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void AreEqual(Int64, Int64, System.String)bool w_vi8i8s(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vi8i8s");
    
    auto TIp3 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<int64_t>::accept(env, _sv1)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    int64_t p1 = converter::Converter<int64_t>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    int64_t p2 = converter::Converter<int64_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
    typedef void (*FuncToCall)(int64_t p1, int64_t p2, Il2CppString* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Greater(Int64, Int64, System.String, System.Object[])bool w_vi8i8sVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vi8i8sVO");
    
    auto TIp3 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<int64_t>::accept(env, _sv1)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    int64_t p1 = converter::Converter<int64_t>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    int64_t p2 = converter::Converter<int64_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(int64_t p1, int64_t p2, Il2CppString* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void Zero(Int64, System.String, System.Object[])bool w_vi8sVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vi8sVO");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<int64_t>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    int64_t p1 = converter::Converter<int64_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(int64_t p1, Il2CppString* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void ReportScore(Int64, System.String, System.Action`1[System.Boolean])bool w_vi8so(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vi8so");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<int64_t>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
 // LuaValToCSVal P any
    int64_t p1 = converter::Converter<int64_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(int64_t p1, Il2CppString* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Reverse(System.Array)bool w_vo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vo");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1,  method);
    

        return true;
}
// Void ApplyGizmoInfo(UnityEditor.GizmoInfo, Boolean)bool w_voDb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voDb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void SelectMultipleItems(System.Collections.Generic.IEnumerable`1[UnityEditor.Search.SearchItem], Boolean, Boolean)bool w_voDbDb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voDbDb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void ForceReserializeAssets(System.Collections.Generic.IEnumerable`1[System.String], UnityEditor.ForceReserializeAssetsOptions)bool w_voDi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voDi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void PlaceGameObject(UnityEngine.GameObject, UnityEngine.GameObject)bool w_voDo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voDo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void ConnectionTargetSelectionDropdown(UnityEngine.Networking.PlayerConnection.IConnectionState, UnityEngine.GUIStyle, Int32)bool w_voDoDi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voDoDi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void DrawTexture3DVolume(UnityEngine.Texture, Single, Single, UnityEngine.FilterMode, Boolean, UnityEngine.Gradient)bool w_voDr4Dr4Di4DbDo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voDr4Dr4Di4DbDo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, void* p3, void* p4, void* p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void DrawTexture3DSDF(UnityEngine.Texture, Single, Single, UnityEngine.Gradient)bool w_voDr4Dr4Do(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voDr4Dr4Do");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void StartDrag(UnityEngine.Object[], System.String)bool w_voDs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voDs");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void SnapToGrid(UnityEngine.Transform[], UnityEngine.SnapAxis)bool w_voDu1(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voDu1");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void TakeTempSnapshot(System.Action`2[System.String,System.Boolean], Unity.Profiling.Memory.CaptureFlags)bool w_voDu4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voDu4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void SetData(System.LocalDataStoreSlot, System.Object)bool w_voO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void SerializationSetValue(System.Reflection.FieldInfo, System.Object, System.Object)bool w_voOO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voOO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                                            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void IsAssignableFrom(System.Type, System.Object, System.String, System.Object[])bool w_voOsVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voOsVO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppString* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetupTerrainToolMaterialProperties(UnityEngine.TerrainTools.PaintContext, UnityEngine.TerrainTools.BrushTransform ByRef, UnityEngine.Material)bool w_voPS_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4__o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voPS_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4__o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal Pstruct
    S_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4__* p2 = DataTransfer::GetPointer<S_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4__>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4__ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Extract(UnityEngine.Light, UnityEngine.Experimental.GlobalIllumination.DirectionalLight ByRef)bool w_voPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4S_r4r4r4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4S_r4r4r4__");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal Pstruct
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4S_r4r4r4__* p2 = DataTransfer::GetPointer<S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4S_r4r4r4__>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4S_r4r4r4__ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Extract(UnityEngine.Light, UnityEngine.Experimental.GlobalIllumination.SpotLight ByRef)bool w_voPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4r4u1u1_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4r4u1u1_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal Pstruct
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4r4u1u1_* p2 = DataTransfer::GetPointer<S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4r4u1u1_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4r4u1u1_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Extract(UnityEngine.Light, UnityEngine.Experimental.GlobalIllumination.RectangleLight ByRef)bool w_voPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4u1_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4u1_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal Pstruct
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4u1_* p2 = DataTransfer::GetPointer<S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4u1_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4u1_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Extract(UnityEngine.Light, UnityEngine.Experimental.GlobalIllumination.PointLight ByRef)bool w_voPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4u1_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4u1_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal Pstruct
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4u1_* p2 = DataTransfer::GetPointer<S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4u1_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4u1_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Extract(UnityEngine.Light, UnityEngine.Experimental.GlobalIllumination.Cookie ByRef)bool w_voPS_i4r4S_r4r4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voPS_i4r4S_r4r4__");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal Pstruct
    S_i4r4S_r4r4__* p2 = DataTransfer::GetPointer<S_i4r4S_r4r4__>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_i4r4S_r4r4__ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void ComputeHash128(Byte[], UnityEngine.Hash128 ByRef)bool w_voPS_u8u8_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voPS_u8u8_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal Pstruct
    S_u8u8_* p2 = DataTransfer::GetPointer<S_u8u8_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_u8u8_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void GetTypeLibVersionForAssembly(System.Reflection.Assembly, Int32 ByRef, Int32 ByRef)bool w_voPi4Pi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voPi4Pi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void ProcessVector3Modifications(UnityEditorInternal.IAnimationRecordingState, System.Collections.Generic.Dictionary`2[System.Object,UnityEditorInternal.AnimationRecording+Vector3Modification] ByRef)bool w_voPo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voPo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up2 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv2)); // object ret
    Il2CppObject** p2 = &up2;
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Tetrahedralize(UnityEngine.Vector3[], Int32[] ByRef, UnityEngine.Vector3[] ByRef)bool w_voPoPo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voPoPo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up2 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv2)); // object ret
    Il2CppObject** p2 = &up2;
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up3 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv3)); // object ret
    Il2CppObject** p3 = &up3;
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void MinMaxSlider(UnityEngine.GUIContent, Single ByRef, Single ByRef, Single, Single, UnityEngine.GUILayoutOption[])bool w_voPr4Pr4r4r4Vo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voPr4Pr4r4r4Vo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp6 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;                if (!!true) return false;                if (!converter::Converter<float>::accept(env, _sv4)) return false;                if (!converter::Converter<float>::accept(env, _sv5)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    float p4 = converter::Converter<float>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    float p5 = converter::Converter<float>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, void* p3, float p4, float p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void GetAtlasDataForSprite(UnityEngine.Sprite, System.String ByRef, UnityEngine.Texture2D ByRef)bool w_voPsPo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voPsPo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal Ps
    Il2CppString* up2 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv2); // string ref
    Il2CppString** p2 = &up2;
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up3 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv3)); // object ret
    Il2CppObject** p3 = &up3;
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Copy(T[], Unity.Collections.NativeArray`1[T])bool w_voS_Pvi4i4i4S_pi4i4_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_Pvi4i4i4S_pi4i4_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp2 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv2);
    S_Pvi4i4i4S_pi4i4_i4_ p2 = pp2 ? *pp2 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_Pvi4i4i4S_pi4i4_i4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Copy(T[], Unity.Collections.NativeArray`1[T], Int32)bool w_voS_Pvi4i4i4S_pi4i4_i4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_Pvi4i4i4S_pi4i4_i4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp2 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv2);
    S_Pvi4i4i4S_pi4i4_i4_ p2 = pp2 ? *pp2 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_Pvi4i4i4S_pi4i4_i4_ p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void CreateJNIArgArray(System.Object[], System.Span`1[UnityEngine.jvalue])bool w_voS_S_p_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_S_p_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_S_p_i4_* pp2 = DataTransfer::GetPointer<S_S_p_i4_>(env, _sv2);
    S_S_p_i4_ p2 = pp2 ? *pp2 : S_S_p_i4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_S_p_i4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Play(UnityEngine.Animator, UnityEngine.Playables.Playable, UnityEngine.Playables.PlayableGraph)bool w_voS_S_pu4__S_pu4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_S_pu4__S_pu4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_S_pu4__* pp2 = DataTransfer::GetPointer<S_S_pu4__>(env, _sv2);
    S_S_pu4__ p2 = pp2 ? *pp2 : S_S_pu4__ {};
        
     // LuaValToCSVal struct
    S_pu4_* pp3 = DataTransfer::GetPointer<S_pu4_>(env, _sv3);
    S_pu4_ p3 = pp3 ? *pp3 : S_pu4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_S_pu4__ p2, struct S_pu4_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void DrawProcedural(UnityEngine.Material, UnityEngine.Bounds, UnityEngine.MeshTopology, Int32, Int32, UnityEngine.Camera, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, Int32)bool w_voS_S_r4r4r4_S_r4r4r4__i4i4Di4DoDoDi4DbDi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_S_r4r4r4_S_r4r4r4__i4i4Di4DoDoDi4DbDi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp5 = wrapData->TypeInfos[3];
    auto TIp6 = wrapData->TypeInfos[4];
    auto TIp7 = wrapData->TypeInfos[5];
    auto TIp8 = wrapData->TypeInfos[6];
    auto TIp9 = wrapData->TypeInfos[7];
    auto TIp10 = wrapData->TypeInfos[8];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    if (checkLuaArgument) {
        if (lua_args_len != 10) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_S_r4r4r4_S_r4r4r4__* pp2 = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4__>(env, _sv2);
    S_S_r4r4r4_S_r4r4r4__ p2 = pp2 ? *pp2 : S_S_r4r4r4_S_r4r4r4__ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
 // LuaValToCSVal P any
    void* p7 = nullptr;        
        
 // LuaValToCSVal P any
    void* p8 = nullptr;        
        
 // LuaValToCSVal P any
    void* p9 = nullptr;        
        
 // LuaValToCSVal P any
    void* p10 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_S_r4r4r4_S_r4r4r4__ p2, int32_t p3, int32_t p4, void* p5, void* p6, void* p7, void* p8, void* p9, void* p10, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10,  method);
    

        return true;
}
// Void DrawProceduralIndirect(UnityEngine.Material, UnityEngine.Bounds, UnityEngine.MeshTopology, UnityEngine.ComputeBuffer, Int32, UnityEngine.Camera, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, Int32)bool w_voS_S_r4r4r4_S_r4r4r4__i4oDi4DoDoDi4DbDi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_S_r4r4r4_S_r4r4r4__i4oDi4DoDoDi4DbDi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp7 = wrapData->TypeInfos[6];
    auto TIp8 = wrapData->TypeInfos[7];
    auto TIp9 = wrapData->TypeInfos[8];
    auto TIp10 = wrapData->TypeInfos[9];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    if (checkLuaArgument) {
        if (lua_args_len != 10) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_S_r4r4r4_S_r4r4r4__* pp2 = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4__>(env, _sv2);
    S_S_r4r4r4_S_r4r4r4__ p2 = pp2 ? *pp2 : S_S_r4r4r4_S_r4r4r4__ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
 // LuaValToCSVal P any
    void* p7 = nullptr;        
        
 // LuaValToCSVal P any
    void* p8 = nullptr;        
        
 // LuaValToCSVal P any
    void* p9 = nullptr;        
        
 // LuaValToCSVal P any
    void* p10 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_S_r4r4r4_S_r4r4r4__ p2, int32_t p3, Il2CppObject* p4, void* p5, void* p6, void* p7, void* p8, void* p9, void* p10, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10,  method);
    

        return true;
}
// Void DrawProcedural(UnityEngine.Material, UnityEngine.Bounds, UnityEngine.MeshTopology, UnityEngine.GraphicsBuffer, Int32, Int32, UnityEngine.Camera, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, Int32)bool w_voS_S_r4r4r4_S_r4r4r4__i4oi4Di4DoDoDi4DbDi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_S_r4r4r4_S_r4r4r4__i4oi4Di4DoDoDi4DbDi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp6 = wrapData->TypeInfos[4];
    auto TIp7 = wrapData->TypeInfos[5];
    auto TIp8 = wrapData->TypeInfos[6];
    auto TIp9 = wrapData->TypeInfos[7];
    auto TIp10 = wrapData->TypeInfos[8];
    auto TIp11 = wrapData->TypeInfos[9];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    if (checkLuaArgument) {
        if (lua_args_len != 11) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_S_r4r4r4_S_r4r4r4__* pp2 = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4__>(env, _sv2);
    S_S_r4r4r4_S_r4r4r4__ p2 = pp2 ? *pp2 : S_S_r4r4r4_S_r4r4r4__ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
 // LuaValToCSVal P any
    void* p7 = nullptr;        
        
 // LuaValToCSVal P any
    void* p8 = nullptr;        
        
 // LuaValToCSVal P any
    void* p9 = nullptr;        
        
 // LuaValToCSVal P any
    void* p10 = nullptr;        
        
 // LuaValToCSVal P any
    void* p11 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_S_r4r4r4_S_r4r4r4__ p2, int32_t p3, Il2CppObject* p4, int32_t p5, void* p6, void* p7, void* p8, void* p9, void* p10, void* p11, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11,  method);
    

        return true;
}
// Void DrawProceduralIndirect(UnityEngine.Material, UnityEngine.Bounds, UnityEngine.MeshTopology, UnityEngine.GraphicsBuffer, UnityEngine.ComputeBuffer, Int32, UnityEngine.Camera, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, Int32)bool w_voS_S_r4r4r4_S_r4r4r4__i4ooDi4DoDoDi4DbDi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_S_r4r4r4_S_r4r4r4__i4ooDi4DoDoDi4DbDi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp7 = wrapData->TypeInfos[6];
    auto TIp8 = wrapData->TypeInfos[7];
    auto TIp9 = wrapData->TypeInfos[8];
    auto TIp10 = wrapData->TypeInfos[9];
    auto TIp11 = wrapData->TypeInfos[10];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    if (checkLuaArgument) {
        if (lua_args_len != 11) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_S_r4r4r4_S_r4r4r4__* pp2 = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4__>(env, _sv2);
    S_S_r4r4r4_S_r4r4r4__ p2 = pp2 ? *pp2 : S_S_r4r4r4_S_r4r4r4__ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
 // LuaValToCSVal P any
    void* p7 = nullptr;        
        
 // LuaValToCSVal P any
    void* p8 = nullptr;        
        
 // LuaValToCSVal P any
    void* p9 = nullptr;        
        
 // LuaValToCSVal P any
    void* p10 = nullptr;        
        
 // LuaValToCSVal P any
    void* p11 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_S_r4r4r4_S_r4r4r4__ p2, int32_t p3, Il2CppObject* p4, Il2CppObject* p5, void* p6, void* p7, void* p8, void* p9, void* p10, void* p11, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11,  method);
    

        return true;
}
// Void GenerateSpriteShape(UnityEngine.U2D.SpriteShapeRenderer, UnityEngine.U2D.SpriteShapeParameters, UnityEngine.U2D.ShapeControlPoint[], UnityEngine.U2D.SpriteShapeMetaData[], UnityEngine.U2D.AngleRangeInfo[], UnityEngine.Sprite[], UnityEngine.Sprite[])bool w_voS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ou4u4r4r4r4r4bbbbb_ooooo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ou4u4r4r4r4r4bbbbb_ooooo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];
    auto TIp7 = wrapData->TypeInfos[7];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ou4u4r4r4r4r4bbbbb_* pp2 = DataTransfer::GetPointer<S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ou4u4r4r4r4r4bbbbb_>(env, _sv2);
    S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ou4u4r4r4r4r4bbbbb_ p2 = pp2 ? *pp2 : S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ou4u4r4r4r4r4bbbbb_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ou4u4r4r4r4r4bbbbb_ p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, Il2CppObject* p7, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void MoveGameObjectToScene(UnityEngine.GameObject, UnityEngine.SceneManagement.Scene)bool w_voS_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_i4_* pp2 = DataTransfer::GetPointer<S_i4_>(env, _sv2);
    S_i4_ p2 = pp2 ? *pp2 : S_i4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_i4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void MoveGameObjectToScene(UnityEngine.GameObject, UnityEngine.SceneManagement.Scene, System.String)bool w_voS_i4_s(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_i4_s");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_i4_* pp2 = DataTransfer::GetPointer<S_i4_>(env, _sv2);
    S_i4_ p2 = pp2 ? *pp2 : S_i4_ {};
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_i4_ p2, Il2CppString* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetRenderTarget(UnityEngine.RenderBuffer[], UnityEngine.RenderBuffer)bool w_voS_i4p_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_i4p_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_i4p_* pp2 = DataTransfer::GetPointer<S_i4p_>(env, _sv2);
    S_i4p_ p2 = pp2 ? *pp2 : S_i4p_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_i4p_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void WaitAll(System.Threading.Tasks.Task[], System.Threading.CancellationToken)bool w_voS_o_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_o_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_o_* pp2 = DataTransfer::GetPointer<S_o_>(env, _sv2);
    S_o_ p2 = pp2 ? *pp2 : S_o_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_o_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void InitializeArray(System.Array, System.RuntimeFieldHandle)bool w_voS_p_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_p_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_p_* pp2 = DataTransfer::GetPointer<S_p_>(env, _sv2);
    S_p_ p2 = pp2 ? *pp2 : S_p_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_p_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void AddSelectedKeyframes(UnityEditorInternal.AnimationWindowState, UnityEditorInternal.AnimationKeyTime)bool w_voS_r4i4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4i4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4i4r4_* pp2 = DataTransfer::GetPointer<S_r4i4r4_>(env, _sv2);
    S_r4i4r4_ p2 = pp2 ? *pp2 : S_r4i4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4i4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void SetCursor(UnityEngine.Texture2D, UnityEngine.Vector2, UnityEngine.CursorMode)bool w_voS_r4r4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4_>(env, _sv2);
    S_r4r4_ p2 = pp2 ? *pp2 : S_r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4_ p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void PlayClipAtPoint(UnityEngine.AudioClip, UnityEngine.Vector3)bool w_voS_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void DrawTexture3DSlice(UnityEngine.Texture, UnityEngine.Vector3, UnityEngine.FilterMode, Boolean, UnityEngine.Gradient)bool w_voS_r4r4r4_Di4DbDo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4_Di4DbDo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4_ p2, void* p3, void* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Vector3, UnityEngine.Quaternion)bool w_voS_r4r4r4_S_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4_S_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Vector3)bool w_voS_r4r4r4_S_r4r4r4r4_S_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4_S_r4r4r4r4_S_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv4);
    S_r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, struct S_r4r4r4_ p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void DrawMeshNow(UnityEngine.Mesh, UnityEngine.Vector3, UnityEngine.Quaternion, Int32)bool w_voS_r4r4r4_S_r4r4r4r4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4_S_r4r4r4r4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Material, Int32)bool w_voS_r4r4r4_S_r4r4r4r4_oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4_S_r4r4r4r4_oi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, Il2CppObject* p4, int32_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Material, Int32, UnityEngine.Camera)bool w_voS_r4r4r4_S_r4r4r4r4_oi4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4_S_r4r4r4r4_oi4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, Il2CppObject* p4, int32_t p5, Il2CppObject* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Material, Int32, UnityEngine.Camera, Int32)bool w_voS_r4r4r4_S_r4r4r4r4_oi4oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4_S_r4r4r4r4_oi4oi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, Il2CppObject* p4, int32_t p5, Il2CppObject* p6, int32_t p7, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock)bool w_voS_r4r4r4_S_r4r4r4r4_oi4oi4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4_S_r4r4r4r4_oi4oi4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp8 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    if (checkLuaArgument) {
        if (lua_args_len != 8) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p8 = LuaValToCSRef(TIp8, env _sv8);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, Il2CppObject* p4, int32_t p5, Il2CppObject* p6, int32_t p7, Il2CppObject* p8, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock, Boolean)bool w_voS_r4r4r4_S_r4r4r4r4_oi4oi4ob(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4_S_r4r4r4r4_oi4oi4ob");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp8 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    if (checkLuaArgument) {
        if (lua_args_len != 9) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv9)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p8 = LuaValToCSRef(TIp8, env _sv8);
        
 // LuaValToCSVal P any
    bool p9 = converter::Converter<bool>::toCpp(env, _sv9);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, Il2CppObject* p4, int32_t p5, Il2CppObject* p6, int32_t p7, Il2CppObject* p8, bool p9, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock, Boolean, Boolean)bool w_voS_r4r4r4_S_r4r4r4r4_oi4oi4obb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4_S_r4r4r4r4_oi4oi4obb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp8 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    if (checkLuaArgument) {
        if (lua_args_len != 10) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv9)) return false;                if (!converter::Converter<bool>::accept(env, _sv10)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p8 = LuaValToCSRef(TIp8, env _sv8);
        
 // LuaValToCSVal P any
    bool p9 = converter::Converter<bool>::toCpp(env, _sv9);        
        
 // LuaValToCSVal P any
    bool p10 = converter::Converter<bool>::toCpp(env, _sv10);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, Il2CppObject* p4, int32_t p5, Il2CppObject* p6, int32_t p7, Il2CppObject* p8, bool p9, bool p10, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock, Boolean, Boolean, Boolean)bool w_voS_r4r4r4_S_r4r4r4r4_oi4oi4obbb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4_S_r4r4r4r4_oi4oi4obbb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp8 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    if (checkLuaArgument) {
        if (lua_args_len != 11) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv9)) return false;                if (!converter::Converter<bool>::accept(env, _sv10)) return false;                if (!converter::Converter<bool>::accept(env, _sv11)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p8 = LuaValToCSRef(TIp8, env _sv8);
        
 // LuaValToCSVal P any
    bool p9 = converter::Converter<bool>::toCpp(env, _sv9);        
        
 // LuaValToCSVal P any
    bool p10 = converter::Converter<bool>::toCpp(env, _sv10);        
        
 // LuaValToCSVal P any
    bool p11 = converter::Converter<bool>::toCpp(env, _sv11);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, Il2CppObject* p4, int32_t p5, Il2CppObject* p6, int32_t p7, Il2CppObject* p8, bool p9, bool p10, bool p11, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode)bool w_voS_r4r4r4_S_r4r4r4r4_oi4oi4oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4_S_r4r4r4r4_oi4oi4oi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp8 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    if (checkLuaArgument) {
        if (lua_args_len != 9) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv9)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p8 = LuaValToCSRef(TIp8, env _sv8);
        
 // LuaValToCSVal P any
    int32_t p9 = converter::Converter<int32_t>::toCpp(env, _sv9);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, Il2CppObject* p4, int32_t p5, Il2CppObject* p6, int32_t p7, Il2CppObject* p8, int32_t p9, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean)bool w_voS_r4r4r4_S_r4r4r4r4_oi4oi4oi4b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4_S_r4r4r4r4_oi4oi4oi4b");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp8 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    if (checkLuaArgument) {
        if (lua_args_len != 10) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv9)) return false;                if (!converter::Converter<bool>::accept(env, _sv10)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p8 = LuaValToCSRef(TIp8, env _sv8);
        
 // LuaValToCSVal P any
    int32_t p9 = converter::Converter<int32_t>::toCpp(env, _sv9);        
        
 // LuaValToCSVal P any
    bool p10 = converter::Converter<bool>::toCpp(env, _sv10);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, Il2CppObject* p4, int32_t p5, Il2CppObject* p6, int32_t p7, Il2CppObject* p8, int32_t p9, bool p10, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, UnityEngine.Transform)bool w_voS_r4r4r4_S_r4r4r4r4_oi4oi4oi4bo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4_S_r4r4r4r4_oi4oi4oi4bo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp8 = wrapData->TypeInfos[6];
    auto TIp11 = wrapData->TypeInfos[7];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    if (checkLuaArgument) {
        if (lua_args_len != 11) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv9)) return false;                if (!converter::Converter<bool>::accept(env, _sv10)) return false;                if (!DataTransfer::IsAssignable(env, _sv11, TIp11, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p8 = LuaValToCSRef(TIp8, env _sv8);
        
 // LuaValToCSVal P any
    int32_t p9 = converter::Converter<int32_t>::toCpp(env, _sv9);        
        
 // LuaValToCSVal P any
    bool p10 = converter::Converter<bool>::toCpp(env, _sv10);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p11 = LuaValToCSRef(TIp11, env _sv11);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, Il2CppObject* p4, int32_t p5, Il2CppObject* p6, int32_t p7, Il2CppObject* p8, int32_t p9, bool p10, Il2CppObject* p11, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, UnityEngine.Transform, Boolean)bool w_voS_r4r4r4_S_r4r4r4r4_oi4oi4oi4bob(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4_S_r4r4r4r4_oi4oi4oi4bob");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp8 = wrapData->TypeInfos[6];
    auto TIp11 = wrapData->TypeInfos[7];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    pesapi_value_sv12 = pesapi_get_arg(info, 12);
    if (checkLuaArgument) {
        if (lua_args_len != 12) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv9)) return false;                if (!converter::Converter<bool>::accept(env, _sv10)) return false;                if (!DataTransfer::IsAssignable(env, _sv11, TIp11, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv12)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p8 = LuaValToCSRef(TIp8, env _sv8);
        
 // LuaValToCSVal P any
    int32_t p9 = converter::Converter<int32_t>::toCpp(env, _sv9);        
        
 // LuaValToCSVal P any
    bool p10 = converter::Converter<bool>::toCpp(env, _sv10);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p11 = LuaValToCSRef(TIp11, env _sv11);
        
 // LuaValToCSVal P any
    bool p12 = converter::Converter<bool>::toCpp(env, _sv12);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, Il2CppObject* p4, int32_t p5, Il2CppObject* p6, int32_t p7, Il2CppObject* p8, int32_t p9, bool p10, Il2CppObject* p11, bool p12, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12,  method);
    

        return true;
}
// Void PlayClipAtPoint(UnityEngine.AudioClip, UnityEngine.Vector3, Single)bool w_voS_r4r4r4_r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4_r4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4_ p2, float p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetEmissive(UnityEngine.Renderer, UnityEngine.Color)bool w_voS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void DrawOutline(Int32[], UnityEngine.Color, Single)bool w_voS_r4r4r4r4_Dr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4_Dr4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4_ p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void MinMaxSlider(UnityEngine.GUIContent, UnityEngine.Rect, Single ByRef, Single ByRef, Single, Single)bool w_voS_r4r4r4r4_Pr4Pr4r4r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4_Pr4Pr4r4r4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!!true) return false;                if (!!true) return false;                if (!converter::Converter<float>::accept(env, _sv5)) return false;                if (!converter::Converter<float>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
 // LuaValToCSVal P any
    float p5 = converter::Converter<float>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    float p6 = converter::Converter<float>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4_ p2, void* p3, void* p4, float p5, float p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void DrawSolidRectangleWithOutline(UnityEngine.Vector3[], UnityEngine.Color, UnityEngine.Color)bool w_voS_r4r4r4r4_S_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4_S_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4_ p2, struct S_r4r4r4r4_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void DrawOutline(UnityEngine.Renderer[], UnityEngine.Color, UnityEngine.Color, Single)bool w_voS_r4r4r4r4_S_r4r4r4r4_Dr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4_S_r4r4r4r4_Dr4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4_ p2, struct S_r4r4r4r4_ p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void CurveField(UnityEditor.SerializedProperty, UnityEngine.Color, UnityEngine.Rect, UnityEngine.GUILayoutOption[])bool w_voS_r4r4r4r4_S_r4r4r4r4_Vo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4_S_r4r4r4r4_Vo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4_ p2, struct S_r4r4r4r4_ p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void CurveField(UnityEditor.SerializedProperty, UnityEngine.Color, UnityEngine.Rect, UnityEngine.GUIContent, UnityEngine.GUILayoutOption[])bool w_voS_r4r4r4r4_S_r4r4r4r4_oVo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4_S_r4r4r4r4_oVo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4_ p2, struct S_r4r4r4r4_ p3, Il2CppObject* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void DrawMeshNow(UnityEngine.Mesh, UnityEngine.Matrix4x4)bool w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void DrawMeshNow(UnityEngine.Mesh, UnityEngine.Matrix4x4, Int32)bool w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Matrix4x4, UnityEngine.Material, Int32)bool w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, Il2CppObject* p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.Camera)bool w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, Il2CppObject* p3, int32_t p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.Camera, Int32)bool w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, Il2CppObject* p3, int32_t p4, Il2CppObject* p5, int32_t p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock)bool w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp7 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, Il2CppObject* p3, int32_t p4, Il2CppObject* p5, int32_t p6, Il2CppObject* p7, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock, Boolean)bool w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4ob(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4ob");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp7 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    if (checkLuaArgument) {
        if (lua_args_len != 8) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv8)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
 // LuaValToCSVal P any
    bool p8 = converter::Converter<bool>::toCpp(env, _sv8);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, Il2CppObject* p3, int32_t p4, Il2CppObject* p5, int32_t p6, Il2CppObject* p7, bool p8, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock, Boolean, Boolean)bool w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4obb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4obb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp7 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    if (checkLuaArgument) {
        if (lua_args_len != 9) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv8)) return false;                if (!converter::Converter<bool>::accept(env, _sv9)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
 // LuaValToCSVal P any
    bool p8 = converter::Converter<bool>::toCpp(env, _sv8);        
        
 // LuaValToCSVal P any
    bool p9 = converter::Converter<bool>::toCpp(env, _sv9);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, Il2CppObject* p3, int32_t p4, Il2CppObject* p5, int32_t p6, Il2CppObject* p7, bool p8, bool p9, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock, Boolean, Boolean, Boolean)bool w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4obbb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4obbb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp7 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    if (checkLuaArgument) {
        if (lua_args_len != 10) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv8)) return false;                if (!converter::Converter<bool>::accept(env, _sv9)) return false;                if (!converter::Converter<bool>::accept(env, _sv10)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
 // LuaValToCSVal P any
    bool p8 = converter::Converter<bool>::toCpp(env, _sv8);        
        
 // LuaValToCSVal P any
    bool p9 = converter::Converter<bool>::toCpp(env, _sv9);        
        
 // LuaValToCSVal P any
    bool p10 = converter::Converter<bool>::toCpp(env, _sv10);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, Il2CppObject* p3, int32_t p4, Il2CppObject* p5, int32_t p6, Il2CppObject* p7, bool p8, bool p9, bool p10, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode)bool w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4oi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp7 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    if (checkLuaArgument) {
        if (lua_args_len != 8) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv8)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
 // LuaValToCSVal P any
    int32_t p8 = converter::Converter<int32_t>::toCpp(env, _sv8);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, Il2CppObject* p3, int32_t p4, Il2CppObject* p5, int32_t p6, Il2CppObject* p7, int32_t p8, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean)bool w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4oi4b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4oi4b");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp7 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    if (checkLuaArgument) {
        if (lua_args_len != 9) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv8)) return false;                if (!converter::Converter<bool>::accept(env, _sv9)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
 // LuaValToCSVal P any
    int32_t p8 = converter::Converter<int32_t>::toCpp(env, _sv8);        
        
 // LuaValToCSVal P any
    bool p9 = converter::Converter<bool>::toCpp(env, _sv9);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, Il2CppObject* p3, int32_t p4, Il2CppObject* p5, int32_t p6, Il2CppObject* p7, int32_t p8, bool p9, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, UnityEngine.Transform)bool w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4oi4bo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4oi4bo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp7 = wrapData->TypeInfos[5];
    auto TIp10 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    if (checkLuaArgument) {
        if (lua_args_len != 10) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv8)) return false;                if (!converter::Converter<bool>::accept(env, _sv9)) return false;                if (!DataTransfer::IsAssignable(env, _sv10, TIp10, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
 // LuaValToCSVal P any
    int32_t p8 = converter::Converter<int32_t>::toCpp(env, _sv8);        
        
 // LuaValToCSVal P any
    bool p9 = converter::Converter<bool>::toCpp(env, _sv9);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p10 = LuaValToCSRef(TIp10, env _sv10);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, Il2CppObject* p3, int32_t p4, Il2CppObject* p5, int32_t p6, Il2CppObject* p7, int32_t p8, bool p9, Il2CppObject* p10, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, UnityEngine.Transform, Boolean)bool w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4oi4bob(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4oi4bob");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp7 = wrapData->TypeInfos[5];
    auto TIp10 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    if (checkLuaArgument) {
        if (lua_args_len != 11) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv8)) return false;                if (!converter::Converter<bool>::accept(env, _sv9)) return false;                if (!DataTransfer::IsAssignable(env, _sv10, TIp10, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv11)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
 // LuaValToCSVal P any
    int32_t p8 = converter::Converter<int32_t>::toCpp(env, _sv8);        
        
 // LuaValToCSVal P any
    bool p9 = converter::Converter<bool>::toCpp(env, _sv9);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p10 = LuaValToCSRef(TIp10, env _sv10);
        
 // LuaValToCSVal P any
    bool p11 = converter::Converter<bool>::toCpp(env, _sv11);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, Il2CppObject* p3, int32_t p4, Il2CppObject* p5, int32_t p6, Il2CppObject* p7, int32_t p8, bool p9, Il2CppObject* p10, bool p11, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, UnityEngine.Transform, UnityEngine.Rendering.LightProbeUsage)bool w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4oi4boi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4oi4boi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp7 = wrapData->TypeInfos[5];
    auto TIp10 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    if (checkLuaArgument) {
        if (lua_args_len != 11) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv8)) return false;                if (!converter::Converter<bool>::accept(env, _sv9)) return false;                if (!DataTransfer::IsAssignable(env, _sv10, TIp10, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv11)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
 // LuaValToCSVal P any
    int32_t p8 = converter::Converter<int32_t>::toCpp(env, _sv8);        
        
 // LuaValToCSVal P any
    bool p9 = converter::Converter<bool>::toCpp(env, _sv9);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p10 = LuaValToCSRef(TIp10, env _sv10);
        
 // LuaValToCSVal P any
    int32_t p11 = converter::Converter<int32_t>::toCpp(env, _sv11);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, Il2CppObject* p3, int32_t p4, Il2CppObject* p5, int32_t p6, Il2CppObject* p7, int32_t p8, bool p9, Il2CppObject* p10, int32_t p11, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.Camera, Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, UnityEngine.Transform, UnityEngine.Rendering.LightProbeUsage, UnityEngine.LightProbeProxyVolume)bool w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4oi4boi4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4oi4oi4boi4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp7 = wrapData->TypeInfos[5];
    auto TIp10 = wrapData->TypeInfos[6];
    auto TIp12 = wrapData->TypeInfos[7];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    pesapi_value_sv12 = pesapi_get_arg(info, 12);
    if (checkLuaArgument) {
        if (lua_args_len != 12) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv8)) return false;                if (!converter::Converter<bool>::accept(env, _sv9)) return false;                if (!DataTransfer::IsAssignable(env, _sv10, TIp10, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv11)) return false;                if (!DataTransfer::IsAssignable(env, _sv12, TIp12, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
 // LuaValToCSVal P any
    int32_t p8 = converter::Converter<int32_t>::toCpp(env, _sv8);        
        
 // LuaValToCSVal P any
    bool p9 = converter::Converter<bool>::toCpp(env, _sv9);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p10 = LuaValToCSRef(TIp10, env _sv10);
        
 // LuaValToCSVal P any
    int32_t p11 = converter::Converter<int32_t>::toCpp(env, _sv11);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p12 = LuaValToCSRef(TIp12, env _sv12);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, Il2CppObject* p3, int32_t p4, Il2CppObject* p5, int32_t p6, Il2CppObject* p7, int32_t p8, bool p9, Il2CppObject* p10, int32_t p11, Il2CppObject* p12, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12,  method);
    

        return true;
}
// Void AddEditorCurveBinding(UnityEngine.GameObject, UnityEditor.EditorCurveBinding)bool w_voS_sosi4i4i4i4i4i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_sosi4i4i4i4i4i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_sosi4i4i4i4i4i4i4_* pp2 = DataTransfer::GetPointer<S_sosi4i4i4i4i4i4i4_>(env, _sv2);
    S_sosi4i4i4i4i4i4i4_ p2 = pp2 ? *pp2 : S_sosi4i4i4i4i4i4i4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_sosi4i4i4i4i4i4i4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void RenameCurvePath(UnityEditorInternal.AnimationWindowCurve, UnityEditor.EditorCurveBinding, UnityEngine.AnimationClip)bool w_voS_sosi4i4i4i4i4i4i4_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_sosi4i4i4i4i4i4i4_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_sosi4i4i4i4i4i4i4_* pp2 = DataTransfer::GetPointer<S_sosi4i4i4i4i4i4i4_>(env, _sv2);
    S_sosi4i4i4i4i4i4i4_ p2 = pp2 ? *pp2 : S_sosi4i4i4i4i4i4i4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_sosi4i4i4i4i4i4i4_ p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void PrepareCamera(UnityEngine.Camera, UnityEngine.VFX.VFXCameraXRSettings)bool w_voS_u4u4u4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voS_u4u4u4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal struct
    S_u4u4u4_* pp2 = DataTransfer::GetPointer<S_u4u4u4_>(env, _sv2);
    S_u4u4u4_ p2 = pp2 ? *pp2 : S_u4u4u4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, struct S_u4u4u4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void DrawAAPolyLine(UnityEngine.Texture2D, UnityEngine.Vector3[])bool w_voVS_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voVS_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Invoke(System.Threading.Tasks.ParallelOptions, System.Action[])bool w_voVo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voVo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void AddAlgorithm(System.Type, System.String[])bool w_voVs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voVs");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void RegisterChannel(System.Runtime.Remoting.Channels.IChannel, Boolean)bool w_vob(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vob");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, bool p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void SetGizmoEnabled(System.Type, Boolean, Boolean)bool w_vobDb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vobDb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, bool p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void StartBroadcasting(BroadcastStatusCallback, Boolean, Boolean)bool w_vobb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vobb");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, bool p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void CheckTypeSecurity(System.Type, System.Runtime.Serialization.Formatters.TypeFilterLevel)bool w_voi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void CompilePass(UnityEngine.Material, Int32, Boolean)bool w_voi4Db(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4Db");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void GetTextureStackSize(UnityEngine.Material, Int32, Int32 ByRef, Int32 ByRef)bool w_voi4Pi4Pi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4Pi4Pi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void Copy(T[], Int32, Unity.Collections.NativeArray`1[T], Int32, Int32)bool w_voi4S_Pvi4i4i4S_pi4i4_i4_i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4S_Pvi4i4i4S_pi4i4_i4_i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp3 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv3);
    S_Pvi4i4i4S_pi4i4_i4_ p3 = pp3 ? *pp3 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, struct S_Pvi4i4i4S_pi4i4_i4_ p3, int32_t p4, int32_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, Int32, UnityEngine.Vector3)bool w_voi4S_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4S_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv3);
    S_r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, struct S_r4r4r4_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, Int32, UnityEngine.Vector3, UnityEngine.Quaternion)bool w_voi4S_r4r4r4_S_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4S_r4r4r4_S_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv3);
    S_r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv4);
    S_r4r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, struct S_r4r4r4_ p3, struct S_r4r4r4r4_ p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void DrawMesh(UnityEngine.Mesh, Int32, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Vector3)bool w_voi4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv3);
    S_r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv4);
    S_r4r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp5 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv5);
    S_r4r4r4_ p5 = pp5 ? *pp5 : S_r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, struct S_r4r4r4_ p3, struct S_r4r4r4r4_ p4, struct S_r4r4r4_ p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void RenderGameViewCameras(UnityEngine.RenderTexture, Int32, UnityEngine.Rect, UnityEngine.Vector2, Boolean)bool w_voi4S_r4r4r4r4_S_r4r4_b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4S_r4r4r4r4_S_r4r4_b");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4_>(env, _sv4);
    S_r4r4_ p4 = pp4 ? *pp4 : S_r4r4_ {};
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, struct S_r4r4r4r4_ p3, struct S_r4r4_ p4, bool p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void ModifyMeshGradientColor(UnityEngine.CanvasRenderer, Int32, UnityEngine.Color, UnityEngine.Color, UnityEngine.Color, UnityEngine.Color)bool w_voi4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv4);
    S_r4r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp5 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv5);
    S_r4r4r4r4_ p5 = pp5 ? *pp5 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp6 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv6);
    S_r4r4r4r4_ p6 = pp6 ? *pp6 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, struct S_r4r4r4r4_ p3, struct S_r4r4r4r4_ p4, struct S_r4r4r4r4_ p5, struct S_r4r4r4r4_ p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void RequestRegion(UnityEngine.Material, Int32, UnityEngine.Rect, Int32, Int32)bool w_voi4S_r4r4r4r4_i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4S_r4r4r4r4_i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, struct S_r4r4r4r4_ p3, int32_t p4, int32_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void SetKeyBroken(UnityEngine.AnimationCurve, Int32, Boolean)bool w_voi4b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4b");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void FlipLayoutOnAxis(UnityEngine.RectTransform, Int32, Boolean, Boolean)bool w_voi4bb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4bb");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, bool p3, bool p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void Reverse(System.Array, Int32, Int32)bool w_voi4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void IntSlider(UnityEditor.SerializedProperty, Int32, Int32, UnityEngine.GUILayoutOption[])bool w_voi4i4Vo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4i4Vo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, int32_t p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetRenderTarget(UnityEngine.RenderTexture, Int32, UnityEngine.CubemapFace, Int32)bool w_voi4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, int32_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void CollectSourcesInStage(UnityEngine.Transform, Int32, UnityEngine.AI.NavMeshCollectGeometry, Int32, Boolean, System.Collections.Generic.List`1[UnityEngine.AI.NavMeshBuildMarkup], Boolean, UnityEngine.SceneManagement.Scene, System.Collections.Generic.List`1[UnityEngine.AI.NavMeshBuildSource])bool w_voi4i4i4bobS_i4_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4i4i4bobS_i4_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp6 = wrapData->TypeInfos[2];
    auto TIp8 = wrapData->TypeInfos[3];
    auto TIp9 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    if (checkLuaArgument) {
        if (lua_args_len != 9) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv7)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv9, TIp9, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
 // LuaValToCSVal P any
    bool p7 = converter::Converter<bool>::toCpp(env, _sv7);        
        
     // LuaValToCSVal struct
    S_i4_* pp8 = DataTransfer::GetPointer<S_i4_>(env, _sv8);
    S_i4_ p8 = pp8 ? *pp8 : S_i4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p9 = LuaValToCSRef(TIp9, env _sv9);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, int32_t p3, int32_t p4, bool p5, Il2CppObject* p6, bool p7, struct S_i4_ p8, Il2CppObject* p9, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9,  method);
    

        return true;
}
// Void CollectSources(UnityEngine.Transform, Int32, UnityEngine.AI.NavMeshCollectGeometry, Int32, Boolean, System.Collections.Generic.List`1[UnityEngine.AI.NavMeshBuildMarkup], Boolean, System.Collections.Generic.List`1[UnityEngine.AI.NavMeshBuildSource])bool w_voi4i4i4bobo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4i4i4bobo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp6 = wrapData->TypeInfos[2];
    auto TIp8 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    if (checkLuaArgument) {
        if (lua_args_len != 8) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv7)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
 // LuaValToCSVal P any
    bool p7 = converter::Converter<bool>::toCpp(env, _sv7);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p8 = LuaValToCSRef(TIp8, env _sv8);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, int32_t p3, int32_t p4, bool p5, Il2CppObject* p6, bool p7, Il2CppObject* p8, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8,  method);
    

        return true;
}
// Void UpdateMaterials(UnityEngine.Object, Int32, Int32, Int32, Int32)bool w_voi4i4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4i4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void CopyTexture(UnityEngine.Texture, Int32, Int32, Int32, Int32, Int32, Int32, UnityEngine.Texture, Int32, Int32, Int32, Int32, Boolean, Boolean)bool w_voi4i4i4i4i4i4oi4i4i4i4DbDb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4i4i4i4i4i4oi4i4i4i4DbDb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp8 = wrapData->TypeInfos[2];
    auto TIp13 = wrapData->TypeInfos[3];
    auto TIp14 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    pesapi_value_sv12 = pesapi_get_arg(info, 12);
    pesapi_value_sv13 = pesapi_get_arg(info, 13);
    pesapi_value_sv14 = pesapi_get_arg(info, 14);
    if (checkLuaArgument) {
        if (lua_args_len != 14) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv9)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv10)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv11)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv12)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p8 = LuaValToCSRef(TIp8, env _sv8);
        
 // LuaValToCSVal P any
    int32_t p9 = converter::Converter<int32_t>::toCpp(env, _sv9);        
        
 // LuaValToCSVal P any
    int32_t p10 = converter::Converter<int32_t>::toCpp(env, _sv10);        
        
 // LuaValToCSVal P any
    int32_t p11 = converter::Converter<int32_t>::toCpp(env, _sv11);        
        
 // LuaValToCSVal P any
    int32_t p12 = converter::Converter<int32_t>::toCpp(env, _sv12);        
        
 // LuaValToCSVal P any
    void* p13 = nullptr;        
        
 // LuaValToCSVal P any
    void* p14 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, Il2CppObject* p8, int32_t p9, int32_t p10, int32_t p11, int32_t p12, void* p13, void* p14, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14,  method);
    

        return true;
}
// Void CollectSourcesInStage(UnityEngine.Transform, Int32, UnityEngine.AI.NavMeshCollectGeometry, Int32, System.Collections.Generic.List`1[UnityEngine.AI.NavMeshBuildMarkup], UnityEngine.SceneManagement.Scene, System.Collections.Generic.List`1[UnityEngine.AI.NavMeshBuildSource])bool w_voi4i4i4oS_i4_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4i4i4oS_i4_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp5 = wrapData->TypeInfos[2];
    auto TIp6 = wrapData->TypeInfos[3];
    auto TIp7 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
     // LuaValToCSVal struct
    S_i4_* pp6 = DataTransfer::GetPointer<S_i4_>(env, _sv6);
    S_i4_ p6 = pp6 ? *pp6 : S_i4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, int32_t p3, int32_t p4, Il2CppObject* p5, struct S_i4_ p6, Il2CppObject* p7, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void CollectSources(UnityEngine.Transform, Int32, UnityEngine.AI.NavMeshCollectGeometry, Int32, System.Collections.Generic.List`1[UnityEngine.AI.NavMeshBuildMarkup], System.Collections.Generic.List`1[UnityEngine.AI.NavMeshBuildSource])bool w_voi4i4i4oo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4i4i4oo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp5 = wrapData->TypeInfos[2];
    auto TIp6 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, int32_t p3, int32_t p4, Il2CppObject* p5, Il2CppObject* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void Sort(System.Array, Int32, Int32, System.Collections.IComparer)bool w_voi4i4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4i4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, int32_t p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void IntSlider(UnityEditor.SerializedProperty, Int32, Int32, UnityEngine.GUIContent, UnityEngine.GUILayoutOption[])bool w_voi4i4oVo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4i4oVo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];
    auto TIp5 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, int32_t p3, Il2CppObject* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void CopyTexture(UnityEngine.Texture, Int32, Int32, UnityEngine.Texture, Int32, Int32)bool w_voi4i4oi4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4i4oi4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, int32_t p3, Il2CppObject* p4, int32_t p5, int32_t p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void CalculateBlendTexture(UnityEngine.Animator, Int32, Int32, UnityEngine.Texture2D, UnityEngine.Texture2D[], UnityEngine.Rect)bool w_voi4i4ooS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4i4ooS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];
    auto TIp5 = wrapData->TypeInfos[3];
    auto TIp6 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp6 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv6);
    S_r4r4r4r4_ p6 = pp6 ? *pp6 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, int32_t p3, Il2CppObject* p4, Il2CppObject* p5, struct S_r4r4r4r4_ p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void CalculateRootBlendTreeChildWeights(UnityEngine.Animator, Int32, Int32, Single[], Single, Single)bool w_voi4i4or4r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4i4or4r4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<float>::accept(env, _sv5)) return false;                if (!converter::Converter<float>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    float p5 = converter::Converter<float>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    float p6 = converter::Converter<float>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, int32_t p3, Il2CppObject* p4, float p5, float p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void IntSlider(UnityEditor.SerializedProperty, Int32, Int32, System.String, UnityEngine.GUILayoutOption[])bool w_voi4i4sVo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4i4sVo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];
    auto TIp5 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv4)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal s
    Il2CppString* p4 = converter::Converter<Il2CppString*>::toCpp(env, _sv4);
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, int32_t p3, Il2CppString* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void SendCommand(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventCommand, System.Collections.Generic.IDictionary`2[System.String,System.String])bool w_voi4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void DrawBrushPreview(UnityEngine.TerrainTools.PaintContext, UnityEditor.TerrainTools.TerrainBrushPreviewMode, UnityEngine.Texture, UnityEngine.TerrainTools.BrushTransform, UnityEngine.Material, Int32)bool w_voi4oS_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4__oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4oS_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4__oi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal struct
    S_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4__* pp4 = DataTransfer::GetPointer<S_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4__>(env, _sv4);
    S_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4__ p4 = pp4 ? *pp4 : S_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4__ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, struct S_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4__ p4, Il2CppObject* p5, int32_t p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void DrawMeshInstancedProcedural(UnityEngine.Mesh, Int32, UnityEngine.Material, UnityEngine.Bounds, Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, Int32, UnityEngine.Camera, UnityEngine.Rendering.LightProbeUsage, UnityEngine.LightProbeProxyVolume)bool w_voi4oS_S_r4r4r4_S_r4r4r4__i4DoDi4DbDi4DoDi4Do(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4oS_S_r4r4r4_S_r4r4r4__i4DoDi4DbDi4DoDi4Do");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp6 = wrapData->TypeInfos[4];
    auto TIp7 = wrapData->TypeInfos[5];
    auto TIp8 = wrapData->TypeInfos[6];
    auto TIp9 = wrapData->TypeInfos[7];
    auto TIp10 = wrapData->TypeInfos[8];
    auto TIp11 = wrapData->TypeInfos[9];
    auto TIp12 = wrapData->TypeInfos[10];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    pesapi_value_sv12 = pesapi_get_arg(info, 12);
    if (checkLuaArgument) {
        if (lua_args_len != 12) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal struct
    S_S_r4r4r4_S_r4r4r4__* pp4 = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4__>(env, _sv4);
    S_S_r4r4r4_S_r4r4r4__ p4 = pp4 ? *pp4 : S_S_r4r4r4_S_r4r4r4__ {};
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
 // LuaValToCSVal P any
    void* p7 = nullptr;        
        
 // LuaValToCSVal P any
    void* p8 = nullptr;        
        
 // LuaValToCSVal P any
    void* p9 = nullptr;        
        
 // LuaValToCSVal P any
    void* p10 = nullptr;        
        
 // LuaValToCSVal P any
    void* p11 = nullptr;        
        
 // LuaValToCSVal P any
    void* p12 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, struct S_S_r4r4r4_S_r4r4r4__ p4, int32_t p5, void* p6, void* p7, void* p8, void* p9, void* p10, void* p11, void* p12, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12,  method);
    

        return true;
}
// Void DrawMeshInstancedIndirect(UnityEngine.Mesh, Int32, UnityEngine.Material, UnityEngine.Bounds, UnityEngine.ComputeBuffer, Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, Int32, UnityEngine.Camera, UnityEngine.Rendering.LightProbeUsage)bool w_voi4oS_S_r4r4r4_S_r4r4r4__oDi4DoDi4DbDi4DoDi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4oS_S_r4r4r4_S_r4r4r4__oDi4DoDi4DbDi4DoDi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp7 = wrapData->TypeInfos[6];
    auto TIp8 = wrapData->TypeInfos[7];
    auto TIp9 = wrapData->TypeInfos[8];
    auto TIp10 = wrapData->TypeInfos[9];
    auto TIp11 = wrapData->TypeInfos[10];
    auto TIp12 = wrapData->TypeInfos[11];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    pesapi_value_sv12 = pesapi_get_arg(info, 12);
    if (checkLuaArgument) {
        if (lua_args_len != 12) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal struct
    S_S_r4r4r4_S_r4r4r4__* pp4 = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4__>(env, _sv4);
    S_S_r4r4r4_S_r4r4r4__ p4 = pp4 ? *pp4 : S_S_r4r4r4_S_r4r4r4__ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
 // LuaValToCSVal P any
    void* p7 = nullptr;        
        
 // LuaValToCSVal P any
    void* p8 = nullptr;        
        
 // LuaValToCSVal P any
    void* p9 = nullptr;        
        
 // LuaValToCSVal P any
    void* p10 = nullptr;        
        
 // LuaValToCSVal P any
    void* p11 = nullptr;        
        
 // LuaValToCSVal P any
    void* p12 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, struct S_S_r4r4r4_S_r4r4r4__ p4, Il2CppObject* p5, void* p6, void* p7, void* p8, void* p9, void* p10, void* p11, void* p12, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12,  method);
    

        return true;
}
// Void DrawMeshInstancedIndirect(UnityEngine.Mesh, Int32, UnityEngine.Material, UnityEngine.Bounds, UnityEngine.ComputeBuffer, Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, Int32, UnityEngine.Camera, UnityEngine.Rendering.LightProbeUsage, UnityEngine.LightProbeProxyVolume)bool w_voi4oS_S_r4r4r4_S_r4r4r4__oi4oi4bi4oi4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4oS_S_r4r4r4_S_r4r4r4__oi4oi4bi4oi4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp7 = wrapData->TypeInfos[5];
    auto TIp11 = wrapData->TypeInfos[6];
    auto TIp13 = wrapData->TypeInfos[7];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    pesapi_value_sv12 = pesapi_get_arg(info, 12);
    pesapi_value_sv13 = pesapi_get_arg(info, 13);
    if (checkLuaArgument) {
        if (lua_args_len != 13) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv8)) return false;                if (!converter::Converter<bool>::accept(env, _sv9)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv10)) return false;                if (!DataTransfer::IsAssignable(env, _sv11, TIp11, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv12)) return false;                if (!DataTransfer::IsAssignable(env, _sv13, TIp13, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal struct
    S_S_r4r4r4_S_r4r4r4__* pp4 = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4__>(env, _sv4);
    S_S_r4r4r4_S_r4r4r4__ p4 = pp4 ? *pp4 : S_S_r4r4r4_S_r4r4r4__ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
 // LuaValToCSVal P any
    int32_t p8 = converter::Converter<int32_t>::toCpp(env, _sv8);        
        
 // LuaValToCSVal P any
    bool p9 = converter::Converter<bool>::toCpp(env, _sv9);        
        
 // LuaValToCSVal P any
    int32_t p10 = converter::Converter<int32_t>::toCpp(env, _sv10);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p11 = LuaValToCSRef(TIp11, env _sv11);
        
 // LuaValToCSVal P any
    int32_t p12 = converter::Converter<int32_t>::toCpp(env, _sv12);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p13 = LuaValToCSRef(TIp13, env _sv13);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, struct S_S_r4r4r4_S_r4r4r4__ p4, Il2CppObject* p5, int32_t p6, Il2CppObject* p7, int32_t p8, bool p9, int32_t p10, Il2CppObject* p11, int32_t p12, Il2CppObject* p13, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13,  method);
    

        return true;
}
// Void RegisterBoolPersistentListener(UnityEngine.Events.UnityEventBase, Int32, UnityEngine.Events.UnityAction`1[System.Boolean], Boolean)bool w_voi4ob(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4ob");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, bool p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void CopyTexture(UnityEngine.Texture, Int32, UnityEngine.Texture, Int32)bool w_voi4oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4oi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void Copy(System.Array, Int32, System.Array, Int32, Int32)bool w_voi4oi4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4oi4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, int32_t p4, int32_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void SetCameraBuffer(UnityEngine.Camera, UnityEngine.VFX.VFXCameraBufferTypes, UnityEngine.Texture, Int32, Int32, Int32, Int32)bool w_voi4oi4i4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4oi4i4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void DrawMeshInstanced(UnityEngine.Mesh, Int32, UnityEngine.Material, UnityEngine.Matrix4x4[])bool w_voi4oo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4oo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void DrawMeshInstanced(UnityEngine.Mesh, Int32, UnityEngine.Material, UnityEngine.Matrix4x4[], Int32)bool w_voi4ooi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4ooi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, int32_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void DrawMeshInstanced(UnityEngine.Mesh, Int32, UnityEngine.Material, UnityEngine.Matrix4x4[], Int32, UnityEngine.MaterialPropertyBlock)bool w_voi4ooi4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4ooi4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp6 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, int32_t p5, Il2CppObject* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void DrawMeshInstanced(UnityEngine.Mesh, Int32, UnityEngine.Material, UnityEngine.Matrix4x4[], Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode)bool w_voi4ooi4oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4ooi4oi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp6 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, int32_t p5, Il2CppObject* p6, int32_t p7, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void DrawMeshInstanced(UnityEngine.Mesh, Int32, UnityEngine.Material, UnityEngine.Matrix4x4[], Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean)bool w_voi4ooi4oi4b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4ooi4oi4b");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp6 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    if (checkLuaArgument) {
        if (lua_args_len != 8) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!converter::Converter<bool>::accept(env, _sv8)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
 // LuaValToCSVal P any
    bool p8 = converter::Converter<bool>::toCpp(env, _sv8);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, int32_t p5, Il2CppObject* p6, int32_t p7, bool p8, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8,  method);
    

        return true;
}
// Void DrawMeshInstanced(UnityEngine.Mesh, Int32, UnityEngine.Material, UnityEngine.Matrix4x4[], Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, Int32)bool w_voi4ooi4oi4bi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4ooi4oi4bi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp6 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    if (checkLuaArgument) {
        if (lua_args_len != 9) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!converter::Converter<bool>::accept(env, _sv8)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv9)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
 // LuaValToCSVal P any
    bool p8 = converter::Converter<bool>::toCpp(env, _sv8);        
        
 // LuaValToCSVal P any
    int32_t p9 = converter::Converter<int32_t>::toCpp(env, _sv9);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, int32_t p5, Il2CppObject* p6, int32_t p7, bool p8, int32_t p9, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9,  method);
    

        return true;
}
// Void DrawMeshInstanced(UnityEngine.Mesh, Int32, UnityEngine.Material, UnityEngine.Matrix4x4[], Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, Int32, UnityEngine.Camera)bool w_voi4ooi4oi4bi4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4ooi4oi4bi4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp6 = wrapData->TypeInfos[4];
    auto TIp10 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    if (checkLuaArgument) {
        if (lua_args_len != 10) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!converter::Converter<bool>::accept(env, _sv8)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv9)) return false;                if (!DataTransfer::IsAssignable(env, _sv10, TIp10, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
 // LuaValToCSVal P any
    bool p8 = converter::Converter<bool>::toCpp(env, _sv8);        
        
 // LuaValToCSVal P any
    int32_t p9 = converter::Converter<int32_t>::toCpp(env, _sv9);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p10 = LuaValToCSRef(TIp10, env _sv10);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, int32_t p5, Il2CppObject* p6, int32_t p7, bool p8, int32_t p9, Il2CppObject* p10, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10,  method);
    

        return true;
}
// Void DrawMeshInstanced(UnityEngine.Mesh, Int32, UnityEngine.Material, UnityEngine.Matrix4x4[], Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, Int32, UnityEngine.Camera, UnityEngine.Rendering.LightProbeUsage)bool w_voi4ooi4oi4bi4oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4ooi4oi4bi4oi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp6 = wrapData->TypeInfos[4];
    auto TIp10 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    if (checkLuaArgument) {
        if (lua_args_len != 11) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!converter::Converter<bool>::accept(env, _sv8)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv9)) return false;                if (!DataTransfer::IsAssignable(env, _sv10, TIp10, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv11)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
 // LuaValToCSVal P any
    bool p8 = converter::Converter<bool>::toCpp(env, _sv8);        
        
 // LuaValToCSVal P any
    int32_t p9 = converter::Converter<int32_t>::toCpp(env, _sv9);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p10 = LuaValToCSRef(TIp10, env _sv10);
        
 // LuaValToCSVal P any
    int32_t p11 = converter::Converter<int32_t>::toCpp(env, _sv11);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, int32_t p5, Il2CppObject* p6, int32_t p7, bool p8, int32_t p9, Il2CppObject* p10, int32_t p11, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11,  method);
    

        return true;
}
// Void DrawMeshInstanced(UnityEngine.Mesh, Int32, UnityEngine.Material, UnityEngine.Matrix4x4[], Int32, UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, Int32, UnityEngine.Camera, UnityEngine.Rendering.LightProbeUsage, UnityEngine.LightProbeProxyVolume)bool w_voi4ooi4oi4bi4oi4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4ooi4oi4bi4oi4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp6 = wrapData->TypeInfos[4];
    auto TIp10 = wrapData->TypeInfos[5];
    auto TIp12 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    pesapi_value_sv12 = pesapi_get_arg(info, 12);
    if (checkLuaArgument) {
        if (lua_args_len != 12) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!converter::Converter<bool>::accept(env, _sv8)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv9)) return false;                if (!DataTransfer::IsAssignable(env, _sv10, TIp10, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv11)) return false;                if (!DataTransfer::IsAssignable(env, _sv12, TIp12, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
 // LuaValToCSVal P any
    bool p8 = converter::Converter<bool>::toCpp(env, _sv8);        
        
 // LuaValToCSVal P any
    int32_t p9 = converter::Converter<int32_t>::toCpp(env, _sv9);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p10 = LuaValToCSRef(TIp10, env _sv10);
        
 // LuaValToCSVal P any
    int32_t p11 = converter::Converter<int32_t>::toCpp(env, _sv11);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p12 = LuaValToCSRef(TIp12, env _sv12);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, int32_t p5, Il2CppObject* p6, int32_t p7, bool p8, int32_t p9, Il2CppObject* p10, int32_t p11, Il2CppObject* p12, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12,  method);
    

        return true;
}
// Void DrawMeshInstanced(UnityEngine.Mesh, Int32, UnityEngine.Material, System.Collections.Generic.List`1[UnityEngine.Matrix4x4], UnityEngine.MaterialPropertyBlock)bool w_voi4ooo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4ooo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void DrawMeshInstanced(UnityEngine.Mesh, Int32, UnityEngine.Material, System.Collections.Generic.List`1[UnityEngine.Matrix4x4], UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode)bool w_voi4oooi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4oooi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, int32_t p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void DrawMeshInstanced(UnityEngine.Mesh, Int32, UnityEngine.Material, System.Collections.Generic.List`1[UnityEngine.Matrix4x4], UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean)bool w_voi4oooi4b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4oooi4b");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!converter::Converter<bool>::accept(env, _sv7)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
 // LuaValToCSVal P any
    bool p7 = converter::Converter<bool>::toCpp(env, _sv7);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, int32_t p6, bool p7, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void DrawMeshInstanced(UnityEngine.Mesh, Int32, UnityEngine.Material, System.Collections.Generic.List`1[UnityEngine.Matrix4x4], UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, Int32)bool w_voi4oooi4bi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4oooi4bi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    if (checkLuaArgument) {
        if (lua_args_len != 8) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!converter::Converter<bool>::accept(env, _sv7)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv8)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
 // LuaValToCSVal P any
    bool p7 = converter::Converter<bool>::toCpp(env, _sv7);        
        
 // LuaValToCSVal P any
    int32_t p8 = converter::Converter<int32_t>::toCpp(env, _sv8);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, int32_t p6, bool p7, int32_t p8, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8,  method);
    

        return true;
}
// Void DrawMeshInstanced(UnityEngine.Mesh, Int32, UnityEngine.Material, System.Collections.Generic.List`1[UnityEngine.Matrix4x4], UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, Int32, UnityEngine.Camera)bool w_voi4oooi4bi4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4oooi4bi4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp9 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    if (checkLuaArgument) {
        if (lua_args_len != 9) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!converter::Converter<bool>::accept(env, _sv7)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv8)) return false;                if (!DataTransfer::IsAssignable(env, _sv9, TIp9, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
 // LuaValToCSVal P any
    bool p7 = converter::Converter<bool>::toCpp(env, _sv7);        
        
 // LuaValToCSVal P any
    int32_t p8 = converter::Converter<int32_t>::toCpp(env, _sv8);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p9 = LuaValToCSRef(TIp9, env _sv9);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, int32_t p6, bool p7, int32_t p8, Il2CppObject* p9, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9,  method);
    

        return true;
}
// Void DrawMeshInstanced(UnityEngine.Mesh, Int32, UnityEngine.Material, System.Collections.Generic.List`1[UnityEngine.Matrix4x4], UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, Int32, UnityEngine.Camera, UnityEngine.Rendering.LightProbeUsage)bool w_voi4oooi4bi4oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4oooi4bi4oi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp9 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    if (checkLuaArgument) {
        if (lua_args_len != 10) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!converter::Converter<bool>::accept(env, _sv7)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv8)) return false;                if (!DataTransfer::IsAssignable(env, _sv9, TIp9, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv10)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
 // LuaValToCSVal P any
    bool p7 = converter::Converter<bool>::toCpp(env, _sv7);        
        
 // LuaValToCSVal P any
    int32_t p8 = converter::Converter<int32_t>::toCpp(env, _sv8);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p9 = LuaValToCSRef(TIp9, env _sv9);
        
 // LuaValToCSVal P any
    int32_t p10 = converter::Converter<int32_t>::toCpp(env, _sv10);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, int32_t p6, bool p7, int32_t p8, Il2CppObject* p9, int32_t p10, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10,  method);
    

        return true;
}
// Void DrawMeshInstanced(UnityEngine.Mesh, Int32, UnityEngine.Material, System.Collections.Generic.List`1[UnityEngine.Matrix4x4], UnityEngine.MaterialPropertyBlock, UnityEngine.Rendering.ShadowCastingMode, Boolean, Int32, UnityEngine.Camera, UnityEngine.Rendering.LightProbeUsage, UnityEngine.LightProbeProxyVolume)bool w_voi4oooi4bi4oi4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4oooi4bi4oi4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp9 = wrapData->TypeInfos[5];
    auto TIp11 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    if (checkLuaArgument) {
        if (lua_args_len != 11) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!converter::Converter<bool>::accept(env, _sv7)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv8)) return false;                if (!DataTransfer::IsAssignable(env, _sv9, TIp9, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv10)) return false;                if (!DataTransfer::IsAssignable(env, _sv11, TIp11, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
 // LuaValToCSVal P any
    bool p7 = converter::Converter<bool>::toCpp(env, _sv7);        
        
 // LuaValToCSVal P any
    int32_t p8 = converter::Converter<int32_t>::toCpp(env, _sv8);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p9 = LuaValToCSRef(TIp9, env _sv9);
        
 // LuaValToCSVal P any
    int32_t p10 = converter::Converter<int32_t>::toCpp(env, _sv10);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p11 = LuaValToCSRef(TIp11, env _sv11);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, int32_t p6, bool p7, int32_t p8, Il2CppObject* p9, int32_t p10, Il2CppObject* p11, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11,  method);
    

        return true;
}
// Void RegisterFloatPersistentListener(UnityEngine.Events.UnityEventBase, Int32, UnityEngine.Events.UnityAction`1[System.Single], Single)bool w_voi4or4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4or4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<float>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    float p4 = converter::Converter<float>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, float p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void RegisterStringPersistentListener(UnityEngine.Events.UnityEventBase, Int32, UnityEngine.Events.UnityAction`1[System.String], System.String)bool w_voi4os(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4os");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal s
    Il2CppString* p4 = converter::Converter<Il2CppString*>::toCpp(env, _sv4);
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppObject* p3, Il2CppString* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void Copy(Byte[], Int32, IntPtr, Int32)bool w_voi4pi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4pi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    void* p3 = DataTransfer::GetPointer<void>(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, void* p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void SwapMethodBody(System.Type, Int32, IntPtr, Int32, Int32)bool w_voi4pi4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4pi4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    void* p3 = DataTransfer::GetPointer<void>(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, void* p3, int32_t p4, int32_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void SetSiblingIndex(UnityEngine.Transform, Int32, System.String)bool w_voi4s(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4s");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppString* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Compute(Mono.Security.Protocol.Ntlm.Type2Message, Mono.Security.Protocol.Ntlm.NtlmAuthLevel, System.String, System.String, System.String, Byte[] ByRef, Byte[] ByRef)bool w_voi4sssPoPo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4sssPoPo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp7 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv4)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv5)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
     // LuaValToCSVal s
    Il2CppString* p4 = converter::Converter<Il2CppString*>::toCpp(env, _sv4);
     // LuaValToCSVal s
    Il2CppString* p5 = converter::Converter<Il2CppString*>::toCpp(env, _sv5);
     // LuaValToCSVal Po/PO
    Il2CppObject* up6 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv6)); // object ret
    Il2CppObject** p6 = &up6;
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up7 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv7)); // object ret
    Il2CppObject** p7 = &up7;
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, Il2CppString* p3, Il2CppString* p4, Il2CppString* p5, void* p6, void* p7, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void SetByte(System.Array, Int32, Byte)bool w_voi4u1(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi4u1");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<uint8_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    uint8_t p3 = converter::Converter<uint8_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int32_t p2, uint8_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Copy(System.Array, Int64, System.Array, Int64, Int64)bool w_voi8oi8i8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voi8oi8i8");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int64_t p2 = converter::Converter<int64_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int64_t p4 = converter::Converter<int64_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int64_t p5 = converter::Converter<int64_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, int64_t p2, Il2CppObject* p3, int64_t p4, int64_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Sort(System.Array, System.Collections.IComparer)bool w_voo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void CanOpenForEdit(System.String[], System.Collections.Generic.List`1[System.String], UnityEditor.StatusQueryOptions)bool w_vooDi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooDi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void StartDrag(UnityEngine.Object[], System.String[], System.String)bool w_vooDs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooDs");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)bool w_vooO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void BuildTransformPaintContextUVToPaintContextUV(UnityEngine.TerrainTools.PaintContext, UnityEngine.TerrainTools.PaintContext, UnityEngine.Vector4 ByRef)bool w_vooPS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooPS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal Pstruct
    S_r4r4r4r4_* p3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_r4r4r4r4_ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void CreateCachedEditor(UnityEngine.Object, System.Type, UnityEditor.Editor ByRef)bool w_vooPo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooPo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up3 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv3)); // object ret
    Il2CppObject** p3 = &up3;
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void ShowTerrainLayerGUI(UnityEngine.Terrain, UnityEngine.TerrainLayer, UnityEditor.Editor ByRef, UnityEditor.ITerrainLayerCustomUI)bool w_vooPoo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooPoo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up3 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv3)); // object ret
    Il2CppObject** p3 = &up3;
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, void* p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void DoInspectorToolbar(SceneViewEditMode[], UnityEngine.GUIContent[], UnityEngine.Bounds, UnityEditor.Editor)bool w_vooS_S_r4r4r4_S_r4r4r4__o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooS_S_r4r4r4_S_r4r4r4__o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal struct
    S_S_r4r4r4_S_r4r4r4__* pp3 = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4__>(env, _sv3);
    S_S_r4r4r4_S_r4r4r4__ p3 = pp3 ? *pp3 : S_S_r4r4r4_S_r4r4r4__ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, struct S_S_r4r4r4_S_r4r4r4__ p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void WarmupShaderFromCollection(UnityEngine.ShaderVariantCollection, UnityEngine.Shader, UnityEngine.Experimental.Rendering.ShaderWarmupSetup)bool w_vooS_o_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooS_o_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal struct
    S_o_* pp3 = DataTransfer::GetPointer<S_o_>(env, _sv3);
    S_o_ p3 = pp3 ? *pp3 : S_o_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, struct S_o_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void AddKeyframes(UnityEditorInternal.AnimationWindowState, System.Collections.Generic.IList`1[UnityEditorInternal.AnimationWindowCurve], UnityEditorInternal.AnimationKeyTime)bool w_vooS_r4i4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooS_r4i4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal struct
    S_r4i4r4_* pp3 = DataTransfer::GetPointer<S_r4i4r4_>(env, _sv3);
    S_r4i4r4_ p3 = pp3 ? *pp3 : S_r4i4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, struct S_r4i4r4_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Blit(UnityEngine.Texture, UnityEngine.RenderTexture, UnityEngine.Vector2, UnityEngine.Vector2)bool w_vooS_r4r4_S_r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooS_r4r4_S_r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal struct
    S_r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4_>(env, _sv3);
    S_r4r4_ p3 = pp3 ? *pp3 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4_>(env, _sv4);
    S_r4r4_ p4 = pp4 ? *pp4 : S_r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, struct S_r4r4_ p3, struct S_r4r4_ p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void Blit(UnityEngine.Texture, UnityEngine.RenderTexture, UnityEngine.Vector2, UnityEngine.Vector2, Int32, Int32)bool w_vooS_r4r4_S_r4r4_i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooS_r4r4_S_r4r4_i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal struct
    S_r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4_>(env, _sv3);
    S_r4r4_ p3 = pp3 ? *pp3 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4_>(env, _sv4);
    S_r4r4_ p4 = pp4 ? *pp4 : S_r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, struct S_r4r4_ p3, struct S_r4r4_ p4, int32_t p5, int32_t p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void ShowColumnSelector(System.Action`2[System.Collections.Generic.IEnumerable`1[UnityEditor.Search.SearchColumn],System.Int32], System.Collections.Generic.IEnumerable`1[UnityEditor.Search.SearchColumn], UnityEngine.Vector2, Int32)bool w_vooS_r4r4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooS_r4r4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal struct
    S_r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4_>(env, _sv3);
    S_r4r4_ p3 = pp3 ? *pp3 : S_r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, struct S_r4r4_ p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void DrawOverlay(UnityEditor.VersionControl.Asset, UnityEditor.VersionControl.Asset, UnityEngine.Rect)bool w_vooS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, struct S_r4r4r4r4_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void DrawOutline(Int32[], Int32[], UnityEngine.Color, UnityEngine.Color, Single)bool w_vooS_r4r4r4r4_S_r4r4r4r4_Dr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooS_r4r4r4r4_S_r4r4r4r4_Dr4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv4);
    S_r4r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, struct S_r4r4r4r4_ p3, struct S_r4r4r4r4_ p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void ProcessCameraCommand(UnityEngine.Camera, UnityEngine.Rendering.CommandBuffer, UnityEngine.VFX.VFXCameraXRSettings)bool w_vooS_u4u4u4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooS_u4u4u4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal struct
    S_u4u4u4_* pp3 = DataTransfer::GetPointer<S_u4u4u4_>(env, _sv3);
    S_u4u4u4_ p3 = pp3 ? *pp3 : S_u4u4u4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, struct S_u4u4u4_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void ProcessCameraCommand(UnityEngine.Camera, UnityEngine.Rendering.CommandBuffer, UnityEngine.VFX.VFXCameraXRSettings, UnityEngine.Rendering.CullingResults)bool w_vooS_u4u4u4_S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooS_u4u4u4_S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal struct
    S_u4u4u4_* pp3 = DataTransfer::GetPointer<S_u4u4u4_>(env, _sv3);
    S_u4u4u4_ p3 = pp3 ? *pp3 : S_u4u4u4_ {};
        
     // LuaValToCSVal struct
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__* pp4 = DataTransfer::GetPointer<S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__>(env, _sv4);
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p4 = pp4 ? *pp4 : S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, struct S_u4u4u4_ p3, struct S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void CalculateBuildUsageTags(UnityEditor.Build.Content.ObjectIdentifier[], UnityEditor.Build.Content.ObjectIdentifier[], UnityEditor.Build.Content.BuildUsageTagGlobal, UnityEditor.Build.Content.BuildUsageTagSet)bool w_vooS_u4u4u4u4u4bbbbbbb_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooS_u4u4u4u4u4bbbbbbb_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal struct
    S_u4u4u4u4u4bbbbbbb_* pp3 = DataTransfer::GetPointer<S_u4u4u4u4u4bbbbbbb_>(env, _sv3);
    S_u4u4u4u4u4bbbbbbb_ p3 = pp3 ? *pp3 : S_u4u4u4u4u4bbbbbbb_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, struct S_u4u4u4u4u4bbbbbbb_ p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void CalculateBuildUsageTags(UnityEditor.Build.Content.ObjectIdentifier[], UnityEditor.Build.Content.ObjectIdentifier[], UnityEditor.Build.Content.BuildUsageTagGlobal, UnityEditor.Build.Content.BuildUsageTagSet, UnityEditor.Build.Content.BuildUsageCache)bool w_vooS_u4u4u4u4u4bbbbbbb_oo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooS_u4u4u4u4u4bbbbbbb_oo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal struct
    S_u4u4u4u4u4bbbbbbb_* pp3 = DataTransfer::GetPointer<S_u4u4u4u4u4bbbbbbb_>(env, _sv3);
    S_u4u4u4u4u4bbbbbbb_ p3 = pp3 ? *pp3 : S_u4u4u4u4u4bbbbbbb_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, struct S_u4u4u4u4u4bbbbbbb_ p3, Il2CppObject* p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Label(UnityEngine.Texture, UnityEngine.GUIStyle, UnityEngine.GUILayoutOption[])bool w_vooVo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooVo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void IgnoreCollision(UnityEngine.Collider, UnityEngine.Collider, Boolean)bool w_voob(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voob");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void PasteToStateMachineTransitionParametersFromPasteboard(UnityEngine.Object, UnityEditor.Animations.AnimatorController, Boolean, Boolean)bool w_voobb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voobb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, bool p3, bool p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void ShowSelector(UnityEngine.Object, UnityEditor.Presets.Preset, Boolean, UnityEditor.Presets.PresetSelectorReceiver)bool w_voobo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voobo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, bool p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetTransformParent(UnityEngine.Transform, UnityEngine.Transform, Boolean, System.String)bool w_voobs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voobs");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
     // LuaValToCSVal s
    Il2CppString* p4 = converter::Converter<Il2CppString*>::toCpp(env, _sv4);
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, bool p3, Il2CppString* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void Copy(System.Array, System.Array, Int32)bool w_vooi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void PasteToStateMachineFromPasteboard(UnityEditor.Animations.AnimatorStateMachine, UnityEditor.Animations.AnimatorController, Int32, UnityEngine.Vector3)bool w_vooi4S_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooi4S_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv4);
    S_r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, int32_t p3, struct S_r4r4r4_ p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void Sort(System.Array, System.Array, Int32, Int32)bool w_vooi4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooi4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, int32_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void Sort(System.Array, System.Array, Int32, Int32, System.Collections.IComparer)bool w_vooi4i4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooi4i4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp5 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, int32_t p3, int32_t p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Copy(System.Array, System.Array, Int64)bool w_vooi8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooi8");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int64_t p3 = converter::Converter<int64_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, int64_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Sort(System.Array, System.Array, System.Collections.IComparer)bool w_vooo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Request(UnityEditor.Search.SearchContext, System.Action`2[UnityEditor.Search.SearchContext,System.Collections.Generic.IEnumerable`1[UnityEditor.Search.SearchItem]], System.Action`1[UnityEditor.Search.SearchContext], UnityEditor.Search.SearchFlags)bool w_voooDi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voooDi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void CreateCachedEditorWithContext(UnityEngine.Object, UnityEngine.Object, System.Type, UnityEditor.Editor ByRef)bool w_voooPo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voooPo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up4 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv4)); // object ret
    Il2CppObject** p4 = &up4;
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void PopulateMeshDefault(UnityEngine.CanvasRenderer, UnityEngine.RectTransform, UnityEngine.Canvas, UnityEngine.Color)bool w_voooS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voooS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv4);
    S_r4r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, struct S_r4r4r4r4_ p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void PopulateMeshImageRaw(UnityEngine.CanvasRenderer, UnityEngine.RectTransform, UnityEngine.Canvas, UnityEngine.Color, UnityEngine.Texture, UnityEngine.Rect)bool w_voooS_r4r4r4r4_oS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voooS_r4r4r4r4_oS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv4);
    S_r4r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp6 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv6);
    S_r4r4r4r4_ p6 = pp6 ? *pp6 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, struct S_r4r4r4r4_ p4, Il2CppObject* p5, struct S_r4r4r4r4_ p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void BlitMultiTap(UnityEngine.Texture, UnityEngine.RenderTexture, UnityEngine.Material, UnityEngine.Vector2[])bool w_voooVS_r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voooVS_r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void LabelField(UnityEngine.GUIContent, UnityEngine.GUIContent, UnityEngine.GUIStyle, UnityEngine.GUILayoutOption[])bool w_voooVo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voooVo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void PopulateMeshImageGenerateTiledSprite(UnityEngine.CanvasRenderer, UnityEngine.RectTransform, UnityEngine.Canvas, Boolean, Boolean, Single, UnityEngine.Sprite, UnityEngine.Color)bool w_vooobbr4oS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooobbr4oS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp7 = wrapData->TypeInfos[4];
    auto TIp8 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    if (checkLuaArgument) {
        if (lua_args_len != 8) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;                if (!converter::Converter<float>::accept(env, _sv6)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    float p6 = converter::Converter<float>::toCpp(env, _sv6);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp8 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv8);
    S_r4r4r4r4_ p8 = pp8 ? *pp8 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, bool p4, bool p5, float p6, Il2CppObject* p7, struct S_r4r4r4r4_ p8, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8,  method);
    

        return true;
}
// Void PopulateMeshImageGenerateFilledSprite(UnityEngine.CanvasRenderer, UnityEngine.RectTransform, UnityEngine.Canvas, Boolean, Int32, Single, Boolean, Int32, UnityEngine.Sprite, UnityEngine.Color)bool w_vooobi4r4bi4oS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooobi4r4bi4oS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp9 = wrapData->TypeInfos[4];
    auto TIp10 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    if (checkLuaArgument) {
        if (lua_args_len != 10) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!converter::Converter<float>::accept(env, _sv6)) return false;                if (!converter::Converter<bool>::accept(env, _sv7)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv8)) return false;                if (!DataTransfer::IsAssignable(env, _sv9, TIp9, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv10, TIp10, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    float p6 = converter::Converter<float>::toCpp(env, _sv6);        
        
 // LuaValToCSVal P any
    bool p7 = converter::Converter<bool>::toCpp(env, _sv7);        
        
 // LuaValToCSVal P any
    int32_t p8 = converter::Converter<int32_t>::toCpp(env, _sv8);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p9 = LuaValToCSRef(TIp9, env _sv9);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp10 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv10);
    S_r4r4r4r4_ p10 = pp10 ? *pp10 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, bool p4, int32_t p5, float p6, bool p7, int32_t p8, Il2CppObject* p9, struct S_r4r4r4r4_ p10, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10,  method);
    

        return true;
}
// Void PopulateMeshImageGenerateSimpleSprite(UnityEngine.CanvasRenderer, UnityEngine.RectTransform, UnityEngine.Canvas, Boolean, UnityEngine.Sprite, UnityEngine.Color)bool w_voooboS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voooboS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp6 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv6);
    S_r4r4r4r4_ p6 = pp6 ? *pp6 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, bool p4, Il2CppObject* p5, struct S_r4r4r4r4_ p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void PopulateMeshImageCustomMesh(UnityEngine.CanvasRenderer, UnityEngine.RectTransform, UnityEngine.Canvas, Boolean, UnityEngine.Sprite, UnityEngine.Vector4, UnityEngine.Vector4, Single, UnityEngine.Color)bool w_voooboS_r4r4r4r4_S_r4r4r4r4_r4S_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voooboS_r4r4r4r4_S_r4r4r4r4_r4S_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp7 = wrapData->TypeInfos[6];
    auto TIp9 = wrapData->TypeInfos[7];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    if (checkLuaArgument) {
        if (lua_args_len != 9) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, true)) return false;                if (!converter::Converter<float>::accept(env, _sv8)) return false;                if (!DataTransfer::IsAssignable(env, _sv9, TIp9, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp6 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv6);
    S_r4r4r4r4_ p6 = pp6 ? *pp6 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp7 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv7);
    S_r4r4r4r4_ p7 = pp7 ? *pp7 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p8 = converter::Converter<float>::toCpp(env, _sv8);        
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp9 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv9);
    S_r4r4r4r4_ p9 = pp9 ? *pp9 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, bool p4, Il2CppObject* p5, struct S_r4r4r4r4_ p6, struct S_r4r4r4r4_ p7, float p8, struct S_r4r4r4r4_ p9, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9,  method);
    

        return true;
}
// Void PopulateMeshImageGenerateSlicedSprite(UnityEngine.CanvasRenderer, UnityEngine.RectTransform, UnityEngine.Canvas, Boolean, Single, UnityEngine.Sprite, UnityEngine.Color)bool w_vooobr4oS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooobr4oS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp6 = wrapData->TypeInfos[4];
    auto TIp7 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;                if (!converter::Converter<float>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    float p5 = converter::Converter<float>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp7 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv7);
    S_r4r4r4r4_ p7 = pp7 ? *pp7 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, bool p4, float p5, Il2CppObject* p6, struct S_r4r4r4r4_ p7, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void Blit(UnityEngine.Texture, UnityEngine.RenderTexture, UnityEngine.Material, Int32)bool w_voooi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voooi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void BlitMultiTap(UnityEngine.Texture, UnityEngine.RenderTexture, UnityEngine.Material, Int32, UnityEngine.Vector2[])bool w_voooi4VS_r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voooi4VS_r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, int32_t p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Blit(UnityEngine.Texture, UnityEngine.RenderTexture, UnityEngine.Material, Int32, Int32)bool w_voooi4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voooi4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, int32_t p4, int32_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void PopulateMeshImageGenerateFillSlicedSprite(UnityEngine.CanvasRenderer, UnityEngine.RectTransform, UnityEngine.Canvas, Int32, Single, Boolean, Single, UnityEngine.Sprite, UnityEngine.Color)bool w_voooi4r4br4oS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voooi4r4br4oS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp8 = wrapData->TypeInfos[4];
    auto TIp9 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    if (checkLuaArgument) {
        if (lua_args_len != 9) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<float>::accept(env, _sv5)) return false;                if (!converter::Converter<bool>::accept(env, _sv6)) return false;                if (!converter::Converter<float>::accept(env, _sv7)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv9, TIp9, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    float p5 = converter::Converter<float>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    bool p6 = converter::Converter<bool>::toCpp(env, _sv6);        
        
 // LuaValToCSVal P any
    float p7 = converter::Converter<float>::toCpp(env, _sv7);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p8 = LuaValToCSRef(TIp8, env _sv8);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp9 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv9);
    S_r4r4r4r4_ p9 = pp9 ? *pp9 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, int32_t p4, float p5, bool p6, float p7, Il2CppObject* p8, struct S_r4r4r4r4_ p9, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9,  method);
    

        return true;
}
// Void DoInspectorToolbar(SceneViewEditMode[], UnityEngine.GUIContent[], System.Func`1[UnityEngine.Bounds], UnityEditor.Editor)bool w_voooo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voooo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void IntPopup(UnityEditor.SerializedProperty, UnityEngine.GUIContent[], Int32[], UnityEngine.GUIContent, UnityEngine.GUILayoutOption[])bool w_vooooVo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooooVo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void IntPopup(UnityEditor.SerializedProperty, UnityEngine.GUIContent[], Int32[], UnityEngine.GUIContent, UnityEngine.GUIStyle, UnityEngine.GUILayoutOption[])bool w_voooooVo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voooooVo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void AddUIVertexStream(System.Collections.Generic.List`1[UnityEngine.UIVertex], System.Collections.Generic.List`1[UnityEngine.Vector3], System.Collections.Generic.List`1[UnityEngine.Color32], System.Collections.Generic.List`1[UnityEngine.Vector2], System.Collections.Generic.List`1[UnityEngine.Vector2], System.Collections.Generic.List`1[UnityEngine.Vector3], System.Collections.Generic.List`1[UnityEngine.Vector4])bool w_vooooooo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooooooo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];
    auto TIp7 = wrapData->TypeInfos[7];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, Il2CppObject* p7, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void SplitUIVertexStreams(System.Collections.Generic.List`1[UnityEngine.UIVertex], System.Collections.Generic.List`1[UnityEngine.Vector3], System.Collections.Generic.List`1[UnityEngine.Color32], System.Collections.Generic.List`1[UnityEngine.Vector2], System.Collections.Generic.List`1[UnityEngine.Vector2], System.Collections.Generic.List`1[UnityEngine.Vector3], System.Collections.Generic.List`1[UnityEngine.Vector4], System.Collections.Generic.List`1[System.Int32])bool w_voooooooo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voooooooo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];
    auto TIp7 = wrapData->TypeInfos[7];
    auto TIp8 = wrapData->TypeInfos[8];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    if (checkLuaArgument) {
        if (lua_args_len != 8) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
     // LuaValToCSVal o/O
    Il2CppObject* p8 = LuaValToCSRef(TIp8, env _sv8);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, Il2CppObject* p7, Il2CppObject* p8, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8,  method);
    

        return true;
}
// Void AddUIVertexStream(System.Collections.Generic.List`1[UnityEngine.UIVertex], System.Collections.Generic.List`1[UnityEngine.Vector3], System.Collections.Generic.List`1[UnityEngine.Color32], System.Collections.Generic.List`1[UnityEngine.Vector2], System.Collections.Generic.List`1[UnityEngine.Vector2], System.Collections.Generic.List`1[UnityEngine.Vector2], System.Collections.Generic.List`1[UnityEngine.Vector2], System.Collections.Generic.List`1[UnityEngine.Vector3], System.Collections.Generic.List`1[UnityEngine.Vector4])bool w_vooooooooo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooooooooo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];
    auto TIp7 = wrapData->TypeInfos[7];
    auto TIp8 = wrapData->TypeInfos[8];
    auto TIp9 = wrapData->TypeInfos[9];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    if (checkLuaArgument) {
        if (lua_args_len != 9) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv9, TIp9, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
     // LuaValToCSVal o/O
    Il2CppObject* p8 = LuaValToCSRef(TIp8, env _sv8);
        
     // LuaValToCSVal o/O
    Il2CppObject* p9 = LuaValToCSRef(TIp9, env _sv9);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, Il2CppObject* p7, Il2CppObject* p8, Il2CppObject* p9, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9,  method);
    

        return true;
}
// Void SplitUIVertexStreams(System.Collections.Generic.List`1[UnityEngine.UIVertex], System.Collections.Generic.List`1[UnityEngine.Vector3], System.Collections.Generic.List`1[UnityEngine.Color32], System.Collections.Generic.List`1[UnityEngine.Vector2], System.Collections.Generic.List`1[UnityEngine.Vector2], System.Collections.Generic.List`1[UnityEngine.Vector2], System.Collections.Generic.List`1[UnityEngine.Vector2], System.Collections.Generic.List`1[UnityEngine.Vector3], System.Collections.Generic.List`1[UnityEngine.Vector4], System.Collections.Generic.List`1[System.Int32])bool w_voooooooooo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voooooooooo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];
    auto TIp7 = wrapData->TypeInfos[7];
    auto TIp8 = wrapData->TypeInfos[8];
    auto TIp9 = wrapData->TypeInfos[9];
    auto TIp10 = wrapData->TypeInfos[10];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    if (checkLuaArgument) {
        if (lua_args_len != 10) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv9, TIp9, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv10, TIp10, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
     // LuaValToCSVal o/O
    Il2CppObject* p8 = LuaValToCSRef(TIp8, env _sv8);
        
     // LuaValToCSVal o/O
    Il2CppObject* p9 = LuaValToCSRef(TIp9, env _sv9);
        
     // LuaValToCSVal o/O
    Il2CppObject* p10 = LuaValToCSRef(TIp10, env _sv10);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, Il2CppObject* p7, Il2CppObject* p8, Il2CppObject* p9, Il2CppObject* p10, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10,  method);
    

        return true;
}
// Void PopulateMeshText(UnityEngine.CanvasRenderer, UnityEngine.Canvas, UnityEngine.RectTransform, Single, UnityEngine.TextGenerator, UnityEngine.Vector2, Byte, UnityEngine.Color, UnityEngine.Color, UnityEngine.Vector2, UnityEngine.Vector2, Boolean, Boolean)bool w_vooor4oS_r4r4_u1S_r4r4r4r4_S_r4r4r4r4_S_r4r4_S_r4r4_bb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooor4oS_r4r4_u1S_r4r4r4r4_S_r4r4r4r4_S_r4r4_S_r4r4_bb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp8 = wrapData->TypeInfos[6];
    auto TIp9 = wrapData->TypeInfos[7];
    auto TIp10 = wrapData->TypeInfos[8];
    auto TIp11 = wrapData->TypeInfos[9];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    pesapi_value_sv12 = pesapi_get_arg(info, 12);
    pesapi_value_sv13 = pesapi_get_arg(info, 13);
    if (checkLuaArgument) {
        if (lua_args_len != 13) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<float>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, true)) return false;                if (!converter::Converter<uint8_t>::accept(env, _sv7)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv9, TIp9, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv10, TIp10, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv11, TIp11, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv12)) return false;                if (!converter::Converter<bool>::accept(env, _sv13)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    float p4 = converter::Converter<float>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
     // LuaValToCSVal struct
    S_r4r4_* pp6 = DataTransfer::GetPointer<S_r4r4_>(env, _sv6);
    S_r4r4_ p6 = pp6 ? *pp6 : S_r4r4_ {};
        
 // LuaValToCSVal P any
    uint8_t p7 = converter::Converter<uint8_t>::toCpp(env, _sv7);        
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp8 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv8);
    S_r4r4r4r4_ p8 = pp8 ? *pp8 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp9 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv9);
    S_r4r4r4r4_ p9 = pp9 ? *pp9 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp10 = DataTransfer::GetPointer<S_r4r4_>(env, _sv10);
    S_r4r4_ p10 = pp10 ? *pp10 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp11 = DataTransfer::GetPointer<S_r4r4_>(env, _sv11);
    S_r4r4_ p11 = pp11 ? *pp11 : S_r4r4_ {};
        
 // LuaValToCSVal P any
    bool p12 = converter::Converter<bool>::toCpp(env, _sv12);        
        
 // LuaValToCSVal P any
    bool p13 = converter::Converter<bool>::toCpp(env, _sv13);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, float p4, Il2CppObject* p5, struct S_r4r4_ p6, uint8_t p7, struct S_r4r4r4r4_ p8, struct S_r4r4r4r4_ p9, struct S_r4r4_ p10, struct S_r4r4_ p11, bool p12, bool p13, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13,  method);
    

        return true;
}
// Void CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[], System.Reflection.AssemblyName, System.Reflection.Emit.CustomAttributeBuilder[], System.String)bool w_vooos(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooos");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal s
    Il2CppString* p4 = converter::Converter<Il2CppString*>::toCpp(env, _sv4);
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppString* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void AreEqual(System.Collections.IEnumerable, System.Collections.IEnumerable, System.Collections.IComparer, System.String, System.Object[])bool w_vooosVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vooosVO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv4)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal s
    Il2CppString* p4 = converter::Converter<Il2CppString*>::toCpp(env, _sv4);
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppString* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void SampleAnimationClip(UnityEngine.GameObject, UnityEngine.AnimationClip, Single)bool w_voor4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voor4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, float p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void AreEqual(UnityEngine.Object, UnityEngine.Object, System.String)bool w_voos(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voos");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppString* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void That(NUnit.Framework.TestDelegate, NUnit.Framework.Constraints.IResolveConstraint, System.String, System.Object[])bool w_voosVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voosVO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppString* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void UpdateShaderAsset(UnityEditor.AssetImporters.AssetImportContext, UnityEngine.Shader, System.String, Boolean)bool w_voosb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voosb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppObject* p2, Il2CppString* p3, bool p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void DisplayCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2, IntPtr)bool w_vop(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vop");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void EndClassRegister(System.Type, IntPtr, XLua.ObjectTranslator)bool w_vopo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vopo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void BeginClassRegister(System.Type, IntPtr, XLua.LuaDLL.lua_CSFunction, Int32, Int32, Int32)bool w_vopoi4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vopoi4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, Il2CppObject* p3, int32_t p4, int32_t p5, int32_t p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void BeginObjectRegister(System.Type, IntPtr, XLua.ObjectTranslator, Int32, Int32, Int32, Int32, Int32)bool w_vopoi4i4i4i4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vopoi4i4i4i4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp8 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    if (checkLuaArgument) {
        if (lua_args_len != 8) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
 // LuaValToCSVal P any
    void* p8 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, Il2CppObject* p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, void* p8, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8,  method);
    

        return true;
}
// Void EndObjectRegister(System.Type, IntPtr, XLua.ObjectTranslator, XLua.LuaDLL.lua_CSFunction, XLua.LuaDLL.lua_CSFunction, System.Type, XLua.LuaDLL.lua_CSFunction, XLua.LuaDLL.lua_CSFunction)bool w_vopoooooo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vopoooooo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];
    auto TIp7 = wrapData->TypeInfos[7];
    auto TIp8 = wrapData->TypeInfos[8];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    if (checkLuaArgument) {
        if (lua_args_len != 8) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
     // LuaValToCSVal o/O
    Il2CppObject* p8 = LuaValToCSRef(TIp8, env _sv8);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, void* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, Il2CppObject* p7, Il2CppObject* p8, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8,  method);
    

        return true;
}
// Void Destroy(UnityEngine.Object, Single)bool w_vor4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vor4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, float p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void DrawAAPolyLine(UnityEngine.Texture2D, Single, UnityEngine.Vector3[])bool w_vor4VS_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vor4VS_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, float p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Simplify(System.Collections.Generic.List`1[UnityEngine.Vector3], Single, System.Collections.Generic.List`1[System.Int32])bool w_vor4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vor4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, float p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Slider(UnityEditor.SerializedProperty, Single, Single, UnityEngine.GUILayoutOption[])bool w_vor4r4Vo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vor4r4Vo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, float p2, float p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void Slider(UnityEditor.SerializedProperty, Single, Single, UnityEngine.GUIContent, UnityEngine.GUILayoutOption[])bool w_vor4r4oVo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vor4r4oVo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];
    auto TIp5 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, float p2, float p3, Il2CppObject* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Slider(UnityEditor.SerializedProperty, Single, Single, System.String, UnityEngine.GUILayoutOption[])bool w_vor4r4sVo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vor4r4sVo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];
    auto TIp5 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv4)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
     // LuaValToCSVal s
    Il2CppString* p4 = converter::Converter<Il2CppString*>::toCpp(env, _sv4);
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, float p2, float p3, Il2CppString* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Enqueue(System.Action, Double)bool w_vor8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vor8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<double>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    double p2 = converter::Converter<double>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, double p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void RegisterActivatedClientType(System.Type, System.String)bool w_vos(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vos");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppString* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void LogFormat(UnityEngine.Object, System.String, System.Object[])bool w_vosVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vosVO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppString* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SaveToSerializedFileAndForget(UnityEngine.Object[], System.String, Boolean)bool w_vosb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vosb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppString* p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void RegisterWellKnownServiceType(System.Type, System.String, System.Runtime.Remoting.WellKnownObjectMode)bool w_vosi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vosi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppString* p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SaveCompiledShader(UnityEngine.Shader, System.String, Int32, Int32, Boolean, Boolean)bool w_vosi4i4DbDb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vosi4i4DbDb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp5 = wrapData->TypeInfos[3];
    auto TIp6 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppString* p2, int32_t p3, int32_t p4, void* p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void Serialize(System.IO.Stream, System.String, System.ComponentModel.Design.DesigntimeLicenseContext)bool w_voso(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_voso");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppString* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetEditorCurve(UnityEngine.AnimationClip, System.String, System.Type, System.String, UnityEngine.AnimationCurve)bool w_vososo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vososo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal s
    Il2CppString* p4 = converter::Converter<Il2CppString*>::toCpp(env, _sv4);
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppString* p2, Il2CppObject* p3, Il2CppString* p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void GetInteropFieldTypeAndNameFromXmlAttribute(System.Type, System.String, System.String, System.Type ByRef, System.String ByRef)bool w_vossPoPs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vossPoPs");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
     // LuaValToCSVal Po/PO
    Il2CppObject* up4 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv4)); // object ret
    Il2CppObject** p4 = &up4;
        
     // LuaValToCSVal Ps
    Il2CppString* up5 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv5); // string ref
    Il2CppString** p5 = &up5;
        
    typedef void (*FuncToCall)(Il2CppObject* p1, Il2CppString* p2, Il2CppString* p3, void* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void FreeBSTR(IntPtr)bool w_vp(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vp");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
    typedef void (*FuncToCall)(void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1,  method);
    

        return true;
}
// Void PtrToStructure(IntPtr, System.Object)bool w_vpO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void* p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Unbox(IntPtr, Boolean ByRef)bool w_vpPb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpPb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Unbox(IntPtr, Char ByRef)bool w_vpPc(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpPc");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Unbox(IntPtr, SByte ByRef)bool w_vpPi1(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpPi1");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Unbox(IntPtr, Int16 ByRef)bool w_vpPi2(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpPi2");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Unbox(IntPtr, Int32 ByRef)bool w_vpPi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpPi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Unbox(IntPtr, Int64 ByRef)bool w_vpPi8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpPi8");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Unbox(IntPtr, Single ByRef)bool w_vpPr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpPr4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Unbox(IntPtr, Double ByRef)bool w_vpPr8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpPr8");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void PatchBufferMinMaxRanges(IntPtr, Void*, Int32, Int32)bool w_vpPvi4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpPvi4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!!true) return false;                if (!pesapi_is_binary(env, _sv2) && !pesapi_is_null(env, _sv2) && !pesapi_is_undefined(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void* p1, void* p2, int32_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void lua_pushboolean(IntPtr, Boolean)bool w_vpb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpb");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void* p1, bool p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void WriteInt16(IntPtr, Char)bool w_vpc(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpc");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<Il2CppChar>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    Il2CppChar p2 = converter::Converter<Il2CppChar>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void* p1, Il2CppChar p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void WriteInt16(IntPtr, Int16)bool w_vpi2(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi2");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<int16_t>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int16_t p2 = converter::Converter<int16_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void* p1, int16_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void WriteInt32(IntPtr, Int32)bool w_vpi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void* p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void SetMarkerMetadata(IntPtr, Int32, Char*, Int32, Byte, Byte)bool w_vpi4Pci4u1u1(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi4Pci4u1u1");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<uint8_t>::accept(env, _sv5)) return false;                if (!converter::Converter<uint8_t>::accept(env, _sv6)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    uint8_t p5 = converter::Converter<uint8_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    uint8_t p6 = converter::Converter<uint8_t>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(void* p1, int32_t p2, void* p3, int32_t p4, uint8_t p5, uint8_t p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void BeginSampleWithMetadata(IntPtr, Int32, Void*)bool w_vpi4Pv(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi4Pv");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!pesapi_is_binary(env, _sv3) && !pesapi_is_null(env, _sv3) && !pesapi_is_undefined(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    void* p3 = DataTransfer::GetPointer<void>(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, int32_t p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetBooleanArrayElement(IntPtr, Int32, Boolean)bool w_vpi4b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi4b");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, int32_t p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void WriteInt16(IntPtr, Int32, Char)bool w_vpi4c(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi4c");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppChar>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    Il2CppChar p3 = converter::Converter<Il2CppChar>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, int32_t p2, Il2CppChar p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetByteArrayElement(IntPtr, Int32, SByte)bool w_vpi4i1(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi4i1");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int8_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int8_t p3 = converter::Converter<int8_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, int32_t p2, int8_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void WriteInt16(IntPtr, Int32, Int16)bool w_vpi4i2(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi4i2");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int16_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int16_t p3 = converter::Converter<int16_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, int32_t p2, int16_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void WriteInt32(IntPtr, Int32, Int32)bool w_vpi4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, int32_t p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void xlua_pushcsobj(IntPtr, Int32, Int32, Boolean, Int32)bool w_vpi4i4bi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi4i4bi4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void* p1, int32_t p2, int32_t p3, bool p4, int32_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void WriteInt64(IntPtr, Int32, Int64)bool w_vpi4i8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi4i8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int64_t p3 = converter::Converter<int64_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, int32_t p2, int64_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void WriteIntPtr(IntPtr, Int32, IntPtr)bool w_vpi4p(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi4p");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    void* p3 = DataTransfer::GetPointer<void>(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, int32_t p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetFloatArrayElement(IntPtr, Int32, Single)bool w_vpi4r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi4r4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, int32_t p2, float p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetDoubleArrayElement(IntPtr, Int32, Double)bool w_vpi4r8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi4r8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<double>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    double p3 = converter::Converter<double>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, int32_t p2, double p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void RegisterFunc(IntPtr, Int32, System.String, XLua.LuaDLL.lua_CSFunction)bool w_vpi4so(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi4so");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(void* p1, int32_t p2, Il2CppString* p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void RegisterLazyFunc(IntPtr, Int32, System.String, System.Type, XLua.LazyMemberTypes, Boolean)bool w_vpi4soi4b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi4soi4b");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!converter::Converter<bool>::accept(env, _sv6)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    bool p6 = converter::Converter<bool>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(void* p1, int32_t p2, Il2CppString* p3, Il2CppObject* p4, int32_t p5, bool p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void SetMarkerMetadata(IntPtr, Int32, System.String, Byte, Byte)bool w_vpi4su1u1(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi4su1u1");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!converter::Converter<uint8_t>::accept(env, _sv4)) return false;                if (!converter::Converter<uint8_t>::accept(env, _sv5)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
 // LuaValToCSVal P any
    uint8_t p4 = converter::Converter<uint8_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    uint8_t p5 = converter::Converter<uint8_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void* p1, int32_t p2, Il2CppString* p3, uint8_t p4, uint8_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void WriteByte(IntPtr, Int32, Byte)bool w_vpi4u1(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi4u1");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<uint8_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    uint8_t p3 = converter::Converter<uint8_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, int32_t p2, uint8_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void WriteInt64(IntPtr, Int64)bool w_vpi8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpi8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<int64_t>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int64_t p2 = converter::Converter<int64_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void* p1, int64_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void DestroyStructure(IntPtr, System.Type)bool w_vpo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void* p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void lua_pushstdcallcfunction(IntPtr, XLua.LuaDLL.lua_CSFunction, Int32)bool w_vpoDi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpoDi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void* p1, Il2CppObject* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void ReflectionWrap(IntPtr, System.Type, Boolean)bool w_vpob(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpob");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, Il2CppObject* p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetCSTable(IntPtr, System.Type, Int32)bool w_vpoi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpoi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, Il2CppObject* p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Copy(IntPtr, Byte[], Int32, Int32)bool w_vpoi4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpoi4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void* p1, Il2CppObject* p2, int32_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void makeReflectionWrap(IntPtr, System.Type, Int32, Int32, Int32, Int32, Int32, Int32, Int32, XLua.LuaDLL.lua_CSFunction ByRef, XLua.LuaDLL.lua_CSFunction ByRef, System.Reflection.BindingFlags)bool w_vpoi4i4i4i4i4i4i4PoPoi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpoi4i4i4i4i4i4i4PoPoi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp10 = wrapData->TypeInfos[3];
    auto TIp11 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    pesapi_value_sv12 = pesapi_get_arg(info, 12);
    if (checkLuaArgument) {
        if (lua_args_len != 12) return false;
                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv8)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv9)) return false;                if (!!true) return false;                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv12)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
 // LuaValToCSVal P any
    int32_t p8 = converter::Converter<int32_t>::toCpp(env, _sv8);        
        
 // LuaValToCSVal P any
    int32_t p9 = converter::Converter<int32_t>::toCpp(env, _sv9);        
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up10 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv10)); // object ret
    Il2CppObject** p10 = &up10;
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up11 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv11)); // object ret
    Il2CppObject** p11 = &up11;
        
 // LuaValToCSVal P any
    int32_t p12 = converter::Converter<int32_t>::toCpp(env, _sv12);        
        
    typedef void (*FuncToCall)(void* p1, Il2CppObject* p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8, int32_t p9, void* p10, void* p11, int32_t p12, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12,  method);
    

        return true;
}
// Void RegisterObject(IntPtr, XLua.ObjectTranslator, Int32, System.String, System.Object)bool w_vpoi4sO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpoi4sO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv4)) return false;                            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal s
    Il2CppString* p4 = converter::Converter<Il2CppString*>::toCpp(env, _sv4);
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(void* p1, Il2CppObject* p2, int32_t p3, Il2CppString* p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void loadUpvalue(IntPtr, System.Type, System.String, Int32)bool w_vposi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vposi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void* p1, Il2CppObject* p2, Il2CppString* p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void WriteIntPtr(IntPtr, IntPtr)bool w_vpp(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpp");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
    typedef void (*FuncToCall)(void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void CallVoidMethodUnsafe(IntPtr, IntPtr, UnityEngine.jvalue*)bool w_vppPS_bi1ci2i4i8r4r8p_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vppPS_bi1ci2i4i8r4r8p_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
     // LuaValToCSVal Pstruct
    S_bi1ci2i4i8r4r8p_* p3 = DataTransfer::GetPointer<S_bi1ci2i4i8r4r8p_>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_bi1ci2i4i8r4r8p_ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
    typedef void (*FuncToCall)(void* p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void CallVoidMethod(IntPtr, IntPtr, System.Span`1[UnityEngine.jvalue])bool w_vppS_S_p_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vppS_S_p_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
     // LuaValToCSVal struct
    S_S_p_i4_* pp3 = DataTransfer::GetPointer<S_S_p_i4_>(env, _sv3);
    S_S_p_i4_ p3 = pp3 ? *pp3 : S_S_p_i4_ {};
        
    typedef void (*FuncToCall)(void* p1, void* p2, struct S_S_p_i4_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetBooleanField(IntPtr, IntPtr, Boolean)bool w_vppb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vppb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, void* p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetCharField(IntPtr, IntPtr, Char)bool w_vppc(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vppc");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!converter::Converter<Il2CppChar>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
 // LuaValToCSVal P any
    Il2CppChar p3 = converter::Converter<Il2CppChar>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, void* p2, Il2CppChar p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetSByteField(IntPtr, IntPtr, SByte)bool w_vppi1(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vppi1");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!converter::Converter<int8_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
 // LuaValToCSVal P any
    int8_t p3 = converter::Converter<int8_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, void* p2, int8_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetShortField(IntPtr, IntPtr, Int16)bool w_vppi2(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vppi2");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!converter::Converter<int16_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
 // LuaValToCSVal P any
    int16_t p3 = converter::Converter<int16_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, void* p2, int16_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetIntField(IntPtr, IntPtr, Int32)bool w_vppi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vppi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, void* p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetLongField(IntPtr, IntPtr, Int64)bool w_vppi8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vppi8");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!converter::Converter<int64_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
 // LuaValToCSVal P any
    int64_t p3 = converter::Converter<int64_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, void* p2, int64_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void CallVoidMethod(IntPtr, IntPtr, UnityEngine.jvalue[])bool w_vppo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vppo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void* p1, void* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetObjectField(IntPtr, IntPtr, IntPtr)bool w_vppp(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vppp");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
 // LuaValToCSVal P any
    void* p3 = DataTransfer::GetPointer<void>(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetFloatField(IntPtr, IntPtr, Single)bool w_vppr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vppr4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, void* p2, float p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetDoubleField(IntPtr, IntPtr, Double)bool w_vppr8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vppr8");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!converter::Converter<double>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
 // LuaValToCSVal P any
    double p3 = converter::Converter<double>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, void* p2, double p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetStringField(IntPtr, IntPtr, System.String)bool w_vpps(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpps");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
    typedef void (*FuncToCall)(void* p1, void* p2, Il2CppString* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetByteField(IntPtr, IntPtr, Byte)bool w_vppu1(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vppu1");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!converter::Converter<uint8_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
 // LuaValToCSVal P any
    uint8_t p3 = converter::Converter<uint8_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, void* p2, uint8_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void ForwardRawInput(IntPtr, IntPtr, UInt32, IntPtr, UInt32)bool w_vppu4pu4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vppu4pu4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!!true) return false;                if (!!true) return false;                if (!converter::Converter<uint32_t>::accept(env, _sv3)) return false;                if (!!true) return false;                if (!converter::Converter<uint32_t>::accept(env, _sv5)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
 // LuaValToCSVal P any
    uint32_t p3 = converter::Converter<uint32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    void* p4 = DataTransfer::GetPointer<void>(env, _sv4);        
        
 // LuaValToCSVal P any
    uint32_t p5 = converter::Converter<uint32_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void* p1, void* p2, uint32_t p3, void* p4, uint32_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void lua_pushnumber(IntPtr, Double)bool w_vpr8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpr8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<double>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    double p2 = converter::Converter<double>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void* p1, double p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void lua_pushstring(IntPtr, System.String)bool w_vps(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vps");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
    typedef void (*FuncToCall)(void* p1, Il2CppString* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void WriteByte(IntPtr, Byte)bool w_vpu1(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpu1");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<uint8_t>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    uint8_t p2 = converter::Converter<uint8_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void* p1, uint8_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void xlua_pushuint(IntPtr, UInt32)bool w_vpu4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpu4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<uint32_t>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    uint32_t p2 = converter::Converter<uint32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void* p1, uint32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void xlua_pushcstable(IntPtr, UInt32, Int32)bool w_vpu4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpu4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!converter::Converter<uint32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    uint32_t p2 = converter::Converter<uint32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void* p1, uint32_t p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void lua_pushuint64(IntPtr, UInt64)bool w_vpu8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vpu8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<uint64_t>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    uint64_t p2 = converter::Converter<uint64_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void* p1, uint64_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Write(Single)bool w_vr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!converter::Converter<float>::accept(env, _sv1)) return false;            }
 // LuaValToCSVal P any
    float p1 = converter::Converter<float>::toCpp(env, _sv1);        
        
    typedef void (*FuncToCall)(float p1, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1,  method);
    

        return true;
}
// Void RotateAroundPivot(Single, UnityEngine.Vector2)bool w_vr4S_r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr4S_r4r4_");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<float>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
 // LuaValToCSVal P any
    float p1 = converter::Converter<float>::toCpp(env, _sv1);        
        
     // LuaValToCSVal struct
    S_r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4_>(env, _sv2);
    S_r4r4_ p2 = pp2 ? *pp2 : S_r4r4_ {};
        
    typedef void (*FuncToCall)(float p1, struct S_r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void DrawAAPolyLine(Single, UnityEngine.Vector3[])bool w_vr4VS_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr4VS_r4r4r4_");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<float>::accept(env, _sv1)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    float p1 = converter::Converter<float>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(float p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Space(Single, Boolean)bool w_vr4b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr4b");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<float>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    float p1 = converter::Converter<float>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(float p1, bool p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void SetLODSettings(Single, Int32, Boolean)bool w_vr4i4Db(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr4i4Db");
    
    auto TIp3 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<float>::accept(env, _sv1)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    float p1 = converter::Converter<float>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(float p1, int32_t p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void DrawAAPolyLine(Single, Int32, UnityEngine.Vector3[])bool w_vr4i4VS_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr4i4VS_r4r4r4_");
    
    auto TIp3 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<float>::accept(env, _sv1)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    float p1 = converter::Converter<float>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(float p1, int32_t p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void DrawAAPolyLine(Single, UnityEngine.Color[], UnityEngine.Vector3[])bool w_vr4oo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr4oo");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<float>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
 // LuaValToCSVal P any
    float p1 = converter::Converter<float>::toCpp(env, _sv1);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(float p1, Il2CppObject* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void TexCoord2(Single, Single)bool w_vr4r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr4r4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<float>::accept(env, _sv1)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    float p1 = converter::Converter<float>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(float p1, float p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Vertex3(Single, Single, Single)bool w_vr4r4r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr4r4r4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<float>::accept(env, _sv1)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    float p1 = converter::Converter<float>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(float p1, float p2, float p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void DrawVerticalLine(Single, Single, Single, UnityEngine.Color)bool w_vr4r4r4S_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr4r4r4S_r4r4r4r4_");
    
    auto TIp4 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<float>::accept(env, _sv1)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;            }
 // LuaValToCSVal P any
    float p1 = converter::Converter<float>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv4);
    S_r4r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(float p1, float p2, float p3, struct S_r4r4r4r4_ p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void LoadPixelMatrix(Single, Single, Single, Single)bool w_vr4r4r4r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr4r4r4r4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<float>::accept(env, _sv1)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!converter::Converter<float>::accept(env, _sv4)) return false;            }
 // LuaValToCSVal P any
    float p1 = converter::Converter<float>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    float p4 = converter::Converter<float>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(float p1, float p2, float p3, float p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void DrawPlayhead(Single, Single, Single, Single, Single)bool w_vr4r4r4r4r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr4r4r4r4r4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!converter::Converter<float>::accept(env, _sv1)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!converter::Converter<float>::accept(env, _sv4)) return false;                if (!converter::Converter<float>::accept(env, _sv5)) return false;            }
 // LuaValToCSVal P any
    float p1 = converter::Converter<float>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    float p4 = converter::Converter<float>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    float p5 = converter::Converter<float>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(float p1, float p2, float p3, float p4, float p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void AreApproximatelyEqual(Single, Single, Single, System.String)bool w_vr4r4r4s(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr4r4r4s");
    
    auto TIp4 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<float>::accept(env, _sv1)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv4)) return false;            }
 // LuaValToCSVal P any
    float p1 = converter::Converter<float>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
     // LuaValToCSVal s
    Il2CppString* p4 = converter::Converter<Il2CppString*>::toCpp(env, _sv4);
    typedef void (*FuncToCall)(float p1, float p2, float p3, Il2CppString* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void AreApproximatelyEqual(Single, Single, System.String)bool w_vr4r4s(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr4r4s");
    
    auto TIp3 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<float>::accept(env, _sv1)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    float p1 = converter::Converter<float>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
    typedef void (*FuncToCall)(float p1, float p2, Il2CppString* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Greater(Single, Single, System.String, System.Object[])bool w_vr4r4sVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr4r4sVO");
    
    auto TIp3 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<float>::accept(env, _sv1)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    float p1 = converter::Converter<float>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(float p1, float p2, Il2CppString* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void Zero(Single, System.String, System.Object[])bool w_vr4sVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr4sVO");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<float>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    float p1 = converter::Converter<float>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(float p1, Il2CppString* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Write(Double)bool w_vr8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr8");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!converter::Converter<double>::accept(env, _sv1)) return false;            }
 // LuaValToCSVal P any
    double p1 = converter::Converter<double>::toCpp(env, _sv1);        
        
    typedef void (*FuncToCall)(double p1, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1,  method);
    

        return true;
}
// Void AreEqual(Double, System.Nullable`1[System.Double], Double)bool w_vr8N_br8_r8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr8N_br8_r8");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<double>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<double>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    double p1 = converter::Converter<double>::toCpp(env, _sv1);        
        
     // LuaValToCSVal struct
    N_br8_* pp2 = DataTransfer::GetPointer<N_br8_>(env, _sv2);
    N_br8_ p2 = pp2 ? *pp2 : N_br8_ {};
        
 // LuaValToCSVal P any
    double p3 = converter::Converter<double>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(double p1, struct N_br8_ p2, double p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void AreEqual(Double, System.Nullable`1[System.Double], Double, System.String, System.Object[])bool w_vr8N_br8_r8sVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr8N_br8_r8sVO");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];
    auto TIp5 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!converter::Converter<double>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<double>::accept(env, _sv3)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv4)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    double p1 = converter::Converter<double>::toCpp(env, _sv1);        
        
     // LuaValToCSVal struct
    N_br8_* pp2 = DataTransfer::GetPointer<N_br8_>(env, _sv2);
    N_br8_ p2 = pp2 ? *pp2 : N_br8_ {};
        
 // LuaValToCSVal P any
    double p3 = converter::Converter<double>::toCpp(env, _sv3);        
        
     // LuaValToCSVal s
    Il2CppString* p4 = converter::Converter<Il2CppString*>::toCpp(env, _sv4);
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(double p1, struct N_br8_ p2, double p3, Il2CppString* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Greater(Double, Double)bool w_vr8r8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr8r8");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<double>::accept(env, _sv1)) return false;                if (!converter::Converter<double>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    double p1 = converter::Converter<double>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    double p2 = converter::Converter<double>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(double p1, double p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void AreEqual(Double, Double, Double)bool w_vr8r8r8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr8r8r8");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<double>::accept(env, _sv1)) return false;                if (!converter::Converter<double>::accept(env, _sv2)) return false;                if (!converter::Converter<double>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    double p1 = converter::Converter<double>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    double p2 = converter::Converter<double>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    double p3 = converter::Converter<double>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(double p1, double p2, double p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void AreEqual(Double, Double, Double, System.String, System.Object[])bool w_vr8r8r8sVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr8r8r8sVO");
    
    auto TIp4 = wrapData->TypeInfos[1];
    auto TIp5 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!converter::Converter<double>::accept(env, _sv1)) return false;                if (!converter::Converter<double>::accept(env, _sv2)) return false;                if (!converter::Converter<double>::accept(env, _sv3)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv4)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    double p1 = converter::Converter<double>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    double p2 = converter::Converter<double>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    double p3 = converter::Converter<double>::toCpp(env, _sv3);        
        
     // LuaValToCSVal s
    Il2CppString* p4 = converter::Converter<Il2CppString*>::toCpp(env, _sv4);
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(double p1, double p2, double p3, Il2CppString* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Greater(Double, Double, System.String, System.Object[])bool w_vr8r8sVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr8r8sVO");
    
    auto TIp3 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<double>::accept(env, _sv1)) return false;                if (!converter::Converter<double>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    double p1 = converter::Converter<double>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    double p2 = converter::Converter<double>::toCpp(env, _sv2);        
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(double p1, double p2, Il2CppString* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void IsNaN(Double, System.String, System.Object[])bool w_vr8sVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vr8sVO");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<double>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    double p1 = converter::Converter<double>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(double p1, Il2CppString* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void set_CurrentDirectory(System.String)bool w_vs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vs");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
    typedef void (*FuncToCall)(Il2CppString* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1,  method);
    

        return true;
}
// Void Emit(System.String, System.Object, Int32, UnityEditor.MPE.EventDataSerialization)bool w_vsDODi4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsDODi4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, void* p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetActive(System.String, Boolean)bool w_vsDb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsDb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Log(System.String, UInt64)bool w_vsDu8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsDu8");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Write(System.String, System.Object)bool w_vsO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Write(System.String, System.Object, System.Object)bool w_vsOO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsOO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                                            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Write(System.String, System.Object, System.Object, System.Object)bool w_vsOOO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsOOO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                                                            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void Write(System.String, System.Object, System.Object, System.Object, System.Object, ...)bool w_vsOOOO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsOOOO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                                                                            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void GetDeviceCaps(System.String, Int32 ByRef, Int32 ByRef)bool w_vsPi4Pi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsPi4Pi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void GetAllRenderPipelineAssetsForPlatform(System.String, System.Collections.Generic.List`1[UnityEngine.Rendering.RenderPipelineAsset] ByRef)bool w_vsPo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsPo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal Po/PO
    Il2CppObject* up2 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv2)); // object ret
    Il2CppObject** p2 = &up2;
        
    typedef void (*FuncToCall)(Il2CppString* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void MinMaxSlider(System.String, Single ByRef, Single ByRef, Single, Single, UnityEngine.GUILayoutOption[])bool w_vsPr4Pr4r4r4Vo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsPr4Pr4r4r4Vo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp6 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!!true) return false;                if (!!true) return false;                if (!converter::Converter<float>::accept(env, _sv4)) return false;                if (!converter::Converter<float>::accept(env, _sv5)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    float p4 = converter::Converter<float>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    float p5 = converter::Converter<float>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, void* p2, void* p3, float p4, float p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void LoadPrefabContentsIntoPreviewScene(System.String, UnityEngine.SceneManagement.Scene)bool w_vsS_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsS_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal struct
    S_i4_* pp2 = DataTransfer::GetPointer<S_i4_>(env, _sv2);
    S_i4_ p2 = pp2 ? *pp2 : S_i4_ {};
        
    typedef void (*FuncToCall)(Il2CppString* p1, struct S_i4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void SetTextureMipmapLimitSettings(System.String, UnityEngine.TextureMipmapLimitSettings)bool w_vsS_i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsS_i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal struct
    S_i4i4_* pp2 = DataTransfer::GetPointer<S_i4i4_>(env, _sv2);
    S_i4i4_ p2 = pp2 ? *pp2 : S_i4i4_ {};
        
    typedef void (*FuncToCall)(Il2CppString* p1, struct S_i4i4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void DeleteSecondary(System.String, UnityEngine.Vector2)bool w_vsS_r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsS_r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal struct
    S_r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4_>(env, _sv2);
    S_r4r4_ p2 = pp2 ? *pp2 : S_r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppString* p1, struct S_r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void SetTrackerPosition(System.String, UnityEngine.Vector3)bool w_vsS_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsS_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppString* p1, struct S_r4r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void SetTrackerRotation(System.String, UnityEngine.Quaternion)bool w_vsS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppString* p1, struct S_r4r4r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void PlayMovie(System.String, UnityEngine.Color, UnityEngine.iPhoneMovieControlMode)bool w_vsS_r4r4r4r4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsS_r4r4r4r4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, struct S_r4r4r4r4_ p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void PlayMovie(System.String, UnityEngine.Color, UnityEngine.iPhoneMovieControlMode, UnityEngine.iPhoneMovieScalingMode)bool w_vsS_r4r4r4r4_i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsS_r4r4r4r4_i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, struct S_r4r4r4r4_ p2, int32_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetGlobalMatrix(System.String, UnityEngine.Matrix4x4)bool w_vsS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(Il2CppString* p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void SetCreationTime(System.String, System.DateTime)bool w_vsS_u8_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsS_u8_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal struct
    S_u8_* pp2 = DataTransfer::GetPointer<S_u8_>(env, _sv2);
    S_u8_ p2 = pp2 ? *pp2 : S_u8_ {};
        
    typedef void (*FuncToCall)(Il2CppString* p1, struct S_u8_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void SetNoBackupFlag(System.String, UnityEngine.Hash128)bool w_vsS_u8u8_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsS_u8u8_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal struct
    S_u8u8_* pp2 = DataTransfer::GetPointer<S_u8u8_>(env, _sv2);
    S_u8u8_ p2 = pp2 ? *pp2 : S_u8u8_ {};
        
    typedef void (*FuncToCall)(Il2CppString* p1, struct S_u8u8_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Write(System.String, System.Object[])bool w_vsVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsVO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Label(System.String, UnityEngine.GUILayoutOption[])bool w_vsVo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsVo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void AddOID(System.String, System.String[])bool w_vsVs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsVs");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void SetSwitch(System.String, Boolean)bool w_vsb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsb");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, bool p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void SetPropertyBool(System.String, Boolean, UnityEditor.BuildTargetGroup)bool w_vsbi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsbi4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, bool p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetAttributes(System.String, System.IO.FileAttributes)bool w_vsi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsi4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void HelpBox(System.String, UnityEditor.MessageType, Boolean)bool w_vsi4b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsi4b");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, int32_t p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void WriteBootConfig(System.String, UnityEditor.BuildTarget, UnityEditor.BuildOptions)bool w_vsi4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsi4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, int32_t p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void CaptureScreenshotImmediate(System.String, Int32, Int32, Int32, Int32)bool w_vsi4i4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsi4i4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void RunTestsWithSyncCallbacks(System.String, Int32, System.String[], System.String[], System.String[], System.String[], System.Nullable`1[System.Int32], System.String, System.String, System.String[])bool w_vsi4ooooN_bi4_sso(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsi4ooooN_bi4_sso");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp7 = wrapData->TypeInfos[6];
    auto TIp8 = wrapData->TypeInfos[7];
    auto TIp9 = wrapData->TypeInfos[8];
    auto TIp10 = wrapData->TypeInfos[9];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    if (checkLuaArgument) {
        if (lua_args_len != 10) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, true)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv8)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv9)) return false;                if (!DataTransfer::IsAssignable(env, _sv10, TIp10, false)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
     // LuaValToCSVal struct
    N_bi4_* pp7 = DataTransfer::GetPointer<N_bi4_>(env, _sv7);
    N_bi4_ p7 = pp7 ? *pp7 : N_bi4_ {};
        
     // LuaValToCSVal s
    Il2CppString* p8 = converter::Converter<Il2CppString*>::toCpp(env, _sv8);
     // LuaValToCSVal s
    Il2CppString* p9 = converter::Converter<Il2CppString*>::toCpp(env, _sv9);
     // LuaValToCSVal o/O
    Il2CppObject* p10 = LuaValToCSRef(TIp10, env _sv10);
        
    typedef void (*FuncToCall)(Il2CppString* p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, struct N_bi4_ p7, Il2CppString* p8, Il2CppString* p9, Il2CppObject* p10, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10,  method);
    

        return true;
}
// Void FailFast(System.String, System.Exception)bool w_vso(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vso");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void Request(System.String, System.Action`2[System.Exception,System.Object[]], System.Object, Int64, UnityEditor.MPE.EventDataSerialization)bool w_vsoDODi8Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsoDODi8Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, void* p3, void* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Request(System.String, System.Action`2[UnityEditor.Search.SearchContext,System.Collections.Generic.IList`1[UnityEditor.Search.SearchItem]], UnityEditor.Search.SearchFlags)bool w_vsoDi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsoDi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Emit(System.String, System.Object[], Int32, UnityEditor.MPE.EventDataSerialization)bool w_vsoDi4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsoDi4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void RegisterCommand(System.String, UnityEditor.CommandHandler, UnityEditor.CommandHint)bool w_vsoDi8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsoDi8");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void TakeSnapshot(System.String, System.Action`2[System.String,System.Boolean], Unity.Profiling.Memory.CaptureFlags)bool w_vsoDu4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsoDu4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void WriteEvent(System.String, System.Diagnostics.EventInstance, System.Object[])bool w_vsoVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsoVO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Label(System.String, UnityEngine.GUIStyle, UnityEngine.GUILayoutOption[])bool w_vsoVo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsoVo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void AddConfigObject(System.String, UnityEngine.Object, Boolean)bool w_vsob(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsob");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetGlobalTexture(System.String, UnityEngine.RenderTexture, UnityEngine.Rendering.RenderTextureSubElement)bool w_vsoi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsoi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetGlobalConstantBuffer(System.String, UnityEngine.ComputeBuffer, Int32, Int32)bool w_vsoi4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsoi4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, int32_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void WriteAllLines(System.String, System.String[], System.Text.Encoding)bool w_vsoo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsoo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Request(System.String, System.Action`2[UnityEditor.Search.SearchContext,System.Collections.Generic.IEnumerable`1[UnityEditor.Search.SearchItem]], System.Action`1[UnityEditor.Search.SearchContext], UnityEditor.Search.SearchFlags)bool w_vsooDi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsooDi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, Il2CppObject* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void Request(System.String, System.Action`2[System.Exception,System.Object[]], System.Object[], Int64, UnityEditor.MPE.EventDataSerialization)bool w_vsooDi8Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsooDi8Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, Il2CppObject* p3, void* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void TakeSnapshot(System.String, System.Action`2[System.String,System.Boolean], System.Action`3[System.String,System.Boolean,Unity.Profiling.DebugScreenCapture], Unity.Profiling.Memory.CaptureFlags)bool w_vsooDu4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsooDu4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, Il2CppObject* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void WriteEvent(System.String, System.Diagnostics.EventInstance, Byte[], System.Object[])bool w_vsooVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsooVO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppObject* p2, Il2CppObject* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetAxis(System.String, Single)bool w_vsr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsr4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, float p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void ReportProgress(System.String, Double, System.Action`1[System.Boolean])bool w_vsr8o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsr8o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<double>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
 // LuaValToCSVal P any
    double p2 = converter::Converter<double>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(Il2CppString* p1, double p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetEnvironmentVariable(System.String, System.String)bool w_vss(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vss");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2,  method);
    

        return true;
}
// Void CreateAssetWithContent(System.String, System.String, UnityEngine.Texture2D)bool w_vssDo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vssDo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetValue(System.String, System.String, System.Object)bool w_vssO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vssO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetValue(System.String, System.String, System.Object, Microsoft.Win32.RegistryValueKind)bool w_vssOi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vssOi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, Il2CppObject* p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void IsEmpty(System.String, System.String, System.Object[])bool w_vssVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vssVO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void LabelField(System.String, System.String, UnityEngine.GUILayoutOption[])bool w_vssVo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vssVo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Copy(System.String, System.String, Boolean)bool w_vssb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vssb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void SetEnvironmentVariable(System.String, System.String, System.EnvironmentVariableTarget)bool w_vssi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vssi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void WriteEntry(System.String, System.String, System.Diagnostics.EventLogEntryType, Int32)bool w_vssi4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vssi4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, int32_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void WriteEntry(System.String, System.String, System.Diagnostics.EventLogEntryType, Int32, Int16)bool w_vssi4i4i2(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vssi4i4i2");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int16_t>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int16_t p5 = converter::Converter<int16_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, int32_t p3, int32_t p4, int16_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void WriteEntry(System.String, System.String, System.Diagnostics.EventLogEntryType, Int32, Int16, Byte[])bool w_vssi4i4i2o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vssi4i4i2o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp6 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int16_t>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int16_t p5 = converter::Converter<int16_t>::toCpp(env, _sv5);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, int32_t p3, int32_t p4, int16_t p5, Il2CppObject* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void GetCounterValuesBatch(System.String, System.String, Int32, Single, Single[], Single ByRef)bool w_vssi4r4oPr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vssi4r4oPr4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp5 = wrapData->TypeInfos[3];
    auto TIp6 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<float>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    float p4 = converter::Converter<float>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, int32_t p3, float p4, Il2CppObject* p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void RegisterInteropXmlElement(System.String, System.String, System.Type)bool w_vsso(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsso");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void RegisterCommand(System.String, System.String, UnityEditor.CommandHandler, UnityEditor.CommandHint)bool w_vssoDi8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vssoDi8");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, Il2CppObject* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void LabelField(System.String, System.String, UnityEngine.GUIStyle, UnityEngine.GUILayoutOption[])bool w_vssoVo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vssoVo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, Il2CppObject* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void DisplayProgressBar(System.String, System.String, Single)bool w_vssr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vssr4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, float p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void Replace(System.String, System.String, System.String)bool w_vsss(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsss");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, Il2CppString* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3,  method);
    

        return true;
}
// Void AreEqual(System.String, System.String, System.String, System.Object[])bool w_vsssVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsssVO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, Il2CppString* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void Replace(System.String, System.String, System.String, Boolean)bool w_vsssb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vsssb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, Il2CppString* p3, bool p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetPlatformSettings(System.String, System.String, System.String, System.String)bool w_vssss(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vssss");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
     // LuaValToCSVal s
    Il2CppString* p4 = converter::Converter<Il2CppString*>::toCpp(env, _sv4);
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, Il2CppString* p3, Il2CppString* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetCustomDiffTool(System.String, System.String, System.String, System.String, Boolean)bool w_vssssDb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vssssDb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!converter::Converter<Il2CppString*>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv4)) return false;                if (!!true) return false;            }
     // LuaValToCSVal s
    Il2CppString* p1 = converter::Converter<Il2CppString*>::toCpp(env, _sv1);
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
     // LuaValToCSVal s
    Il2CppString* p4 = converter::Converter<Il2CppString*>::toCpp(env, _sv4);
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(Il2CppString* p1, Il2CppString* p2, Il2CppString* p3, Il2CppString* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)( p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Flush()bool w_vt(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vt");
    

    int lua_args_len = pesapi_get_args_len(info);
    

    if (checkLuaArgument) {
        if (lua_args_len < 1) return false;
            }

    typedef void (*FuncToCall)(void*,const void* method);
    void ret = ((FuncToCall)methodPointer)(self,  method);
    

        return true;
}
// Void .ctor(System.Nullable`1[UnityEngine.Rendering.RenderQueueRange], Int32, UInt32, Int32)bool w_vtDN_bS_i4i4__Di4Du4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDN_bS_i4i4__Di4Du4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void AllowSetForegroundWindow(System.Nullable`1[System.Int32])bool w_vtDN_bi4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDN_bi4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Cleanup(Boolean)bool w_vtDb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDb");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Render(Boolean, Boolean)bool w_vtDbDb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDbDb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(Boolean, UnityEngine.Rendering.CompareFunction)bool w_vtDbDi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDbDi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(Boolean, Byte, Byte, UnityEngine.Rendering.CompareFunction, UnityEngine.Rendering.StencilOp, UnityEngine.Rendering.StencilOp, UnityEngine.Rendering.StencilOp)bool w_vtDbDu1Du1Di4Di4Di4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDbDu1Du1Di4Di4Di4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];
    auto TIp7 = wrapData->TypeInfos[7];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
 // LuaValToCSVal P any
    void* p7 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, void* p4, void* p5, void* p6, void* p7, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void Fill(UnityEngine.UIElements.FillRule)bool w_vtDi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDi4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(Int32, Boolean, UnityEngine.QueryTriggerInteraction, Boolean)bool w_vtDi4DbDi4Db(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDi4DbDi4Db");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(UnityEngine.InspectorSort, UnityEngine.InspectorSortDirection)bool w_vtDi4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDi4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Rendering.VertexAttribute, UnityEngine.Rendering.VertexAttributeFormat, Int32, Int32)bool w_vtDi4Di4Di4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDi4Di4Di4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Rendering.ColorWriteMask, UnityEngine.Rendering.BlendMode, UnityEngine.Rendering.BlendMode, UnityEngine.Rendering.BlendMode, UnityEngine.Rendering.BlendMode, UnityEngine.Rendering.BlendOp, UnityEngine.Rendering.BlendOp)bool w_vtDi4Di4Di4Di4Di4Di4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDi4Di4Di4Di4Di4Di4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];
    auto TIp7 = wrapData->TypeInfos[7];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
 // LuaValToCSVal P any
    void* p7 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, void* p4, void* p5, void* p6, void* p7, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Rendering.CullMode, Int32, Single, Boolean)bool w_vtDi4Di4Dr4Db(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDi4Di4Dr4Db");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void DefaultValueFunc(Int32, System.String, System.String)bool w_vtDi4DsDs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDi4DsDs");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(UnityEditor.Experimental.GraphView.GraphView)bool w_vtDo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDo");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void RecalculateUVDistributionMetrics(Single)bool w_vtDr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDr4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void SetPreloading(Single, Boolean, UnityEngine.Camera)bool w_vtDr4DbDo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDr4DbDo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void Increment(Double)bool w_vtDr8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDr8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void AppendSeparator(System.String)bool w_vtDs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDs");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(System.String, System.Type)bool w_vtDsDo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDsDo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(System.String, System.String, Boolean, Boolean)bool w_vtDsDsDbDb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDsDsDbDb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(System.String, System.String, System.String, System.String, Int32, UnityEditor.Search.TextCursorPlacement, UnityEngine.Texture2D, System.Type, System.Object, UnityEngine.Color)bool w_vtDsDsDsDsDi4Di4DoDoDODS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtDsDsDsDsDi4Di4DoDoDODS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];
    auto TIp7 = wrapData->TypeInfos[7];
    auto TIp8 = wrapData->TypeInfos[8];
    auto TIp9 = wrapData->TypeInfos[9];
    auto TIp10 = wrapData->TypeInfos[10];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    if (checkLuaArgument) {
        if (lua_args_len != 10) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
 // LuaValToCSVal P any
    void* p7 = nullptr;        
        
 // LuaValToCSVal P any
    void* p8 = nullptr;        
        
 // LuaValToCSVal P any
    void* p9 = nullptr;        
        
 // LuaValToCSVal P any
    void* p10 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, void* p4, void* p5, void* p6, void* p7, void* p8, void* p9, void* p10, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10,  method);
    

        return true;
}
// Void set_autoFocusPoint(System.Nullable`1[UnityEngine.Vector2])bool w_vtN_bS_r4r4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtN_bS_r4r4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    N_bS_r4r4__* pp1 = DataTransfer::GetPointer<N_bS_r4r4__>(env, _sv1);
    N_bS_r4r4__ p1 = pp1 ? *pp1 : N_bS_r4r4__ {};
        
    typedef void (*FuncToCall)(void*,struct N_bS_r4r4__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_CertificateValidationTime(System.Nullable`1[System.DateTime])bool w_vtN_bS_u8__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtN_bS_u8__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    N_bS_u8__* pp1 = DataTransfer::GetPointer<N_bS_u8__>(env, _sv1);
    N_bS_u8__ p1 = pp1 ? *pp1 : N_bS_u8__ {};
        
    typedef void (*FuncToCall)(void*,struct N_bS_u8__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_UseServicePointManagerCallback(System.Nullable`1[System.Boolean])bool w_vtN_bb_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtN_bb_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    N_bb_* pp1 = DataTransfer::GetPointer<N_bb_>(env, _sv1);
    N_bb_ p1 = pp1 ? *pp1 : N_bb_ {};
        
    typedef void (*FuncToCall)(void*,struct N_bb_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_EnabledProtocols(System.Nullable`1[Mono.Security.Interface.TlsProtocols])bool w_vtN_bi4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtN_bi4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    N_bi4_* pp1 = DataTransfer::GetPointer<N_bi4_>(env, _sv1);
    N_bi4_ p1 = pp1 ? *pp1 : N_bi4_ {};
        
    typedef void (*FuncToCall)(void*,struct N_bi4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(System.Nullable`1[System.Int32], System.Nullable`1[System.Int32])bool w_vtN_bi4_N_bi4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtN_bi4_N_bi4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    N_bi4_* pp1 = DataTransfer::GetPointer<N_bi4_>(env, _sv1);
    N_bi4_ p1 = pp1 ? *pp1 : N_bi4_ {};
        
     // LuaValToCSVal struct
    N_bi4_* pp2 = DataTransfer::GetPointer<N_bi4_>(env, _sv2);
    N_bi4_ p2 = pp2 ? *pp2 : N_bi4_ {};
        
    typedef void (*FuncToCall)(void*,struct N_bi4_ p1, struct N_bi4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void set_ProviderKeywords(System.Nullable`1[System.Int64])bool w_vtN_bi8_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtN_bi8_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    N_bi8_* pp1 = DataTransfer::GetPointer<N_bi8_>(env, _sv1);
    N_bi8_ p1 = pp1 ? *pp1 : N_bi8_ {};
        
    typedef void (*FuncToCall)(void*,struct N_bi8_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_Timestamp(System.Nullable`1[System.UInt32])bool w_vtN_bu4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtN_bu4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    N_bu4_* pp1 = DataTransfer::GetPointer<N_bu4_>(env, _sv1);
    N_bu4_ p1 = pp1 ? *pp1 : N_bu4_ {};
        
    typedef void (*FuncToCall)(void*,struct N_bu4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_Target(System.Object)bool w_vtO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtO");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(System.Object, Boolean, System.String, Int32, System.String[])bool w_vtODbDsDi4Vs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtODbDsDi4Vs");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, void* p2, void* p3, void* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void set_Item(System.Object, System.Object)bool w_vtOO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                                            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(System.Object, System.Object, System.Object)bool w_vtOOO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOOO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                                                            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void SetValue(System.Object, System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Globalization.CultureInfo)bool w_vtOOi4oo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOOi4oo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                                                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, Il2CppObject* p2, int32_t p3, Il2CppObject* p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void SetValue(System.Object, System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)bool w_vtOOi4ooo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOOi4ooo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                                                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, Il2CppObject* p2, int32_t p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void SetValue(System.Object, System.Object, System.Object[])bool w_vtOOo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOOo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                                                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void SetValue(System.Object, Int32[])bool w_vtOVi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOVi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetValue(System.Object, Int64[])bool w_vtOVi8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOVi8");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(System.Object, Boolean)bool w_vtOb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOb");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                                if (!converter::Converter<bool>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, bool p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetValue(System.Object, Int32)bool w_vtOi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOi4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetValue(System.Object, Int32, Int32)bool w_vtOi4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOi4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, int32_t p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void SetValue(System.Object, Int32, Int32, Int32)bool w_vtOi4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOi4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, int32_t p2, int32_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetValue(System.Object, Int64)bool w_vtOi8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOi8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                                if (!converter::Converter<int64_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int64_t p2 = converter::Converter<int64_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, int64_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetValue(System.Object, Int64, Int64)bool w_vtOi8i8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOi8i8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                                if (!converter::Converter<int64_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int64_t p2 = converter::Converter<int64_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int64_t p3 = converter::Converter<int64_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, int64_t p2, int64_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void SetValue(System.Object, Int64, Int64, Int64)bool w_vtOi8i8i8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOi8i8i8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                                if (!converter::Converter<int64_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int64_t p2 = converter::Converter<int64_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int64_t p3 = converter::Converter<int64_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int64_t p4 = converter::Converter<int64_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, int64_t p2, int64_t p3, int64_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void RegisterObject(System.Object, Int64, System.Runtime.Serialization.SerializationInfo)bool w_vtOi8o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOi8o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                                if (!converter::Converter<int64_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int64_t p2 = converter::Converter<int64_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, int64_t p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void RegisterObject(System.Object, Int64, System.Runtime.Serialization.SerializationInfo, Int64, System.Reflection.MemberInfo)bool w_vtOi8oi8o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOi8oi8o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp5 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                                if (!converter::Converter<int64_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int64_t p2 = converter::Converter<int64_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int64_t p4 = converter::Converter<int64_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, int64_t p2, Il2CppObject* p3, int64_t p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void RegisterObject(System.Object, Int64, System.Runtime.Serialization.SerializationInfo, Int64, System.Reflection.MemberInfo, Int32[])bool w_vtOi8oi8oo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOi8oi8oo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp5 = wrapData->TypeInfos[3];
    auto TIp6 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                                if (!converter::Converter<int64_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    int64_t p2 = converter::Converter<int64_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int64_t p4 = converter::Converter<int64_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, int64_t p2, Il2CppObject* p3, int64_t p4, Il2CppObject* p5, Il2CppObject* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void RemoveEventHandler(System.Object, System.Delegate)bool w_vtOo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(System.Object, System.ComponentModel.MemberDescriptor, System.Object, System.Object)bool w_vtOoOO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOoOO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                                            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void set_Item(System.Object, System.ComponentModel.MemberDescriptor, System.ComponentModel.Design.Serialization.MemberRelationship)bool w_vtOoS_oO_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOoS_oO_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal struct
    S_oO_* pp3 = DataTransfer::GetPointer<S_oO_>(env, _sv3);
    S_oO_ p3 = pp3 ? *pp3 : S_oO_ {};
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, Il2CppObject* p2, struct S_oO_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(System.Object, System.Exception, Boolean)bool w_vtOob(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOob");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, Il2CppObject* p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(System.Object, System.Object[], Int32, System.Runtime.Remoting.Messaging.LogicalCallContext, System.Runtime.Remoting.Messaging.IMethodCallMessage)bool w_vtOoi4oo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOoi4oo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, Il2CppObject* p2, int32_t p3, Il2CppObject* p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void .ctor(System.Object, IntPtr)bool w_vtOp(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOp");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                                if (!!true) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Write(System.Object, System.String)bool w_vtOs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOs");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, Il2CppString* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void ApplyResources(System.Object, System.String, System.Globalization.CultureInfo)bool w_vtOso(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOso");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, Il2CppString* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(System.Object, System.String, System.String)bool w_vtOss(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtOss");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal o/O
    Il2CppObject* p1 = LuaValToCSRef(TIp1, env _sv1);
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
    typedef void (*FuncToCall)(void*,Il2CppObject* p1, Il2CppString* p2, Il2CppString* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void Deconstruct(System.Object ByRef, System.Object ByRef)bool w_vtPOPO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPOPO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Po/PO
    Il2CppObject* up1 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv1)); // object ret
    Il2CppObject** p1 = &up1;
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up2 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv2)); // object ret
    Il2CppObject** p2 = &up2;
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void AcquirePointer(Byte* ByRef)bool w_vtPPu1(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPPu1");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void DrawShadows(UnityEngine.Rendering.ShadowDrawingSettings ByRef)bool w_vtPS_S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__i4i4S_i4S_u1_S_r4r4r4r4_r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__i4i4S_i4S_u1_S_r4r4r4r4_r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__i4i4S_i4S_u1_S_r4r4r4r4_r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4i4_* p1 = DataTransfer::GetPointer<S_S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__i4i4S_i4S_u1_S_r4r4r4r4_r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4i4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__i4i4S_i4S_u1_S_r4r4r4r4_r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__i4i4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void EnableKeyword(UnityEngine.Rendering.LocalKeyword ByRef)bool w_vtPS_S_p_su4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_S_p_su4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_S_p_su4_* p1 = DataTransfer::GetPointer<S_S_p_su4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_S_p_su4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void SetKeyword(UnityEngine.Rendering.LocalKeyword ByRef, Boolean)bool w_vtPS_S_p_su4_b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_S_p_su4_b");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal Pstruct
    S_S_p_su4_* p1 = DataTransfer::GetPointer<S_S_p_su4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_S_p_su4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,void* p1, bool p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void PopulateUIVertex(UnityEngine.UIVertex ByRef, Int32)bool w_vtPS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal Pstruct
    S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__* p1 = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,void* p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void GetHumanPose(UnityEngine.HumanPose ByRef)bool w_vtPS_S_r4r4r4_S_r4r4r4r4_o_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_S_r4r4r4_S_r4r4r4r4_o_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_S_r4r4r4_S_r4r4r4r4_o_* p1 = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4r4_o_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_S_r4r4r4_S_r4r4r4r4_o_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Serialize(UnityEngine.NetworkPlayer ByRef)bool w_vtPS__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S__* p1 = DataTransfer::GetPointer<S__>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S__ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Init(UnityEngine.Experimental.GlobalIllumination.DirectionalLight ByRef)bool w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4S_r4r4r4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4S_r4r4r4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4S_r4r4r4__* p1 = DataTransfer::GetPointer<S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4S_r4r4r4__>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4S_r4r4r4__ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Init(UnityEngine.Experimental.GlobalIllumination.DirectionalLight ByRef, UnityEngine.Experimental.GlobalIllumination.Cookie ByRef)bool w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4S_r4r4r4__PS_i4r4S_r4r4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4S_r4r4r4__PS_i4r4S_r4r4__");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4S_r4r4r4__* p1 = DataTransfer::GetPointer<S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4S_r4r4r4__>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4S_r4r4r4__ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
     // LuaValToCSVal Pstruct
    S_i4r4S_r4r4__* p2 = DataTransfer::GetPointer<S_i4r4S_r4r4__>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_i4r4S_r4r4__ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Init(UnityEngine.Experimental.GlobalIllumination.SpotLightBoxShape ByRef)bool w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4_* p1 = DataTransfer::GetPointer<S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Init(UnityEngine.Experimental.GlobalIllumination.SpotLightBoxShape ByRef, UnityEngine.Experimental.GlobalIllumination.Cookie ByRef)bool w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4_PS_i4r4S_r4r4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4_PS_i4r4S_r4r4__");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4_* p1 = DataTransfer::GetPointer<S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
     // LuaValToCSVal Pstruct
    S_i4r4S_r4r4__* p2 = DataTransfer::GetPointer<S_i4r4S_r4r4__>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_i4r4S_r4r4__ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Init(UnityEngine.Experimental.GlobalIllumination.SpotLight ByRef)bool w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4r4u1u1_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4r4u1u1_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4r4u1u1_* p1 = DataTransfer::GetPointer<S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4r4u1u1_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4r4u1u1_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Init(UnityEngine.Experimental.GlobalIllumination.SpotLight ByRef, UnityEngine.Experimental.GlobalIllumination.Cookie ByRef)bool w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4r4u1u1_PS_i4r4S_r4r4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4r4u1u1_PS_i4r4S_r4r4__");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4r4u1u1_* p1 = DataTransfer::GetPointer<S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4r4u1u1_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4r4u1u1_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
     // LuaValToCSVal Pstruct
    S_i4r4S_r4r4__* p2 = DataTransfer::GetPointer<S_i4r4S_r4r4__>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_i4r4S_r4r4__ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Init(UnityEngine.Experimental.GlobalIllumination.RectangleLight ByRef)bool w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4u1_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4u1_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4u1_* p1 = DataTransfer::GetPointer<S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4u1_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4u1_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Init(UnityEngine.Experimental.GlobalIllumination.RectangleLight ByRef, UnityEngine.Experimental.GlobalIllumination.Cookie ByRef)bool w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4u1_PS_i4r4S_r4r4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4u1_PS_i4r4S_r4r4__");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4u1_* p1 = DataTransfer::GetPointer<S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4u1_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4r4u1_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
     // LuaValToCSVal Pstruct
    S_i4r4S_r4r4__* p2 = DataTransfer::GetPointer<S_i4r4S_r4r4__>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_i4r4S_r4r4__ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Init(UnityEngine.Experimental.GlobalIllumination.PointLight ByRef)bool w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4u1_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4u1_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4u1_* p1 = DataTransfer::GetPointer<S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4u1_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4u1_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Init(UnityEngine.Experimental.GlobalIllumination.PointLight ByRef, UnityEngine.Experimental.GlobalIllumination.Cookie ByRef)bool w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4u1_PS_i4r4S_r4r4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4u1_PS_i4r4S_r4r4__");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4u1_* p1 = DataTransfer::GetPointer<S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4u1_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_i4bu1S_r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4u1_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
     // LuaValToCSVal Pstruct
    S_i4r4S_r4r4__* p2 = DataTransfer::GetPointer<S_i4r4S_r4r4__>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_i4r4S_r4r4__ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void DowngradeFromWriterLock(System.Threading.LockCookie ByRef)bool w_vtPS_i4i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_i4i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_i4i4i4_* p1 = DataTransfer::GetPointer<S_i4i4i4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_i4i4i4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void FreeNativeOverlapped(System.Threading.NativeOverlapped*)bool w_vtPS_ppi4i4p_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_ppi4i4p_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_ppi4i4p_* p1 = DataTransfer::GetPointer<S_ppi4i4p_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_ppi4i4p_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Add2(NoGen2FloatStruct ByRef, Gen2FloatStruct ByRef)bool w_vtPS_r4r4_PS_r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_r4r4_PS_r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_r4r4_* p1 = DataTransfer::GetPointer<S_r4r4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_r4r4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
     // LuaValToCSVal Pstruct
    S_r4r4_* p2 = DataTransfer::GetPointer<S_r4r4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_r4r4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Serialize(UnityEngine.Vector3 ByRef)bool w_vtPS_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_r4r4r4_* p1 = DataTransfer::GetPointer<S_r4r4r4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_r4r4r4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Sub3(NoGen3FloatStruct ByRef, Gen3FloatStruct ByRef)bool w_vtPS_r4r4r4_PS_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_r4r4r4_PS_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_r4r4r4_* p1 = DataTransfer::GetPointer<S_r4r4r4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_r4r4r4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
     // LuaValToCSVal Pstruct
    S_r4r4r4_* p2 = DataTransfer::GetPointer<S_r4r4r4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_r4r4r4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void GetPositionAndRotation(UnityEngine.Vector3 ByRef, UnityEngine.Quaternion ByRef)bool w_vtPS_r4r4r4_PS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_r4r4r4_PS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_r4r4r4_* p1 = DataTransfer::GetPointer<S_r4r4r4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_r4r4r4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
     // LuaValToCSVal Pstruct
    S_r4r4r4r4_* p2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_r4r4r4r4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void ToAxisAngle(UnityEngine.Vector3 ByRef, Single ByRef)bool w_vtPS_r4r4r4_Pr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_r4r4r4_Pr4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_r4r4r4_* p1 = DataTransfer::GetPointer<S_r4r4r4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_r4r4r4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Serialize(UnityEngine.Vector3 ByRef, Single)bool w_vtPS_r4r4r4_r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_r4r4r4_r4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal Pstruct
    S_r4r4r4_* p1 = DataTransfer::GetPointer<S_r4r4r4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_r4r4r4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,void* p1, float p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Serialize(UnityEngine.Quaternion ByRef)bool w_vtPS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_r4r4r4r4_* p1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_r4r4r4r4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Multiply4(NoGen4FloatStruct ByRef, Gen4FloatStruct ByRef)bool w_vtPS_r4r4r4r4_PS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_r4r4r4r4_PS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_r4r4r4r4_* p1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_r4r4r4r4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
     // LuaValToCSVal Pstruct
    S_r4r4r4r4_* p2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_r4r4r4r4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Serialize(UnityEngine.Quaternion ByRef, Single)bool w_vtPS_r4r4r4r4_r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_r4r4r4r4_r4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal Pstruct
    S_r4r4r4r4_* p1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_r4r4r4r4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,void* p1, float p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void PreProcessKey(UnityEngine.Keyframe ByRef)bool w_vtPS_r4r4r4r4i4i4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_r4r4r4r4i4i4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_r4r4r4r4i4i4r4r4_* p1 = DataTransfer::GetPointer<S_r4r4r4r4i4i4r4r4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_r4r4r4r4i4i4r4r4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void All5(NoGen5FloatStruct ByRef, Gen5FloatStruct ByRef)bool w_vtPS_r4r4r4r4r4_PS_r4r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_r4r4r4r4r4_PS_r4r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_r4r4r4r4r4_* p1 = DataTransfer::GetPointer<S_r4r4r4r4r4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_r4r4r4r4r4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
     // LuaValToCSVal Pstruct
    S_r4r4r4r4r4_* p2 = DataTransfer::GetPointer<S_r4r4r4r4r4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_r4r4r4r4r4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void All6(NoGen6FloatStruct ByRef, Gen6FloatStruct ByRef)bool w_vtPS_r4r4r4r4r4r4_PS_r4r4r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_r4r4r4r4r4r4_PS_r4r4r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_r4r4r4r4r4r4_* p1 = DataTransfer::GetPointer<S_r4r4r4r4r4r4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_r4r4r4r4r4r4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
     // LuaValToCSVal Pstruct
    S_r4r4r4r4r4r4_* p2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_r4r4r4r4r4r4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void UndoRedoPerformed(UnityEditor.UndoRedoInfo ByRef)bool w_vtPS_si4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_si4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_si4i4_* p1 = DataTransfer::GetPointer<S_si4i4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_si4i4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Apply(UnityEditor.Search.SearchProposition ByRef)bool w_vtPS_sssi4i4osS_r4r4r4r4_oO_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_sssi4i4osS_r4r4r4r4_oO_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_sssi4i4osS_r4r4r4r4_oO_* p1 = DataTransfer::GetPointer<S_sssi4i4osS_r4r4r4r4_oO_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_sssi4i4osS_r4r4r4r4_oO_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void EnableKeyword(UnityEngine.Rendering.GlobalKeyword ByRef)bool w_vtPS_su4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_su4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_su4_* p1 = DataTransfer::GetPointer<S_su4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_su4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void SetKeyword(UnityEngine.Rendering.GlobalKeyword ByRef, Boolean)bool w_vtPS_su4_b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_su4_b");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal Pstruct
    S_su4_* p1 = DataTransfer::GetPointer<S_su4_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_su4_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,void* p1, bool p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetStruct(NoGenCodeStruct ByRef, NoGenCodeStruct ByRef)bool w_vtPS_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__PS_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__PS_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__* p1 = DataTransfer::GetPointer<S_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
     // LuaValToCSVal Pstruct
    S_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__* p2 = DataTransfer::GetPointer<S_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void CloseAnimationStream(UnityEngine.Animator, UnityEngine.Animations.AnimationStream ByRef)bool w_vtPS_u4pppppp_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_u4pppppp_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_u4pppppp_* p1 = DataTransfer::GetPointer<S_u4pppppp_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_u4pppppp_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Invalidate(UnityEditor.Search.PropertyDatabaseRecordKey ByRef)bool w_vtPS_u8S_u8u8__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_u8S_u8u8__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_u8S_u8u8__* p1 = DataTransfer::GetPointer<S_u8S_u8u8__>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_u8S_u8u8__ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(UnityEngine.XR.MeshId ByRef, UInt64, UnityEngine.Vector3 ByRef, UnityEngine.Quaternion ByRef, UnityEngine.Vector3 ByRef)bool w_vtPS_u8u8_u8PS_r4r4r4_PS_r4r4r4r4_PS_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPS_u8u8_u8PS_r4r4r4_PS_r4r4r4r4_PS_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!!true) return false;                if (!converter::Converter<uint64_t>::accept(env, _sv2)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Pstruct
    S_u8u8_* p1 = DataTransfer::GetPointer<S_u8u8_>(env, pesapi_unboxing(env, _sv1)); // valuetype ref
    S_u8u8_ up1;
    if (!p1) {
        memset(&up1, 0, sizeof(p1));
    }
        
 // LuaValToCSVal P any
    uint64_t p2 = converter::Converter<uint64_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal Pstruct
    S_r4r4r4_* p3 = DataTransfer::GetPointer<S_r4r4r4_>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_r4r4r4_ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
     // LuaValToCSVal Pstruct
    S_r4r4r4r4_* p4 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, pesapi_unboxing(env, _sv4)); // valuetype ref
    S_r4r4r4r4_ up4;
    if (!p4) {
        memset(&up4, 0, sizeof(p4));
    }
        
     // LuaValToCSVal Pstruct
    S_r4r4r4_* p5 = DataTransfer::GetPointer<S_r4r4r4_>(env, pesapi_unboxing(env, _sv5)); // valuetype ref
    S_r4r4r4_ up5;
    if (!p5) {
        memset(&up5, 0, sizeof(p5));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, uint64_t p2, void* p3, void* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Enter(Boolean ByRef)bool w_vtPb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPb");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Deconstruct(Boolean ByRef, System.String ByRef, Boolean ByRef)bool w_vtPbPsPb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPbPsPb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
     // LuaValToCSVal Ps
    Il2CppString* up2 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv2); // string ref
    Il2CppString** p2 = &up2;
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void Deconstruct(Boolean ByRef, System.String ByRef, System.String ByRef)bool w_vtPbPsPs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPbPsPs");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
     // LuaValToCSVal Ps
    Il2CppString* up2 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv2); // string ref
    Il2CppString** p2 = &up2;
        
     // LuaValToCSVal Ps
    Il2CppString* up3 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv3); // string ref
    Il2CppString** p3 = &up3;
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void Serialize(Char ByRef)bool w_vtPc(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPc");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(Char*, Int32)bool w_vtPci4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPci4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,void* p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Convert(Char*, Int32, Byte*, Int32, Boolean, Int32 ByRef, Int32 ByRef, Boolean ByRef)bool w_vtPci4Pu1i4bPi4Pi4Pb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPci4Pu1i4bPi4Pi4Pb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp6 = wrapData->TypeInfos[3];
    auto TIp7 = wrapData->TypeInfos[4];
    auto TIp8 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    if (checkLuaArgument) {
        if (lua_args_len != 8) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
 // LuaValToCSVal P any
    void* p7 = nullptr;        
        
 // LuaValToCSVal P any
    void* p8 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, int32_t p2, void* p3, int32_t p4, bool p5, void* p6, void* p7, void* p8, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7, p8,  method);
    

        return true;
}
// Void .ctor(Char*, Int32, Int32)bool w_vtPci4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPci4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,void* p1, int32_t p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(SByte*)bool w_vtPi1(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPi1");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(SByte*, Int32, Int32)bool w_vtPi1i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPi1i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,void* p1, int32_t p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(SByte*, Int32, Int32, System.Text.Encoding)bool w_vtPi1i4i4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPi1i4i4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(void*,void* p1, int32_t p2, int32_t p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void Serialize(Int16 ByRef)bool w_vtPi2(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPi2");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Serialize(Int32 ByRef)bool w_vtPi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPi4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void GetPEKind(System.Reflection.PortableExecutableKinds ByRef, System.Reflection.ImageFileMachine ByRef)bool w_vtPi4Pi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPi4Pi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Pack(Int32 ByRef, Int32, Int32, Boolean)bool w_vtPi4i4i4b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPi4i4i4b");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,void* p1, int32_t p2, int32_t p3, bool p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void Deconstruct(Int64 ByRef, JetBrains.Rider.Model.Unity.LogEventType ByRef, JetBrains.Rider.Model.Unity.LogEventMode ByRef, System.String ByRef, System.String ByRef)bool w_vtPi8Pi4Pi4PsPs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPi8Pi4Pi4PsPs");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
     // LuaValToCSVal Ps
    Il2CppString* up4 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv4); // string ref
    Il2CppString** p4 = &up4;
        
     // LuaValToCSVal Ps
    Il2CppString* up5 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv5); // string ref
    Il2CppString** p5 = &up5;
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, void* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void ContinueVisitation(TContainer ByRef)bool w_vtPo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPo");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
     // LuaValToCSVal Po/PO
    Il2CppObject* up1 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv1)); // object ret
    Il2CppObject** p1 = &up1;
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Deconstruct(TKey ByRef, TValue ByRef)bool w_vtPoPo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPoPo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Po/PO
    Il2CppObject* up1 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv1)); // object ret
    Il2CppObject** p1 = &up1;
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up2 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv2)); // object ret
    Il2CppObject** p2 = &up2;
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetValue(TContainer ByRef, TValue)bool w_vtPoo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPoo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
     // LuaValToCSVal Po/PO
    Il2CppObject* up1 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv1)); // object ret
    Il2CppObject** p1 = &up1;
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,void* p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Serialize(Single ByRef)bool w_vtPr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPr4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void ToAngleAxis(Single ByRef, UnityEngine.Vector3 ByRef)bool w_vtPr4PS_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPr4PS_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
     // LuaValToCSVal Pstruct
    S_r4r4r4_* p2 = DataTransfer::GetPointer<S_r4r4r4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_r4r4r4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Serialize(Single ByRef, Single)bool w_vtPr4r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPr4r4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,void* p1, float p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Deconstruct(System.String ByRef, Int32 ByRef, Int32 ByRef)bool w_vtPsPi4Pi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPsPi4Pi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Ps
    Il2CppString* up1 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv1); // string ref
    Il2CppString** p1 = &up1;
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void Deconstruct(System.String ByRef, JetBrains.Rider.Model.Unity.BackendUnity.AssetFindUsagesResultBase[] ByRef)bool w_vtPsPo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPsPo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Ps
    Il2CppString* up1 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv1); // string ref
    Il2CppString** p1 = &up1;
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up2 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv2)); // object ret
    Il2CppObject** p2 = &up2;
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Deconstruct(System.String ByRef, System.Collections.Generic.List`1[System.String] ByRef, System.Collections.Generic.List`1[System.String] ByRef, System.Collections.Generic.List`1[System.String] ByRef)bool w_vtPsPoPoPo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPsPoPoPo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Ps
    Il2CppString* up1 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv1); // string ref
    Il2CppString** p1 = &up1;
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up2 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv2)); // object ret
    Il2CppObject** p2 = &up2;
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up3 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv3)); // object ret
    Il2CppObject** p3 = &up3;
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up4 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv4)); // object ret
    Il2CppObject** p4 = &up4;
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void Deconstruct(System.String ByRef, System.Collections.Generic.List`1[System.String] ByRef, System.String ByRef)bool w_vtPsPoPs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPsPoPs");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Ps
    Il2CppString* up1 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv1); // string ref
    Il2CppString** p1 = &up1;
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up2 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv2)); // object ret
    Il2CppObject** p2 = &up2;
        
     // LuaValToCSVal Ps
    Il2CppString* up3 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv3); // string ref
    Il2CppString** p3 = &up3;
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void ReadContentAsQualifiedName(System.String ByRef, System.String ByRef)bool w_vtPsPs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPsPs");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Ps
    Il2CppString* up1 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv1); // string ref
    Il2CppString** p1 = &up1;
        
     // LuaValToCSVal Ps
    Il2CppString* up2 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv2); // string ref
    Il2CppString** p2 = &up2;
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Deconstruct(System.String ByRef, System.String ByRef, System.String ByRef)bool w_vtPsPsPs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPsPsPs");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Ps
    Il2CppString* up1 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv1); // string ref
    Il2CppString** p1 = &up1;
        
     // LuaValToCSVal Ps
    Il2CppString* up2 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv2); // string ref
    Il2CppString** p2 = &up2;
        
     // LuaValToCSVal Ps
    Il2CppString* up3 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv3); // string ref
    Il2CppString** p3 = &up3;
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void Deconstruct(System.String ByRef, System.String ByRef, System.String ByRef, Int32 ByRef, JetBrains.Rider.Model.Unity.BackendUnity.Status ByRef, System.String ByRef)bool w_vtPsPsPsPi4Pi4Ps(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPsPsPsPi4Pi4Ps");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Ps
    Il2CppString* up1 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv1); // string ref
    Il2CppString** p1 = &up1;
        
     // LuaValToCSVal Ps
    Il2CppString* up2 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv2); // string ref
    Il2CppString** p2 = &up2;
        
     // LuaValToCSVal Ps
    Il2CppString* up3 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv3); // string ref
    Il2CppString** p3 = &up3;
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
     // LuaValToCSVal Ps
    Il2CppString* up6 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv6); // string ref
    Il2CppString** p6 = &up6;
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, void* p4, void* p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void Deconstruct(System.String ByRef, System.String ByRef, System.String ByRef, System.String ByRef, System.String ByRef, System.Nullable`1[System.Int32] ByRef)bool w_vtPsPsPsPsPsPN_bi4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPsPsPsPsPsPN_bi4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal Ps
    Il2CppString* up1 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv1); // string ref
    Il2CppString** p1 = &up1;
        
     // LuaValToCSVal Ps
    Il2CppString* up2 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv2); // string ref
    Il2CppString** p2 = &up2;
        
     // LuaValToCSVal Ps
    Il2CppString* up3 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv3); // string ref
    Il2CppString** p3 = &up3;
        
     // LuaValToCSVal Ps
    Il2CppString* up4 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv4); // string ref
    Il2CppString** p4 = &up4;
        
     // LuaValToCSVal Ps
    Il2CppString* up5 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv5); // string ref
    Il2CppString** p5 = &up5;
        
     // LuaValToCSVal Pstruct
    N_bi4_* p6 = DataTransfer::GetPointer<N_bi4_>(env, pesapi_unboxing(env, _sv6)); // valuetype ref
    N_bi4_ up6;
    if (!p6) {
        memset(&up6, 0, sizeof(p6));
    }
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, void* p4, void* p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void InitForConfiguration(System.String ByRef, System.String ByRef, System.String ByRef, System.Configuration.Internal.IInternalConfigRoot, System.Object[])bool w_vtPsPsPsoVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPsPsPsoVO");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal Ps
    Il2CppString* up1 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv1); // string ref
    Il2CppString** p1 = &up1;
        
     // LuaValToCSVal Ps
    Il2CppString* up2 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv2); // string ref
    Il2CppString** p2 = &up2;
        
     // LuaValToCSVal Ps
    Il2CppString* up3 = converter::Converter<std::reference_wrapper<Il2CppString*>>::toCpp(env, _sv3); // string ref
    Il2CppString** p3 = &up3;
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, Il2CppObject* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void set_PositionPointer(Byte*)bool w_vtPu1(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPu1");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void SetExceptions(Byte*, Int32)bool w_vtPu1i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPu1i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,void* p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Convert(Byte*, Int32, Char*, Int32, Boolean, Int32 ByRef, Int32 ByRef, Boolean ByRef)bool w_vtPu1i4Pci4bPi4Pi4Pb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPu1i4Pci4bPi4Pi4Pb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp6 = wrapData->TypeInfos[3];
    auto TIp7 = wrapData->TypeInfos[4];
    auto TIp8 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    if (checkLuaArgument) {
        if (lua_args_len != 8) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
 // LuaValToCSVal P any
    void* p7 = nullptr;        
        
 // LuaValToCSVal P any
    void* p8 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, int32_t p2, void* p3, int32_t p4, bool p5, void* p6, void* p7, void* p8, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7, p8,  method);
    

        return true;
}
// Void SetCode(Byte*, Int32, Int32)bool w_vtPu1i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPu1i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,void* p1, int32_t p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(Byte*, Int64)bool w_vtPu1i8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPu1i8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!!true) return false;                if (!converter::Converter<int64_t>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    int64_t p2 = converter::Converter<int64_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,void* p1, int64_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(Byte*, Int64, Int64, System.IO.FileAccess)bool w_vtPu1i8i8i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPu1i8i8i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!!true) return false;                if (!converter::Converter<int64_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
 // LuaValToCSVal P any
    int64_t p2 = converter::Converter<int64_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int64_t p3 = converter::Converter<int64_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,void* p1, int64_t p2, int64_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(Void*)bool w_vtPv(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPv");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!pesapi_is_binary(env, _sv1) && !pesapi_is_null(env, _sv1) && !pesapi_is_undefined(env, _sv1)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(Void*, System.Runtime.InteropServices.GCHandle, System.Buffers.IPinnable)bool w_vtPvDS_p_Do(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPvDS_p_Do");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!pesapi_is_binary(env, _sv1) && !pesapi_is_null(env, _sv1) && !pesapi_is_undefined(env, _sv1)) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(Void*, Int32)bool w_vtPvi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPvi4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!pesapi_is_binary(env, _sv1) && !pesapi_is_null(env, _sv1) && !pesapi_is_undefined(env, _sv1)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,void* p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Append(Void*, UInt64)bool w_vtPvu8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtPvu8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!pesapi_is_binary(env, _sv1) && !pesapi_is_null(env, _sv1) && !pesapi_is_undefined(env, _sv1)) return false;                if (!converter::Converter<uint64_t>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    void* p1 = DataTransfer::GetPointer<void>(env, _sv1);        
        
 // LuaValToCSVal P any
    uint64_t p2 = converter::Converter<uint64_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,void* p1, uint64_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(System.Buffers.ReadOnlySequence`1[T])bool w_vtS_OOi4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_OOi4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_OOi4i4_* pp1 = DataTransfer::GetPointer<S_OOi4i4_>(env, _sv1);
    S_OOi4i4_ p1 = pp1 ? *pp1 : S_OOi4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_OOi4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_Context(System.Runtime.Serialization.StreamingContext)bool w_vtS_Oi4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Oi4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_Oi4_* pp1 = DataTransfer::GetPointer<S_Oi4_>(env, _sv1);
    S_Oi4_ p1 = pp1 ? *pp1 : S_Oi4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_Oi4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(System.Runtime.Serialization.StreamingContext, Int32, Boolean, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.ISurrogateSelector)bool w_vtS_Oi4_i4bi4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Oi4_i4bi4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp5 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;            }
     // LuaValToCSVal struct
    S_Oi4_* pp1 = DataTransfer::GetPointer<S_Oi4_>(env, _sv1);
    S_Oi4_ p1 = pp1 ? *pp1 : S_Oi4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(void*,struct S_Oi4_ p1, int32_t p2, bool p3, int32_t p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void CopyTo(System.Memory`1[T])bool w_vtS_Oi4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Oi4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_Oi4i4_* pp1 = DataTransfer::GetPointer<S_Oi4i4_>(env, _sv1);
    S_Oi4i4_ p1 = pp1 ? *pp1 : S_Oi4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_Oi4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(System.ReadOnlyMemory`1[System.Byte], Boolean)bool w_vtS_Oi4i4_Db(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Oi4i4_Db");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_Oi4i4_* pp1 = DataTransfer::GetPointer<S_Oi4i4_>(env, _sv1);
    S_Oi4i4_ p1 = pp1 ? *pp1 : S_Oi4i4_ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_Oi4i4_ p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void CopyFrom(Unity.Collections.NativeSlice`1[T])bool w_vtS_Pu1i4i4i4i4S_pi4i4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Pu1i4i4i4i4S_pi4i4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_Pu1i4i4i4i4S_pi4i4__* pp1 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, _sv1);
    S_Pu1i4i4i4i4S_pi4i4__ p1 = pp1 ? *pp1 : S_Pu1i4i4i4i4S_pi4i4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_Pu1i4i4i4i4S_pi4i4__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void MoveLocationsInSameAreas(Unity.Collections.NativeSlice`1[UnityEngine.Experimental.AI.NavMeshLocation], Unity.Collections.NativeSlice`1[UnityEngine.Vector3], Int32)bool w_vtS_Pu1i4i4i4i4S_pi4i4__S_Pu1i4i4i4i4S_pi4i4__Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Pu1i4i4i4i4S_pi4i4__S_Pu1i4i4i4i4S_pi4i4__Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_Pu1i4i4i4i4S_pi4i4__* pp1 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, _sv1);
    S_Pu1i4i4i4i4S_pi4i4__ p1 = pp1 ? *pp1 : S_Pu1i4i4i4i4S_pi4i4__ {};
        
     // LuaValToCSVal struct
    S_Pu1i4i4i4i4S_pi4i4__* pp2 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, _sv2);
    S_Pu1i4i4i4i4S_pi4i4__ p2 = pp2 ? *pp2 : S_Pu1i4i4i4i4S_pi4i4__ {};
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_Pu1i4i4i4i4S_pi4i4__ p1, struct S_Pu1i4i4i4i4S_pi4i4__ p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void MoveLocations(Unity.Collections.NativeSlice`1[UnityEngine.Experimental.AI.NavMeshLocation], Unity.Collections.NativeSlice`1[UnityEngine.Vector3], Unity.Collections.NativeSlice`1[System.Int32])bool w_vtS_Pu1i4i4i4i4S_pi4i4__S_Pu1i4i4i4i4S_pi4i4__S_Pu1i4i4i4i4S_pi4i4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Pu1i4i4i4i4S_pi4i4__S_Pu1i4i4i4i4S_pi4i4__S_Pu1i4i4i4i4S_pi4i4__");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal struct
    S_Pu1i4i4i4i4S_pi4i4__* pp1 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, _sv1);
    S_Pu1i4i4i4i4S_pi4i4__ p1 = pp1 ? *pp1 : S_Pu1i4i4i4i4S_pi4i4__ {};
        
     // LuaValToCSVal struct
    S_Pu1i4i4i4i4S_pi4i4__* pp2 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, _sv2);
    S_Pu1i4i4i4i4S_pi4i4__ p2 = pp2 ? *pp2 : S_Pu1i4i4i4i4S_pi4i4__ {};
        
     // LuaValToCSVal struct
    S_Pu1i4i4i4i4S_pi4i4__* pp3 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, _sv3);
    S_Pu1i4i4i4i4S_pi4i4__ p3 = pp3 ? *pp3 : S_Pu1i4i4i4i4S_pi4i4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_Pu1i4i4i4i4S_pi4i4__ p1, struct S_Pu1i4i4i4i4S_pi4i4__ p2, struct S_Pu1i4i4i4i4S_pi4i4__ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(Unity.Collections.NativeSlice`1[T], Int32)bool w_vtS_Pu1i4i4i4i4S_pi4i4__i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Pu1i4i4i4i4S_pi4i4__i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_Pu1i4i4i4i4S_pi4i4__* pp1 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, _sv1);
    S_Pu1i4i4i4i4S_pi4i4__ p1 = pp1 ? *pp1 : S_Pu1i4i4i4i4S_pi4i4__ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_Pu1i4i4i4i4S_pi4i4__ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(Unity.Collections.NativeSlice`1[T], Int32, Int32)bool w_vtS_Pu1i4i4i4i4S_pi4i4__i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Pu1i4i4i4i4S_pi4i4__i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_Pu1i4i4i4i4S_pi4i4__* pp1 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, _sv1);
    S_Pu1i4i4i4i4S_pi4i4__ p1 = pp1 ? *pp1 : S_Pu1i4i4i4i4S_pi4i4__ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_Pu1i4i4i4i4S_pi4i4__ p1, int32_t p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(ReadOnly)bool w_vtS_Pvi4S_pi4i4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Pvi4S_pi4i4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_Pvi4S_pi4i4__* pp1 = DataTransfer::GetPointer<S_Pvi4S_pi4i4__>(env, _sv1);
    S_Pvi4S_pi4i4__ p1 = pp1 ? *pp1 : S_Pvi4S_pi4i4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_Pvi4S_pi4i4__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void GetInternalAvatarPose(Unity.Collections.NativeArray`1[System.Single])bool w_vtS_Pvi4i4i4S_pi4i4_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Pvi4i4i4S_pi4i4_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp1 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv1);
    S_Pvi4i4i4S_pi4i4_i4_ p1 = pp1 ? *pp1 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_Pvi4i4i4S_pi4i4_i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void BeginSubPass(Unity.Collections.NativeArray`1[System.Int32], Boolean)bool w_vtS_Pvi4i4i4S_pi4i4_i4_Db(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Pvi4i4i4S_pi4i4_i4_Db");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp1 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv1);
    S_Pvi4i4i4S_pi4i4_i4_ p1 = pp1 ? *pp1 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_Pvi4i4i4S_pi4i4_i4_ p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetBoneWeights(Unity.Collections.NativeArray`1[System.Byte], Unity.Collections.NativeArray`1[UnityEngine.BoneWeight1])bool w_vtS_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp1 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv1);
    S_Pvi4i4i4S_pi4i4_i4_ p1 = pp1 ? *pp1 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp2 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv2);
    S_Pvi4i4i4S_pi4i4_i4_ p2 = pp2 ? *pp2 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_Pvi4i4i4S_pi4i4_i4_ p1, struct S_Pvi4i4i4S_pi4i4_i4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void BeginSubPass(Unity.Collections.NativeArray`1[System.Int32], Unity.Collections.NativeArray`1[System.Int32], Boolean)bool w_vtS_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_Db(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_Db");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp1 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv1);
    S_Pvi4i4i4S_pi4i4_i4_ p1 = pp1 ? *pp1 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp2 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv2);
    S_Pvi4i4i4S_pi4i4_i4_ p2 = pp2 ? *pp2 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_Pvi4i4i4S_pi4i4_i4_ p1, struct S_Pvi4i4i4S_pi4i4_i4_ p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void CalculateInterpolatedLightAndOcclusionProbes(Unity.Collections.NativeArray`1[UnityEngine.Vector3], Unity.Collections.NativeArray`1[System.Int32], Unity.Collections.NativeArray`1[UnityEngine.Rendering.SphericalHarmonicsL2], Unity.Collections.NativeArray`1[UnityEngine.Vector4])bool w_vtS_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;            }
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp1 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv1);
    S_Pvi4i4i4S_pi4i4_i4_ p1 = pp1 ? *pp1 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp2 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv2);
    S_Pvi4i4i4S_pi4i4_i4_ p2 = pp2 ? *pp2 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp3 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv3);
    S_Pvi4i4i4S_pi4i4_i4_ p3 = pp3 ? *pp3 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp4 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv4);
    S_Pvi4i4i4S_pi4i4_i4_ p4 = pp4 ? *pp4 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_Pvi4i4i4S_pi4i4_i4_ p1, struct S_Pvi4i4i4S_pi4i4_i4_ p2, struct S_Pvi4i4i4S_pi4i4_i4_ p3, struct S_Pvi4i4i4S_pi4i4_i4_ p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void BeginSubPass(Unity.Collections.NativeArray`1[System.Int32], Unity.Collections.NativeArray`1[System.Int32], Boolean, Boolean)bool w_vtS_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_bb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_bb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp1 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv1);
    S_Pvi4i4i4S_pi4i4_i4_ p1 = pp1 ? *pp1 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp2 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv2);
    S_Pvi4i4i4S_pi4i4_i4_ p2 = pp2 ? *pp2 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_Pvi4i4i4S_pi4i4_i4_ p1, struct S_Pvi4i4i4S_pi4i4_i4_ p2, bool p3, bool p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetCustomShape(Unity.Collections.NativeArray`1[UnityEngine.PhysicsShape2D], Unity.Collections.NativeArray`1[UnityEngine.Vector2], Int32, Int32)bool w_vtS_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp1 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv1);
    S_Pvi4i4i4S_pi4i4_i4_ p1 = pp1 ? *pp1 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp2 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv2);
    S_Pvi4i4i4S_pi4i4_i4_ p2 = pp2 ? *pp2 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_Pvi4i4i4S_pi4i4_i4_ p1, struct S_Pvi4i4i4S_pi4i4_i4_ p2, int32_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(Unity.Collections.NativeArray`1[System.Byte], Boolean)bool w_vtS_Pvi4i4i4S_pi4i4_i4_b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Pvi4i4i4S_pi4i4_i4_b");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp1 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv1);
    S_Pvi4i4i4S_pi4i4_i4_ p1 = pp1 ? *pp1 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_Pvi4i4i4S_pi4i4_i4_ p1, bool p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void BeginSubPass(Unity.Collections.NativeArray`1[System.Int32], Boolean, Boolean)bool w_vtS_Pvi4i4i4S_pi4i4_i4_bb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Pvi4i4i4S_pi4i4_i4_bb");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp1 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv1);
    S_Pvi4i4i4S_pi4i4_i4_ p1 = pp1 ? *pp1 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_Pvi4i4i4S_pi4i4_i4_ p1, bool p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void SetParticles(Unity.Collections.NativeArray`1[UnityEngine.ParticleSystem+Particle], Int32)bool w_vtS_Pvi4i4i4S_pi4i4_i4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Pvi4i4i4S_pi4i4_i4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp1 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv1);
    S_Pvi4i4i4S_pi4i4_i4_ p1 = pp1 ? *pp1 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_Pvi4i4i4S_pi4i4_i4_ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetParticles(Unity.Collections.NativeArray`1[UnityEngine.ParticleSystem+Particle], Int32, Int32)bool w_vtS_Pvi4i4i4S_pi4i4_i4_i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_Pvi4i4i4S_pi4i4_i4_i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp1 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv1);
    S_Pvi4i4i4S_pi4i4_i4_ p1 = pp1 ? *pp1 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_Pvi4i4i4S_pi4i4_i4_ p1, int32_t p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void Emit(EmitParams, Int32)bool w_vtS_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_bbbbbbbbbbb_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_bbbbbbbbbbb_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_bbbbbbbbbbb_* pp1 = DataTransfer::GetPointer<S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_bbbbbbbbbbb_>(env, _sv1);
    S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_bbbbbbbbbbb_ p1 = pp1 ? *pp1 : S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_bbbbbbbbbbb_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_bbbbbbbbbbb_ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetEventDurationBasedOnCurrentTime(Bee.Core.TraceEvent)bool w_vtS_S_i4i4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_i4i4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_i4i4__* pp1 = DataTransfer::GetPointer<S_S_i4i4__>(env, _sv1);
    S_S_i4i4__ p1 = pp1 ? *pp1 : S_S_i4i4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_i4i4__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void SetEventDurationBasedOnEndTime(Bee.Core.TraceEvent, System.DateTimeOffset)bool w_vtS_S_i4i4__S_S_u8_i2_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_i4i4__S_S_u8_i2_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_S_i4i4__* pp1 = DataTransfer::GetPointer<S_S_i4i4__>(env, _sv1);
    S_S_i4i4__ p1 = pp1 ? *pp1 : S_S_i4i4__ {};
        
     // LuaValToCSVal struct
    S_S_u8_i2_* pp2 = DataTransfer::GetPointer<S_S_u8_i2_>(env, _sv2);
    S_S_u8_i2_ p2 = pp2 ? *pp2 : S_S_u8_i2_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_i4i4__ p1, struct S_S_u8_i2_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetEventDuration(Bee.Core.TraceEvent, System.TimeSpan)bool w_vtS_S_i4i4__S_i8_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_i4i4__S_i8_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_S_i4i4__* pp1 = DataTransfer::GetPointer<S_S_i4i4__>(env, _sv1);
    S_S_i4i4__ p1 = pp1 ? *pp1 : S_S_i4i4__ {};
        
     // LuaValToCSVal struct
    S_i8_* pp2 = DataTransfer::GetPointer<S_i8_>(env, _sv2);
    S_i8_ p2 = pp2 ? *pp2 : S_i8_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_i4i4__ p1, struct S_i8_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void ClampToBounds(UnityEngine.BoundsInt)bool w_vtS_S_i4i4i4_S_i4i4i4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_i4i4i4_S_i4i4i4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_i4i4i4_S_i4i4i4__* pp1 = DataTransfer::GetPointer<S_S_i4i4i4_S_i4i4i4__>(env, _sv1);
    S_S_i4i4i4_S_i4i4i4__ p1 = pp1 ? *pp1 : S_S_i4i4i4_S_i4i4i4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_i4i4i4_S_i4i4i4__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void SetTilesBlock(UnityEngine.BoundsInt, UnityEngine.Tilemaps.TileBase[])bool w_vtS_S_i4i4i4_S_i4i4i4__o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_i4i4i4_S_i4i4i4__o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
     // LuaValToCSVal struct
    S_S_i4i4i4_S_i4i4i4__* pp1 = DataTransfer::GetPointer<S_S_i4i4i4_S_i4i4i4__>(env, _sv1);
    S_S_i4i4i4_S_i4i4i4__ p1 = pp1 ? *pp1 : S_S_i4i4i4_S_i4i4i4__ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,struct S_S_i4i4i4_S_i4i4i4__ p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetTile(UnityEngine.Tilemaps.TileChangeData, Boolean)bool w_vtS_S_i4i4i4_oS_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_i4i4i4_oS_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__b");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_S_i4i4i4_oS_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__* pp1 = DataTransfer::GetPointer<S_S_i4i4i4_oS_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__>(env, _sv1);
    S_S_i4i4i4_oS_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__ p1 = pp1 ? *pp1 : S_S_i4i4i4_oS_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__ {};
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_S_i4i4i4_oS_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__ p1, bool p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void set_Path(Unity.Properties.PropertyPath)bool w_vtS_S_i4si4O_S_i4si4O_S_i4si4O_S_i4si4O_i4oi4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_i4si4O_S_i4si4O_S_i4si4O_S_i4si4O_i4oi4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_i4si4O_S_i4si4O_S_i4si4O_S_i4si4O_i4oi4_* pp1 = DataTransfer::GetPointer<S_S_i4si4O_S_i4si4O_S_i4si4O_S_i4si4O_i4oi4_>(env, _sv1);
    S_S_i4si4O_S_i4si4O_S_i4si4O_S_i4si4O_i4oi4_ p1 = pp1 ? *pp1 : S_S_i4si4O_S_i4si4O_S_i4si4O_S_i4si4O_i4oi4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_i4si4O_S_i4si4O_S_i4si4O_S_i4si4O_i4oi4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void ImportParameters(System.Security.Cryptography.ECParameters)bool w_vtS_S_oo_oS_ooS_oo_oooi4N_bS_s__ooo__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_oo_oS_ooS_oo_oooi4N_bS_s__ooo__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_oo_oS_ooS_oo_oooi4N_bS_s__ooo__* pp1 = DataTransfer::GetPointer<S_S_oo_oS_ooS_oo_oooi4N_bS_s__ooo__>(env, _sv1);
    S_S_oo_oS_ooS_oo_oooi4N_bS_s__ooo__ p1 = pp1 ? *pp1 : S_S_oo_oS_ooS_oo_oooi4N_bS_s__ooo__ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_oo_oS_ooS_oo_oooi4N_bS_s__ooo__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void NextBytes(System.Span`1[System.Byte])bool w_vtS_S_p_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_p_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_p_i4_* pp1 = DataTransfer::GetPointer<S_S_p_i4_>(env, _sv1);
    S_S_p_i4_ p1 = pp1 ? *pp1 : S_S_p_i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_p_i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(System.ReadOnlySpan`1[System.Byte], Boolean, Boolean)bool w_vtS_S_p_i4_DbDb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_p_i4_DbDb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_S_p_i4_* pp1 = DataTransfer::GetPointer<S_S_p_i4_>(env, _sv1);
    S_S_p_i4_ p1 = pp1 ? *pp1 : S_S_p_i4_ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_S_p_i4_ p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void ImportPkcs8PrivateKey(System.ReadOnlySpan`1[System.Byte], Int32 ByRef)bool w_vtS_S_p_i4_Pi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_p_i4_Pi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_S_p_i4_* pp1 = DataTransfer::GetPointer<S_S_p_i4_>(env, _sv1);
    S_S_p_i4_ p1 = pp1 ? *pp1 : S_S_p_i4_ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_S_p_i4_ p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void TransformDirections(System.ReadOnlySpan`1[UnityEngine.Vector3], System.Span`1[UnityEngine.Vector3])bool w_vtS_S_p_i4_S_S_p_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_p_i4_S_S_p_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_S_p_i4_* pp1 = DataTransfer::GetPointer<S_S_p_i4_>(env, _sv1);
    S_S_p_i4_ p1 = pp1 ? *pp1 : S_S_p_i4_ {};
        
     // LuaValToCSVal struct
    S_S_p_i4_* pp2 = DataTransfer::GetPointer<S_S_p_i4_>(env, _sv2);
    S_S_p_i4_ p2 = pp2 ? *pp2 : S_S_p_i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_p_i4_ p1, struct S_S_p_i4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan`1[System.Byte], System.ReadOnlySpan`1[System.Byte], Int32 ByRef)bool w_vtS_S_p_i4_S_S_p_i4_Pi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_p_i4_S_S_p_i4_Pi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_S_p_i4_* pp1 = DataTransfer::GetPointer<S_S_p_i4_>(env, _sv1);
    S_S_p_i4_ p1 = pp1 ? *pp1 : S_S_p_i4_ {};
        
     // LuaValToCSVal struct
    S_S_p_i4_* pp2 = DataTransfer::GetPointer<S_S_p_i4_>(env, _sv2);
    S_S_p_i4_ p2 = pp2 ? *pp2 : S_S_p_i4_ {};
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_S_p_i4_ p1, struct S_S_p_i4_ p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void Decrypt(System.ReadOnlySpan`1[System.Byte], System.ReadOnlySpan`1[System.Byte], System.ReadOnlySpan`1[System.Byte], System.Span`1[System.Byte], System.ReadOnlySpan`1[System.Byte])bool w_vtS_S_p_i4_S_S_p_i4_S_S_p_i4_S_S_p_i4_DS_S_p_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_p_i4_S_S_p_i4_S_S_p_i4_S_S_p_i4_DS_S_p_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_S_p_i4_* pp1 = DataTransfer::GetPointer<S_S_p_i4_>(env, _sv1);
    S_S_p_i4_ p1 = pp1 ? *pp1 : S_S_p_i4_ {};
        
     // LuaValToCSVal struct
    S_S_p_i4_* pp2 = DataTransfer::GetPointer<S_S_p_i4_>(env, _sv2);
    S_S_p_i4_ p2 = pp2 ? *pp2 : S_S_p_i4_ {};
        
     // LuaValToCSVal struct
    S_S_p_i4_* pp3 = DataTransfer::GetPointer<S_S_p_i4_>(env, _sv3);
    S_S_p_i4_ p3 = pp3 ? *pp3 : S_S_p_i4_ {};
        
     // LuaValToCSVal struct
    S_S_p_i4_* pp4 = DataTransfer::GetPointer<S_S_p_i4_>(env, _sv4);
    S_S_p_i4_ p4 = pp4 ? *pp4 : S_S_p_i4_ {};
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_S_p_i4_ p1, struct S_S_p_i4_ p2, struct S_S_p_i4_ p3, struct S_S_p_i4_ p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Convert(System.ReadOnlySpan`1[System.Byte], System.Span`1[System.Char], Boolean, Int32 ByRef, Int32 ByRef, Boolean ByRef)bool w_vtS_S_p_i4_S_S_p_i4_bPi4Pi4Pb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_p_i4_S_S_p_i4_bPi4Pi4Pb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_S_p_i4_* pp1 = DataTransfer::GetPointer<S_S_p_i4_>(env, _sv1);
    S_S_p_i4_ p1 = pp1 ? *pp1 : S_S_p_i4_ {};
        
     // LuaValToCSVal struct
    S_S_p_i4_* pp2 = DataTransfer::GetPointer<S_S_p_i4_>(env, _sv2);
    S_S_p_i4_ p2 = pp2 ? *pp2 : S_S_p_i4_ {};
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_S_p_i4_ p1, struct S_S_p_i4_ p2, bool p3, void* p4, void* p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void SealWithMac(System.ReadOnlySpan`1[System.Char], System.Security.Cryptography.HashAlgorithmName, Int32)bool w_vtS_S_p_i4_S_s_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_p_i4_S_s_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_S_p_i4_* pp1 = DataTransfer::GetPointer<S_S_p_i4_>(env, _sv1);
    S_S_p_i4_ p1 = pp1 ? *pp1 : S_S_p_i4_ {};
        
     // LuaValToCSVal struct
    S_s_* pp2 = DataTransfer::GetPointer<S_s_>(env, _sv2);
    S_s_ p2 = pp2 ? *pp2 : S_s_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_S_p_i4_ p1, struct S_s_ p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(System.ReadOnlySpan`1[System.Byte], Int64)bool w_vtS_S_p_i4_i8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_p_i4_i8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_S_p_i4_* pp1 = DataTransfer::GetPointer<S_S_p_i4_>(env, _sv1);
    S_S_p_i4_ p1 = pp1 ? *pp1 : S_S_p_i4_ {};
        
 // LuaValToCSVal P any
    int64_t p2 = converter::Converter<int64_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_S_p_i4_ p1, int64_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetValueDirect(TypedReference, System.Object)bool w_vtS_S_p_pp_O(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_p_pp_O");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                            }
     // LuaValToCSVal struct
    S_S_p_pp_* pp1 = DataTransfer::GetPointer<S_S_p_pp_>(env, _sv1);
    S_S_p_pp_ p1 = pp1 ? *pp1 : S_S_p_pp_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,struct S_S_p_pp_ p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void OnGraphStart(UnityEngine.Playables.Playable)bool w_vtS_S_pu4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_pu4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_pu4__* pp1 = DataTransfer::GetPointer<S_S_pu4__>(env, _sv1);
    S_S_pu4__ p1 = pp1 ? *pp1 : S_S_pu4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_pu4__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void OnBehaviourDelay(UnityEngine.Playables.Playable, UnityEngine.Playables.FrameData)bool w_vtS_S_pu4__S_u8r8r4r4r8r4r4i4S_S_pu4___(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_pu4__S_u8r8r4r4r8r4r4i4S_S_pu4___");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_S_pu4__* pp1 = DataTransfer::GetPointer<S_S_pu4__>(env, _sv1);
    S_S_pu4__ p1 = pp1 ? *pp1 : S_S_pu4__ {};
        
     // LuaValToCSVal struct
    S_u8r8r4r4r8r4r4i4S_S_pu4___* pp2 = DataTransfer::GetPointer<S_u8r8r4r4r8r4r4i4S_S_pu4___>(env, _sv2);
    S_u8r8r4r4r8r4r4i4S_S_pu4___ p2 = pp2 ? *pp2 : S_u8r8r4r4r8r4r4i4S_S_pu4___ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_pu4__ p1, struct S_u8r8r4r4r8r4r4i4S_S_pu4___ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void ProcessFrame(UnityEngine.Playables.Playable, UnityEngine.Playables.FrameData, System.Object)bool w_vtS_S_pu4__S_u8r8r4r4r8r4r4i4S_S_pu4___O(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_pu4__S_u8r8r4r4r8r4r4i4S_S_pu4___O");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                            }
     // LuaValToCSVal struct
    S_S_pu4__* pp1 = DataTransfer::GetPointer<S_S_pu4__>(env, _sv1);
    S_S_pu4__ p1 = pp1 ? *pp1 : S_S_pu4__ {};
        
     // LuaValToCSVal struct
    S_u8r8r4r4r8r4r4i4S_S_pu4___* pp2 = DataTransfer::GetPointer<S_u8r8r4r4r8r4r4i4S_S_pu4___>(env, _sv2);
    S_u8r8r4r4r8r4r4i4S_S_pu4___ p2 = pp2 ? *pp2 : S_u8r8r4r4r8r4r4i4S_S_pu4___ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,struct S_S_pu4__ p1, struct S_u8r8r4r4r8r4r4i4S_S_pu4___ p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void set_jointPosition(UnityEngine.ArticulationReducedSpace)bool w_vtS_S_r4_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_r4_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_r4_i4_* pp1 = DataTransfer::GetPointer<S_S_r4_i4_>(env, _sv1);
    S_S_r4_i4_ p1 = pp1 ? *pp1 : S_S_r4_i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_r4_i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_value(UnityEngine.UIElements.TransformOrigin)bool w_vtS_S_r4i4_S_r4i4_r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_r4i4_S_r4i4_r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_r4i4_S_r4i4_r4_* pp1 = DataTransfer::GetPointer<S_S_r4i4_S_r4i4_r4_>(env, _sv1);
    S_S_r4i4_S_r4i4_r4_ p1 = pp1 ? *pp1 : S_S_r4i4_S_r4i4_r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_r4i4_S_r4i4_r4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_value(UnityEngine.UIElements.Translate)bool w_vtS_S_r4i4_S_r4i4_r4b_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_r4i4_S_r4i4_r4b_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_r4i4_S_r4i4_r4b_* pp1 = DataTransfer::GetPointer<S_S_r4i4_S_r4i4_r4b_>(env, _sv1);
    S_S_r4i4_S_r4i4_r4b_ p1 = pp1 ? *pp1 : S_S_r4i4_S_r4i4_r4b_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_r4i4_S_r4i4_r4b_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_value(UnityEngine.UIElements.Rotate)bool w_vtS_S_r4i4_S_r4r4r4_b_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_r4i4_S_r4r4r4_b_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_r4i4_S_r4r4r4_b_* pp1 = DataTransfer::GetPointer<S_S_r4i4_S_r4r4r4_b_>(env, _sv1);
    S_S_r4i4_S_r4r4r4_b_ p1 = pp1 ? *pp1 : S_S_r4i4_S_r4r4r4_b_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_r4i4_S_r4r4r4_b_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_value(UnityEngine.UIElements.TextShadow)bool w_vtS_S_r4r4_r4S_r4r4r4r4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_r4r4_r4S_r4r4r4r4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_r4r4_r4S_r4r4r4r4__* pp1 = DataTransfer::GetPointer<S_S_r4r4_r4S_r4r4r4r4__>(env, _sv1);
    S_S_r4r4_r4S_r4r4r4r4__ p1 = pp1 ? *pp1 : S_S_r4r4_r4S_r4r4r4r4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_r4r4_r4S_r4r4r4r4__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void SetNextVertex(UnityEngine.UIElements.Vertex)bool w_vtS_S_r4r4r4_S_i4u1u1u1u1_S_r4r4_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_r4r4r4r4_r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_r4r4r4_S_i4u1u1u1u1_S_r4r4_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_r4r4r4r4_r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_r4r4r4_S_i4u1u1u1u1_S_r4r4_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_r4r4r4r4_r4_* pp1 = DataTransfer::GetPointer<S_S_r4r4r4_S_i4u1u1u1u1_S_r4r4_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_r4r4r4r4_r4_>(env, _sv1);
    S_S_r4r4r4_S_i4u1u1u1u1_S_r4r4_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_r4r4r4r4_r4_ p1 = pp1 ? *pp1 : S_S_r4r4r4_S_i4u1u1u1u1_S_r4r4_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_r4r4r4r4_r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_r4r4r4_S_i4u1u1u1u1_S_r4r4_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_i4u1u1u1u1_S_r4r4r4r4_r4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Emit(Particle)bool w_vtS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_* pp1 = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_>(env, _sv1);
    S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_ p1 = pp1 ? *pp1 : S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void AddVert(UnityEngine.UIVertex)bool w_vtS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__* pp1 = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__>(env, _sv1);
    S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__ p1 = pp1 ? *pp1 : S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void SetUIVertex(UnityEngine.UIVertex, Int32)bool w_vtS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__* pp1 = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__>(env, _sv1);
    S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__ p1 = pp1 ? *pp1 : S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4__ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void set_localBounds(UnityEngine.Bounds)bool w_vtS_S_r4r4r4_S_r4r4r4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_r4r4r4_S_r4r4r4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_r4r4r4_S_r4r4r4__* pp1 = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4__>(env, _sv1);
    S_S_r4r4r4_S_r4r4r4__ p1 = pp1 ? *pp1 : S_S_r4r4r4_S_r4r4r4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_r4r4r4_S_r4r4r4__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Frame(UnityEngine.Bounds, Boolean, Boolean)bool w_vtS_S_r4r4r4_S_r4r4r4__bb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_r4r4r4_S_r4r4r4__bb");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_S_r4r4r4_S_r4r4r4__* pp1 = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4__>(env, _sv1);
    S_S_r4r4r4_S_r4r4r4__ p1 = pp1 ? *pp1 : S_S_r4r4r4_S_r4r4r4__ {};
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_S_r4r4r4_S_r4r4r4__ p1, bool p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void set_value(UnityEngine.UIElements.Scale)bool w_vtS_S_r4r4r4_b_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_r4r4r4_b_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_r4r4r4_b_* pp1 = DataTransfer::GetPointer<S_S_r4r4r4_b_>(env, _sv1);
    S_S_r4r4r4_b_ p1 = pp1 ? *pp1 : S_S_r4r4r4_b_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_r4r4r4_b_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void AddTreeInstance(UnityEngine.TreeInstance)bool w_vtS_S_r4r4r4_r4r4r4S_i4u1u1u1u1_S_i4u1u1u1u1_i4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_r4r4r4_r4r4r4S_i4u1u1u1u1_S_i4u1u1u1u1_i4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_r4r4r4_r4r4r4S_i4u1u1u1u1_S_i4u1u1u1u1_i4r4_* pp1 = DataTransfer::GetPointer<S_S_r4r4r4_r4r4r4S_i4u1u1u1u1_S_i4u1u1u1u1_i4r4_>(env, _sv1);
    S_S_r4r4r4_r4r4r4S_i4u1u1u1u1_S_i4u1u1u1u1_i4r4_ p1 = pp1 ? *pp1 : S_S_r4r4r4_r4r4r4S_i4u1u1u1u1_S_i4u1u1u1u1_i4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_r4r4r4_r4r4r4S_i4u1u1u1u1_S_i4u1u1u1u1_i4r4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_cameraProperties(UnityEngine.Rendering.CameraProperties)bool w_vtS_S_r4r4r4r4_S_r4r4r4_r4r4r4r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4u4S_u1_S_u1_r4S_r4r4r4_S_r4_i4S_i4u4i4_u4i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_r4r4r4r4_S_r4r4r4_r4r4r4r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4u4S_u1_S_u1_r4S_r4r4r4_S_r4_i4S_i4u4i4_u4i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_r4r4r4r4_S_r4r4r4_r4r4r4r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4u4S_u1_S_u1_r4S_r4r4r4_S_r4_i4S_i4u4i4_u4i4i4_* pp1 = DataTransfer::GetPointer<S_S_r4r4r4r4_S_r4r4r4_r4r4r4r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4u4S_u1_S_u1_r4S_r4r4r4_S_r4_i4S_i4u4i4_u4i4i4_>(env, _sv1);
    S_S_r4r4r4r4_S_r4r4r4_r4r4r4r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4u4S_u1_S_u1_r4S_r4r4r4_S_r4_i4S_i4u4i4_u4i4i4_ p1 = pp1 ? *pp1 : S_S_r4r4r4r4_S_r4r4r4_r4r4r4r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4u4S_u1_S_u1_r4S_r4r4r4_S_r4_i4S_i4u4i4_u4i4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_r4r4r4r4_S_r4r4r4_r4r4r4r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_r4u4S_u1_S_u1_r4S_r4r4r4_S_r4_i4S_i4u4i4_u4i4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_colors(UnityEngine.UI.ColorBlock)bool w_vtS_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4_* pp1 = DataTransfer::GetPointer<S_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4_>(env, _sv1);
    S_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4_ p1 = pp1 ? *pp1 : S_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_r4r4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_sortingSettings(UnityEngine.Rendering.SortingSettings)bool w_vtS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_* pp1 = DataTransfer::GetPointer<S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_>(env, _sv1);
    S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_ p1 = pp1 ? *pp1 : S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_blendState(UnityEngine.Rendering.BlendState)bool w_vtS_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_* pp1 = DataTransfer::GetPointer<S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_>(env, _sv1);
    S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_ p1 = pp1 ? *pp1 : S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_serializationObject(UnityEditor.Build.Content.ObjectIdentifier)bool w_vtS_S_u4u4u4u4_i8i4s_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_u4u4u4u4_i8i4s_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_u4u4u4u4_i8i4s_* pp1 = DataTransfer::GetPointer<S_S_u4u4u4u4_i8i4s_>(env, _sv1);
    S_S_u4u4u4u4_i8i4s_ p1 = pp1 ? *pp1 : S_S_u4u4u4u4_i8i4s_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_u4u4u4u4_i8i4s_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void DependsOnArtifact(UnityEditor.Experimental.ArtifactKey)bool w_vtS_S_u4u4u4u4_o_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_u4u4u4u4_o_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_u4u4u4u4_o_* pp1 = DataTransfer::GetPointer<S_S_u4u4u4u4_o_>(env, _sv1);
    S_S_u4u4u4u4_o_ p1 = pp1 ? *pp1 : S_S_u4u4u4u4_o_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_u4u4u4u4_o_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void WriteValue(System.DateTimeOffset)bool w_vtS_S_u8_i2_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_u8_i2_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_S_u8_i2_* pp1 = DataTransfer::GetPointer<S_S_u8_i2_>(env, _sv1);
    S_S_u8_i2_ p1 = pp1 ? *pp1 : S_S_u8_i2_ {};
        
    typedef void (*FuncToCall)(void*,struct S_S_u8_i2_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(UnityEditor.GlobalObjectId, UnityEngine.Object, System.Type)bool w_vtS_S_u8u8_S_u4u4u4u4_i4_DoDo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_u8u8_S_u4u4u4u4_i4_DoDo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_S_u8u8_S_u4u4u4u4_i4_* pp1 = DataTransfer::GetPointer<S_S_u8u8_S_u4u4u4u4_i4_>(env, _sv1);
    S_S_u8u8_S_u4u4u4u4_i4_ p1 = pp1 ? *pp1 : S_S_u8u8_S_u4u4u4u4_i4_ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_S_u8u8_S_u4u4u4u4_i4_ p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void Tick(UnityEditor.Experimental.Rendering.SceneStateHash, UnityEditor.Experimental.Rendering.IScriptableBakedReflectionSystemStageNotifier)bool w_vtS_S_u8u8_S_u8u8_S_u8u8__o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_S_u8u8_S_u8u8_S_u8u8__o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
     // LuaValToCSVal struct
    S_S_u8u8_S_u8u8_S_u8u8__* pp1 = DataTransfer::GetPointer<S_S_u8u8_S_u8u8_S_u8u8__>(env, _sv1);
    S_S_u8u8_S_u8u8_S_u8u8__ p1 = pp1 ? *pp1 : S_S_u8u8_S_u8u8_S_u8u8__ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,struct S_S_u8u8_S_u8u8_S_u8u8__ p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void set_viewID(UnityEngine.NetworkViewID)bool w_vtS__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S__* pp1 = DataTransfer::GetPointer<S__>(env, _sv1);
    S__ p1 = pp1 ? *pp1 : S__ {};
        
    typedef void (*FuncToCall)(void*,struct S__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void WaitOnGPUFence(UnityEngine.Rendering.GPUFence, UnityEngine.Rendering.SynchronisationStage)bool w_vtS__i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS__i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S__* pp1 = DataTransfer::GetPointer<S__>(env, _sv1);
    S__ p1 = pp1 ? *pp1 : S__ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S__ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Optimize(UnityEditor.Search.QueryGraphOptimizationOptions)bool w_vtS_bbb_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_bbb_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_bbb_* pp1 = DataTransfer::GetPointer<S_bbb_>(env, _sv1);
    S_bbb_ p1 = pp1 ? *pp1 : S_bbb_ {};
        
    typedef void (*FuncToCall)(void*,struct S_bbb_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(UnityEditor.Search.QueryValidationOptions)bool w_vtS_bbbbb_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_bbbbb_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_bbbbb_* pp1 = DataTransfer::GetPointer<S_bbbbb_>(env, _sv1);
    S_bbbbb_ p1 = pp1 ? *pp1 : S_bbbbb_ {};
        
    typedef void (*FuncToCall)(void*,struct S_bbbbb_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_sortingLayerRange(UnityEngine.Rendering.SortingLayerRange)bool w_vtS_i2i2_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i2i2_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i2i2_* pp1 = DataTransfer::GetPointer<S_i2i2_>(env, _sv1);
    S_i2i2_ p1 = pp1 ? *pp1 : S_i2i2_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i2i2_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_Item(Section, Int32)bool w_vtS_i2i2_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i2i2_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_i2i2_* pp1 = DataTransfer::GetPointer<S_i2i2_>(env, _sv1);
    S_i2i2_ p1 = pp1 ? *pp1 : S_i2i2_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_i2i2_ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void set_value(UnityEngine.UIElements.BackgroundSize)bool w_vtS_i4S_r4i4_S_r4i4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4S_r4i4_S_r4i4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4S_r4i4_S_r4i4__* pp1 = DataTransfer::GetPointer<S_i4S_r4i4_S_r4i4__>(env, _sv1);
    S_i4S_r4i4_S_r4i4__ p1 = pp1 ? *pp1 : S_i4S_r4i4_S_r4i4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4S_r4i4_S_r4i4__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_value(UnityEngine.UIElements.BackgroundPosition)bool w_vtS_i4S_r4i4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4S_r4i4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4S_r4i4__* pp1 = DataTransfer::GetPointer<S_i4S_r4i4__>(env, _sv1);
    S_i4S_r4i4__ p1 = pp1 ? *pp1 : S_i4S_r4i4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4S_r4i4__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_lodParameters(UnityEngine.Rendering.LODParameters)bool w_vtS_i4S_r4r4r4_r4r4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4S_r4r4r4_r4r4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4S_r4r4r4_r4r4i4_* pp1 = DataTransfer::GetPointer<S_i4S_r4r4r4_r4r4i4_>(env, _sv1);
    S_i4S_r4r4r4_r4r4i4_ p1 = pp1 ? *pp1 : S_i4S_r4r4r4_r4r4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4S_r4r4r4_r4r4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_splitData(UnityEngine.Rendering.ShadowSplitData)bool w_vtS_i4S_u1_S_r4r4r4r4_r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4S_u1_S_r4r4r4r4_r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4S_u1_S_r4r4r4r4_r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__* pp1 = DataTransfer::GetPointer<S_i4S_u1_S_r4r4r4r4_r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__>(env, _sv1);
    S_i4S_u1_S_r4r4r4r4_r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__ p1 = pp1 ? *pp1 : S_i4S_u1_S_r4r4r4r4_r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4S_u1_S_r4r4r4r4_r4r4S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void MarkLabel(System.Reflection.Emit.Label)bool w_vtS_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4_* pp1 = DataTransfer::GetPointer<S_i4_>(env, _sv1);
    S_i4_ p1 = pp1 ? *pp1 : S_i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(UnityEngine.SceneManagement.Scene, ReadOnly)bool w_vtS_i4_S_Pvi4S_pi4i4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4_S_Pvi4S_pi4i4__");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_i4_* pp1 = DataTransfer::GetPointer<S_i4_>(env, _sv1);
    S_i4_ p1 = pp1 ? *pp1 : S_i4_ {};
        
     // LuaValToCSVal struct
    S_Pvi4S_pi4i4__* pp2 = DataTransfer::GetPointer<S_Pvi4S_pi4i4__>(env, _sv2);
    S_Pvi4S_pi4i4__ p2 = pp2 ? *pp2 : S_Pvi4S_pi4i4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4_ p1, struct S_Pvi4S_pi4i4__ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Rendering.ShaderTagId, UnityEngine.Rendering.SortingSettings)bool w_vtS_i4_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_i4_* pp1 = DataTransfer::GetPointer<S_i4_>(env, _sv1);
    S_i4_ p1 = pp1 ? *pp1 : S_i4_ {};
        
     // LuaValToCSVal struct
    S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_* pp2 = DataTransfer::GetPointer<S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_>(env, _sv2);
    S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_ p2 = pp2 ? *pp2 : S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4_ p1, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(System.Index, System.Index)bool w_vtS_i4_S_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4_S_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_i4_* pp1 = DataTransfer::GetPointer<S_i4_>(env, _sv1);
    S_i4_ p1 = pp1 ? *pp1 : S_i4_ {};
        
     // LuaValToCSVal struct
    S_i4_* pp2 = DataTransfer::GetPointer<S_i4_>(env, _sv2);
    S_i4_ p2 = pp2 ? *pp2 : S_i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4_ p1, struct S_i4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Rendering.ShaderTagId, UnityEngine.Rendering.CullingResults, UnityEngine.Camera)bool w_vtS_i4_S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4_S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal struct
    S_i4_* pp1 = DataTransfer::GetPointer<S_i4_>(env, _sv1);
    S_i4_ p1 = pp1 ? *pp1 : S_i4_ {};
        
     // LuaValToCSVal struct
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__* pp2 = DataTransfer::GetPointer<S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__>(env, _sv2);
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p2 = pp2 ? *pp2 : S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,struct S_i4_ p1, struct S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(UnityEngine.PhysicsScene, UnityEngine.Vector3, UnityEngine.Vector3, Single, Int32, Int32)bool w_vtS_i4_S_r4r4r4_S_r4r4r4_Dr4Di4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4_S_r4r4r4_S_r4r4r4_Dr4Di4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_i4_* pp1 = DataTransfer::GetPointer<S_i4_>(env, _sv1);
    S_i4_ p1 = pp1 ? *pp1 : S_i4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv3);
    S_r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_i4_ p1, struct S_r4r4r4_ p2, struct S_r4r4r4_ p3, void* p4, void* p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void .ctor(UnityEngine.PhysicsScene, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.QueryParameters, Single)bool w_vtS_i4_S_r4r4r4_S_r4r4r4_S_i4bi4b_Dr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4_S_r4r4r4_S_r4r4r4_S_i4bi4b_Dr4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_i4_* pp1 = DataTransfer::GetPointer<S_i4_>(env, _sv1);
    S_i4_ p1 = pp1 ? *pp1 : S_i4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv3);
    S_r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4bi4b_* pp4 = DataTransfer::GetPointer<S_i4bi4b_>(env, _sv4);
    S_i4bi4b_ p4 = pp4 ? *pp4 : S_i4bi4b_ {};
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_i4_ p1, struct S_r4r4r4_ p2, struct S_r4r4r4_ p3, struct S_i4bi4b_ p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void .ctor(UnityEngine.PhysicsScene, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.QueryParameters)bool w_vtS_i4_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4bi4b_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4bi4b_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;            }
     // LuaValToCSVal struct
    S_i4_* pp1 = DataTransfer::GetPointer<S_i4_>(env, _sv1);
    S_i4_ p1 = pp1 ? *pp1 : S_i4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv3);
    S_r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv4);
    S_r4r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4bi4b_* pp5 = DataTransfer::GetPointer<S_i4bi4b_>(env, _sv5);
    S_i4bi4b_ p5 = pp5 ? *pp5 : S_i4bi4b_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4_ p1, struct S_r4r4r4_ p2, struct S_r4r4r4_ p3, struct S_r4r4r4r4_ p4, struct S_i4bi4b_ p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void .ctor(UnityEngine.PhysicsScene, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Vector3, Single, Int32)bool w_vtS_i4_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_r4r4r4_Dr4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_r4r4r4_Dr4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];
    auto TIp7 = wrapData->TypeInfos[7];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_i4_* pp1 = DataTransfer::GetPointer<S_i4_>(env, _sv1);
    S_i4_ p1 = pp1 ? *pp1 : S_i4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv3);
    S_r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv4);
    S_r4r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp5 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv5);
    S_r4r4r4_ p5 = pp5 ? *pp5 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
 // LuaValToCSVal P any
    void* p7 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_i4_ p1, struct S_r4r4r4_ p2, struct S_r4r4r4_ p3, struct S_r4r4r4r4_ p4, struct S_r4r4r4_ p5, void* p6, void* p7, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void .ctor(UnityEngine.PhysicsScene, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Vector3, UnityEngine.QueryParameters, Single)bool w_vtS_i4_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_i4bi4b_Dr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4_S_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_i4bi4b_Dr4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];
    auto TIp7 = wrapData->TypeInfos[7];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_i4_* pp1 = DataTransfer::GetPointer<S_i4_>(env, _sv1);
    S_i4_ p1 = pp1 ? *pp1 : S_i4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv3);
    S_r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv4);
    S_r4r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp5 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv5);
    S_r4r4r4_ p5 = pp5 ? *pp5 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4bi4b_* pp6 = DataTransfer::GetPointer<S_i4bi4b_>(env, _sv6);
    S_i4bi4b_ p6 = pp6 ? *pp6 : S_i4bi4b_ {};
        
 // LuaValToCSVal P any
    void* p7 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_i4_ p1, struct S_r4r4r4_ p2, struct S_r4r4r4_ p3, struct S_r4r4r4r4_ p4, struct S_r4r4r4_ p5, struct S_i4bi4b_ p6, void* p7, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void .ctor(UnityEngine.PhysicsScene, UnityEngine.Vector3, UnityEngine.Vector3, Single, UnityEngine.QueryParameters)bool w_vtS_i4_S_r4r4r4_S_r4r4r4_r4S_i4bi4b_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4_S_r4r4r4_S_r4r4r4_r4S_i4bi4b_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!converter::Converter<float>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;            }
     // LuaValToCSVal struct
    S_i4_* pp1 = DataTransfer::GetPointer<S_i4_>(env, _sv1);
    S_i4_ p1 = pp1 ? *pp1 : S_i4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv3);
    S_r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p4 = converter::Converter<float>::toCpp(env, _sv4);        
        
     // LuaValToCSVal struct
    S_i4bi4b_* pp5 = DataTransfer::GetPointer<S_i4bi4b_>(env, _sv5);
    S_i4bi4b_ p5 = pp5 ? *pp5 : S_i4bi4b_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4_ p1, struct S_r4r4r4_ p2, struct S_r4r4r4_ p3, float p4, struct S_i4bi4b_ p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void .ctor(UnityEngine.PhysicsScene, UnityEngine.Vector3, UnityEngine.Vector3, Single, UnityEngine.Vector3, Single, Int32)bool w_vtS_i4_S_r4r4r4_S_r4r4r4_r4S_r4r4r4_Dr4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4_S_r4r4r4_S_r4r4r4_r4S_r4r4r4_Dr4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp7 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!converter::Converter<float>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_i4_* pp1 = DataTransfer::GetPointer<S_i4_>(env, _sv1);
    S_i4_ p1 = pp1 ? *pp1 : S_i4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv3);
    S_r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p4 = converter::Converter<float>::toCpp(env, _sv4);        
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp5 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv5);
    S_r4r4r4_ p5 = pp5 ? *pp5 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
 // LuaValToCSVal P any
    void* p7 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_i4_ p1, struct S_r4r4r4_ p2, struct S_r4r4r4_ p3, float p4, struct S_r4r4r4_ p5, void* p6, void* p7, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void .ctor(UnityEngine.PhysicsScene, UnityEngine.Vector3, UnityEngine.Vector3, Single, UnityEngine.Vector3, UnityEngine.QueryParameters, Single)bool w_vtS_i4_S_r4r4r4_S_r4r4r4_r4S_r4r4r4_S_i4bi4b_Dr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4_S_r4r4r4_S_r4r4r4_r4S_r4r4r4_S_i4bi4b_Dr4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp7 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!converter::Converter<float>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_i4_* pp1 = DataTransfer::GetPointer<S_i4_>(env, _sv1);
    S_i4_ p1 = pp1 ? *pp1 : S_i4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv3);
    S_r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p4 = converter::Converter<float>::toCpp(env, _sv4);        
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp5 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv5);
    S_r4r4r4_ p5 = pp5 ? *pp5 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4bi4b_* pp6 = DataTransfer::GetPointer<S_i4bi4b_>(env, _sv6);
    S_i4bi4b_ p6 = pp6 ? *pp6 : S_i4bi4b_ {};
        
 // LuaValToCSVal P any
    void* p7 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_i4_ p1, struct S_r4r4r4_ p2, struct S_r4r4r4_ p3, float p4, struct S_r4r4r4_ p5, struct S_i4bi4b_ p6, void* p7, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void .ctor(UnityEngine.PhysicsScene, UnityEngine.Vector3, Single, UnityEngine.QueryParameters)bool w_vtS_i4_S_r4r4r4_r4S_i4bi4b_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4_S_r4r4r4_r4S_i4bi4b_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;            }
     // LuaValToCSVal struct
    S_i4_* pp1 = DataTransfer::GetPointer<S_i4_>(env, _sv1);
    S_i4_ p1 = pp1 ? *pp1 : S_i4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
     // LuaValToCSVal struct
    S_i4bi4b_* pp4 = DataTransfer::GetPointer<S_i4bi4b_>(env, _sv4);
    S_i4bi4b_ p4 = pp4 ? *pp4 : S_i4bi4b_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4_ p1, struct S_r4r4r4_ p2, float p3, struct S_i4bi4b_ p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(UnityEngine.PhysicsScene, UnityEngine.Vector3, Single, UnityEngine.Vector3, Single, Int32)bool w_vtS_i4_S_r4r4r4_r4S_r4r4r4_Dr4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4_S_r4r4r4_r4S_r4r4r4_Dr4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_i4_* pp1 = DataTransfer::GetPointer<S_i4_>(env, _sv1);
    S_i4_ p1 = pp1 ? *pp1 : S_i4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv4);
    S_r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_i4_ p1, struct S_r4r4r4_ p2, float p3, struct S_r4r4r4_ p4, void* p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void .ctor(UnityEngine.PhysicsScene, UnityEngine.Vector3, Single, UnityEngine.Vector3, UnityEngine.QueryParameters, Single)bool w_vtS_i4_S_r4r4r4_r4S_r4r4r4_S_i4bi4b_Dr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4_S_r4r4r4_r4S_r4r4r4_S_i4bi4b_Dr4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_i4_* pp1 = DataTransfer::GetPointer<S_i4_>(env, _sv1);
    S_i4_ p1 = pp1 ? *pp1 : S_i4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv4);
    S_r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4bi4b_* pp5 = DataTransfer::GetPointer<S_i4bi4b_>(env, _sv5);
    S_i4bi4b_ p5 = pp5 ? *pp5 : S_i4bi4b_ {};
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_i4_ p1, struct S_r4r4r4_ p2, float p3, struct S_r4r4r4_ p4, struct S_i4bi4b_ p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void equeueGCAction(GCAction)bool w_vtS_i4b_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4b_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4b_* pp1 = DataTransfer::GetPointer<S_i4b_>(env, _sv1);
    S_i4b_ p1 = pp1 ? *pp1 : S_i4b_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4b_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_navigation(UnityEngine.UI.Navigation)bool w_vtS_i4boooo_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4boooo_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4boooo_* pp1 = DataTransfer::GetPointer<S_i4boooo_>(env, _sv1);
    S_i4boooo_ p1 = pp1 ? *pp1 : S_i4boooo_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4boooo_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_InheritedObjectAceType(System.Guid)bool w_vtS_i4i2i2u1u1u1u1u1u1u1u1_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i2i2u1u1u1u1u1u1u1u1_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i2i2u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_i4i2i2u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_i4i2i2u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_i4i2i2u1u1u1u1u1u1u1u1_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i2i2u1u1u1u1u1u1u1u1_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(System.Guid, System.Guid, System.Diagnostics.PerformanceData.CounterSetInstanceType)bool w_vtS_i4i2i2u1u1u1u1u1u1u1u1_S_i4i2i2u1u1u1u1u1u1u1u1_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i2i2u1u1u1u1u1u1u1u1_S_i4i2i2u1u1u1u1u1u1u1u1_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_i4i2i2u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_i4i2i2u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_i4i2i2u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_i4i2i2u1u1u1u1u1u1u1u1_ {};
        
     // LuaValToCSVal struct
    S_i4i2i2u1u1u1u1u1u1u1u1_* pp2 = DataTransfer::GetPointer<S_i4i2i2u1u1u1u1u1u1u1u1_>(env, _sv2);
    S_i4i2i2u1u1u1u1u1u1u1u1_ p2 = pp2 ? *pp2 : S_i4i2i2u1u1u1u1u1u1u1u1_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i2i2u1u1u1u1u1u1u1u1_ p1, struct S_i4i2i2u1u1u1u1u1u1u1u1_ p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(System.Guid, Int32)bool w_vtS_i4i2i2u1u1u1u1u1u1u1u1_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i2i2u1u1u1u1u1u1u1u1_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_i4i2i2u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_i4i2i2u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_i4i2i2u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_i4i2i2u1u1u1u1u1u1u1u1_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i2i2u1u1u1u1u1u1u1u1_ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Register(System.Guid, UnityEngine.Events.UnityAction`1[UnityEngine.Networking.PlayerConnection.MessageEventArgs])bool w_vtS_i4i2i2u1u1u1u1u1u1u1u1_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i2i2u1u1u1u1u1u1u1u1_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
     // LuaValToCSVal struct
    S_i4i2i2u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_i4i2i2u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_i4i2i2u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_i4i2i2u1u1u1u1u1u1u1u1_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,struct S_i4i2i2u1u1u1u1u1u1u1u1_ p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Send(System.Guid, Byte[], Int32)bool w_vtS_i4i2i2u1u1u1u1u1u1u1u1_oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i2i2u1u1u1u1u1u1u1u1_oi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_i4i2i2u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_i4i2i2u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_i4i2i2u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_i4i2i2u1u1u1u1u1u1u1u1_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i2i2u1u1u1u1u1u1u1u1_ p1, Il2CppObject* p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(System.Guid, System.Collections.Generic.List`1[JetBrains.Rider.Model.Unity.BackendUnity.TestFilter], JetBrains.Rider.Model.Unity.BackendUnity.TestMode, JetBrains.Rider.Model.Unity.BackendUnity.UnitTestLaunchClientControllerInfo)bool w_vtS_i4i2i2u1u1u1u1u1u1u1u1_oi4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i2i2u1u1u1u1u1u1u1u1_oi4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;            }
     // LuaValToCSVal struct
    S_i4i2i2u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_i4i2i2u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_i4i2i2u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_i4i2i2u1u1u1u1u1u1u1u1_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(void*,struct S_i4i2i2u1u1u1u1u1u1u1u1_ p1, Il2CppObject* p2, int32_t p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void set_min(UnityEngine.Vector2Int)bool w_vtS_i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4_>(env, _sv1);
    S_i4i4_ p1 = pp1 ? *pp1 : S_i4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void SetMinMax(UnityEngine.Vector2Int, UnityEngine.Vector2Int)bool w_vtS_i4i4_S_i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4_S_i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4_>(env, _sv1);
    S_i4i4_ p1 = pp1 ? *pp1 : S_i4i4_ {};
        
     // LuaValToCSVal struct
    S_i4i4_* pp2 = DataTransfer::GetPointer<S_i4i4_>(env, _sv2);
    S_i4i4_ p2 = pp2 ? *pp2 : S_i4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4_ p1, struct S_i4i4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetDetailLayer(UnityEngine.Vector2Int, Int32, Int32[,])bool w_vtS_i4i4_i4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4_i4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal struct
    S_i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4_>(env, _sv1);
    S_i4i4_ p1 = pp1 ? *pp1 : S_i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,struct S_i4i4_ p1, int32_t p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void SetReferenceValue(UnityEngine.PropertyName, UnityEngine.Object)bool w_vtS_i4i4_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
     // LuaValToCSVal struct
    S_i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4_>(env, _sv1);
    S_i4i4_ p1 = pp1 ? *pp1 : S_i4i4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,struct S_i4i4_ p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetMuscle(UnityEngine.Animations.MuscleHandle, Single)bool w_vtS_i4i4_r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4_r4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4_>(env, _sv1);
    S_i4i4_ p1 = pp1 ? *pp1 : S_i4i4_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4_ p1, float p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetPackingSettings(UnityEngine.U2D.SpriteAtlas, UnityEditor.U2D.SpriteAtlasPackingSettings)bool w_vtS_i4i4bbbb_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4bbbb_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4bbbb_* pp1 = DataTransfer::GetPointer<S_i4i4bbbb_>(env, _sv1);
    S_i4i4bbbb_ p1 = pp1 ? *pp1 : S_i4i4bbbb_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4bbbb_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(Mono.Cecil.Cil.ImageDebugDirectory, Byte[])bool w_vtS_i4i4i2i2i4i4i4i4_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i2i2i4i4i4i4_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i2i2i4i4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i2i2i4i4i4i4_>(env, _sv1);
    S_i4i4i2i2i4i4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i2i2i4i4i4i4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i2i2i4i4i4i4_ p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void set_min(UnityEngine.Vector3Int)bool w_vtS_i4i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4_>(env, _sv1);
    S_i4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void SetMinMax(UnityEngine.Vector3Int, UnityEngine.Vector3Int)bool w_vtS_i4i4i4_S_i4i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4_S_i4i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4_>(env, _sv1);
    S_i4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4_ {};
        
     // LuaValToCSVal struct
    S_i4i4i4_* pp2 = DataTransfer::GetPointer<S_i4i4i4_>(env, _sv2);
    S_i4i4i4_ p2 = pp2 ? *pp2 : S_i4i4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4_ p1, struct S_i4i4i4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetColor(UnityEngine.Vector3Int, UnityEngine.Color)bool w_vtS_i4i4i4_S_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4_S_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4_>(env, _sv1);
    S_i4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4_ p1, struct S_r4r4r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetTransformMatrix(UnityEngine.Vector3Int, UnityEngine.Matrix4x4)bool w_vtS_i4i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4_>(env, _sv1);
    S_i4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4_ p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetTileFlags(UnityEngine.Vector3Int, UnityEngine.Tilemaps.TileFlags)bool w_vtS_i4i4i4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4_>(env, _sv1);
    S_i4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4_ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void InsertCells(UnityEngine.Vector3Int, Int32, Int32, Int32)bool w_vtS_i4i4i4_i4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4_i4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4_>(env, _sv1);
    S_i4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4_ p1, int32_t p2, int32_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void RefreshTile(UnityEngine.Vector3Int, UnityEngine.Tilemaps.ITilemap)bool w_vtS_i4i4i4_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4_>(env, _sv1);
    S_i4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4_ p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void GetTileData(UnityEngine.Vector3Int, UnityEngine.Tilemaps.ITilemap, UnityEngine.Tilemaps.TileData ByRef)bool w_vtS_i4i4i4_oPS_i4S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_i4i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4_oPS_i4S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_i4i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4_>(env, _sv1);
    S_i4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal Pstruct
    S_i4S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_i4i4i4_* p3 = DataTransfer::GetPointer<S_i4S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_i4i4i4_>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_i4S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_i4i4i4_ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4_ p1, Il2CppObject* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector3Int, UnityEngine.Tilemaps.TileBase, UnityEngine.Color, UnityEngine.Matrix4x4)bool w_vtS_i4i4i4_oS_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4_oS_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4_>(env, _sv1);
    S_i4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv4);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4_ p1, Il2CppObject* p2, struct S_r4r4r4r4_ p3, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void BoxFill(UnityEngine.Vector3Int, UnityEngine.Tilemaps.TileBase, Int32, Int32, Int32, Int32)bool w_vtS_i4i4i4_oi4i4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4_oi4i4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4_>(env, _sv1);
    S_i4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4_ p1, Il2CppObject* p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void SetAnimationTime(UnityEngine.Vector3Int, Single)bool w_vtS_i4i4i4_r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4_r4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4_>(env, _sv1);
    S_i4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4_ p1, float p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void ClampToBounds(UnityEngine.RectInt)bool w_vtS_i4i4i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4i4_>(env, _sv1);
    S_i4i4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void CopyActiveRenderTextureToHeightmap(UnityEngine.RectInt, UnityEngine.Vector2Int, UnityEngine.TerrainHeightmapSyncControl)bool w_vtS_i4i4i4i4_S_i4i4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4i4_S_i4i4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4i4_>(env, _sv1);
    S_i4i4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4i4_ {};
        
     // LuaValToCSVal struct
    S_i4i4_* pp2 = DataTransfer::GetPointer<S_i4i4_>(env, _sv2);
    S_i4i4_ p2 = pp2 ? *pp2 : S_i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4i4_ p1, struct S_i4i4_ p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void DirtyHeightmapRegion(UnityEngine.RectInt, UnityEngine.TerrainHeightmapSyncControl)bool w_vtS_i4i4i4i4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4i4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4i4_>(env, _sv1);
    S_i4i4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4i4_ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void set_bakingOutput(UnityEngine.LightBakingOutput)bool w_vtS_i4i4i4i4b_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4i4b_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4i4b_* pp1 = DataTransfer::GetPointer<S_i4i4i4i4b_>(env, _sv1);
    S_i4i4i4i4b_ p1 = pp1 ? *pp1 : S_i4i4i4i4b_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4i4b_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void SetTextureSettings(UnityEngine.U2D.SpriteAtlas, UnityEditor.U2D.SpriteAtlasTextureSettings)bool w_vtS_i4i4i4i4i4bbbb_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4i4i4bbbb_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4i4i4bbbb_* pp1 = DataTransfer::GetPointer<S_i4i4i4i4i4bbbb_>(env, _sv1);
    S_i4i4i4i4i4bbbb_ p1 = pp1 ? *pp1 : S_i4i4i4i4i4bbbb_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4i4i4bbbb_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_descriptor(UnityEngine.RenderTextureDescriptor)bool w_vtS_i4i4i4i4i4i4i4i4i4i4i4i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4i4i4i4i4i4i4i4i4i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4i4i4i4i4i4i4i4i4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4i4i4i4i4i4i4i4i4i4i4_>(env, _sv1);
    S_i4i4i4i4i4i4i4i4i4i4i4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4i4i4i4i4i4i4i4i4i4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4i4i4i4i4i4i4i4i4i4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_Value(System.Decimal)bool w_vtS_i4i4i4i4u8_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4i4u8_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4i4u8_* pp1 = DataTransfer::GetPointer<S_i4i4i4i4u8_>(env, _sv1);
    S_i4i4i4i4u8_ p1 = pp1 ? *pp1 : S_i4i4i4i4u8_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4i4u8_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_depthRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier)bool w_vtS_i4i4i4pi4i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void ConvertTexture(UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Rendering.RenderTargetIdentifier)bool w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp2 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv2);
    S_i4i4i4pi4i4i4_ p2 = pp2 ? *pp2 : S_i4i4i4pi4i4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, struct S_i4i4i4pi4i4i4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Blit(UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Vector2, UnityEngine.Vector2)bool w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_S_r4r4_S_r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_S_r4r4_S_r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp2 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv2);
    S_i4i4i4pi4i4i4_ p2 = pp2 ? *pp2 : S_i4i4i4pi4i4i4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4_>(env, _sv3);
    S_r4r4_ p3 = pp3 ? *pp3 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4_>(env, _sv4);
    S_r4r4_ p4 = pp4 ? *pp4 : S_r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, struct S_i4i4i4pi4i4i4_ p2, struct S_r4r4_ p3, struct S_r4r4_ p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void Blit(UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Vector2, UnityEngine.Vector2, Int32, Int32)bool w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_S_r4r4_S_r4r4_i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_S_r4r4_S_r4r4_i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp2 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv2);
    S_i4i4i4pi4i4i4_ p2 = pp2 ? *pp2 : S_i4i4i4pi4i4i4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4_>(env, _sv3);
    S_r4r4_ p3 = pp3 ? *pp3 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4_>(env, _sv4);
    S_r4r4_ p4 = pp4 ? *pp4 : S_r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, struct S_i4i4i4pi4i4i4_ p2, struct S_r4r4_ p3, struct S_r4r4_ p4, int32_t p5, int32_t p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Rendering.RenderTargetIdentifier, Int32)bool w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp2 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv2);
    S_i4i4i4pi4i4i4_ p2 = pp2 ? *pp2 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, struct S_i4i4i4pi4i4i4_ p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Rendering.RenderTargetIdentifier, Int32, UnityEngine.CubemapFace)bool w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp2 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv2);
    S_i4i4i4pi4i4i4_ p2 = pp2 ? *pp2 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, struct S_i4i4i4pi4i4i4_ p2, int32_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Rendering.RenderTargetIdentifier, Int32, UnityEngine.CubemapFace, Int32)bool w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_i4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_i4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp2 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv2);
    S_i4i4i4pi4i4i4_ p2 = pp2 ? *pp2 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, struct S_i4i4i4pi4i4i4_ p2, int32_t p3, int32_t p4, int32_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Blit(UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Material)bool w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp2 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv2);
    S_i4i4i4pi4i4i4_ p2 = pp2 ? *pp2 : S_i4i4i4pi4i4i4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, struct S_i4i4i4pi4i4i4_ p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void Blit(UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Material, Int32)bool w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_oi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp2 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv2);
    S_i4i4i4pi4i4i4_ p2 = pp2 ? *pp2 : S_i4i4i4pi4i4i4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, struct S_i4i4i4pi4i4i4_ p2, Il2CppObject* p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void Blit(UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Material, Int32, Int32)bool w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_oi4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_S_i4i4i4pi4i4i4_oi4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp2 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv2);
    S_i4i4i4pi4i4i4_ p2 = pp2 ? *pp2 : S_i4i4i4pi4i4i4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, struct S_i4i4i4pi4i4i4_ p2, Il2CppObject* p3, int32_t p4, int32_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void SwitchOutOfFastMemory(UnityEngine.Rendering.CommandBuffer, UnityEngine.Rendering.RenderTargetIdentifier, Boolean)bool w_vtS_i4i4i4pi4i4i4_b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_b");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, bool p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void ConfigureTarget(UnityEngine.Rendering.RenderTargetIdentifier, Boolean, Boolean)bool w_vtS_i4i4i4pi4i4i4_bb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_bb");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, bool p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier, Int32)bool w_vtS_i4i4i4pi4i4i4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Rendering.RenderTargetIdentifier, Int32, UnityEngine.CubemapFace, Int32)bool w_vtS_i4i4i4pi4i4i4_i4Di4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_i4Di4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, int32_t p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void ConvertTexture(UnityEngine.Rendering.RenderTargetIdentifier, Int32, UnityEngine.Rendering.RenderTargetIdentifier, Int32)bool w_vtS_i4i4i4pi4i4i4_i4S_i4i4i4pi4i4i4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_i4S_i4i4i4pi4i4i4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp3 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv3);
    S_i4i4i4pi4i4i4_ p3 = pp3 ? *pp3 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, int32_t p2, struct S_i4i4i4pi4i4i4_ p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Rendering.RenderBufferLoadAction, UnityEngine.Rendering.RenderBufferStoreAction)bool w_vtS_i4i4i4pi4i4i4_i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, int32_t p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Rendering.RenderBufferLoadAction, UnityEngine.Rendering.RenderBufferStoreAction, UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Rendering.RenderBufferLoadAction, UnityEngine.Rendering.RenderBufferStoreAction)bool w_vtS_i4i4i4pi4i4i4_i4i4S_i4i4i4pi4i4i4_i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_i4i4S_i4i4i4pi4i4i4_i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp4 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv4);
    S_i4i4i4pi4i4i4_ p4 = pp4 ? *pp4 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, int32_t p2, int32_t p3, struct S_i4i4i4pi4i4i4_ p4, int32_t p5, int32_t p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier, Int32, UnityEngine.CubemapFace, Int32)bool w_vtS_i4i4i4pi4i4i4_i4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_i4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, int32_t p2, int32_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Rendering.RenderBufferLoadAction, UnityEngine.Rendering.RenderBufferStoreAction, UnityEngine.Rendering.RenderBufferLoadAction, UnityEngine.Rendering.RenderBufferStoreAction)bool w_vtS_i4i4i4pi4i4i4_i4i4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_i4i4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void CopyTexture(UnityEngine.Rendering.RenderTargetIdentifier, Int32, Int32, Int32, Int32, Int32, Int32, UnityEngine.Rendering.RenderTargetIdentifier, Int32, Int32, Int32, Int32)bool w_vtS_i4i4i4pi4i4i4_i4i4i4i4i4i4S_i4i4i4pi4i4i4_i4i4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_i4i4i4i4i4i4S_i4i4i4pi4i4i4_i4i4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp8 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    pesapi_value_sv12 = pesapi_get_arg(info, 12);
    if (checkLuaArgument) {
        if (lua_args_len != 12) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv9)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv10)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv11)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv12)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp8 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv8);
    S_i4i4i4pi4i4i4_ p8 = pp8 ? *pp8 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p9 = converter::Converter<int32_t>::toCpp(env, _sv9);        
        
 // LuaValToCSVal P any
    int32_t p10 = converter::Converter<int32_t>::toCpp(env, _sv10);        
        
 // LuaValToCSVal P any
    int32_t p11 = converter::Converter<int32_t>::toCpp(env, _sv11);        
        
 // LuaValToCSVal P any
    int32_t p12 = converter::Converter<int32_t>::toCpp(env, _sv12);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, struct S_i4i4i4pi4i4i4_ p8, int32_t p9, int32_t p10, int32_t p11, int32_t p12, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12,  method);
    

        return true;
}
// Void SwitchIntoFastMemory(UnityEngine.Rendering.CommandBuffer, UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Rendering.FastMemoryFlags, Single, Boolean)bool w_vtS_i4i4i4pi4i4i4_i4r4b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_i4r4b");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, int32_t p2, float p3, bool p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void ProcessVTFeedback(UnityEngine.Rendering.RenderTargetIdentifier, IntPtr, Int32, Int32, Int32, Int32, Int32, Int32)bool w_vtS_i4i4i4pi4i4i4_pi4i4i4i4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4i4pi4i4i4_pi4i4i4i4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    if (checkLuaArgument) {
        if (lua_args_len != 8) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv8)) return false;            }
     // LuaValToCSVal struct
    S_i4i4i4pi4i4i4_* pp1 = DataTransfer::GetPointer<S_i4i4i4pi4i4i4_>(env, _sv1);
    S_i4i4i4pi4i4i4_ p1 = pp1 ? *pp1 : S_i4i4i4pi4i4i4_ {};
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
 // LuaValToCSVal P any
    int32_t p8 = converter::Converter<int32_t>::toCpp(env, _sv8);        
        
    typedef void (*FuncToCall)(void*,struct S_i4i4i4pi4i4i4_ p1, void* p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7, p8,  method);
    

        return true;
}
// Void set_rasterState(UnityEngine.Rendering.RasterState)bool w_vtS_i4i4r4u1u1u1u1_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4r4u1u1u1u1_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4r4u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_i4i4r4u1u1u1u1_>(env, _sv1);
    S_i4i4r4u1u1u1u1_ p1 = pp1 ? *pp1 : S_i4i4r4u1u1u1u1_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4r4u1u1u1u1_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_IncludeStruct(ConStruct)bool w_vtS_i4i4s_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4s_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4s_* pp1 = DataTransfer::GetPointer<S_i4i4s_>(env, _sv1);
    S_i4i4s_ p1 = pp1 ? *pp1 : S_i4i4s_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4s_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Add(ConStruct, ConStruct ByRef, ConStruct ByRef)bool w_vtS_i4i4s_PS_i4i4s_PS_i4i4s_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4s_PS_i4i4s_PS_i4i4s_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_i4i4s_* pp1 = DataTransfer::GetPointer<S_i4i4s_>(env, _sv1);
    S_i4i4s_ p1 = pp1 ? *pp1 : S_i4i4s_ {};
        
     // LuaValToCSVal Pstruct
    S_i4i4s_* p2 = DataTransfer::GetPointer<S_i4i4s_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_i4i4s_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
     // LuaValToCSVal Pstruct
    S_i4i4s_* p3 = DataTransfer::GetPointer<S_i4i4s_>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_i4i4s_ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
    typedef void (*FuncToCall)(void*,struct S_i4i4s_ p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void set_defaultSampleSettings(UnityEditor.AudioImporterSampleSettings)bool w_vtS_i4i4u4i4r4i4b_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4i4u4i4r4i4b_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4i4u4i4r4i4b_* pp1 = DataTransfer::GetPointer<S_i4i4u4i4r4i4b_>(env, _sv1);
    S_i4i4u4i4r4i4b_ p1 = pp1 ? *pp1 : S_i4i4u4i4r4i4b_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4i4u4i4r4i4b_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(UnityEngine.RenderBuffer, Int32, UnityEngine.CubemapFace, Int32)bool w_vtS_i4p_Di4Di4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4p_Di4Di4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_i4p_* pp1 = DataTransfer::GetPointer<S_i4p_>(env, _sv1);
    S_i4p_ p1 = pp1 ? *pp1 : S_i4p_ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_i4p_ p1, void* p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetTargetBuffers(UnityEngine.RenderBuffer, UnityEngine.RenderBuffer)bool w_vtS_i4p_S_i4p_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4p_S_i4p_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_i4p_* pp1 = DataTransfer::GetPointer<S_i4p_>(env, _sv1);
    S_i4p_ p1 = pp1 ? *pp1 : S_i4p_ {};
        
     // LuaValToCSVal struct
    S_i4p_* pp2 = DataTransfer::GetPointer<S_i4p_>(env, _sv2);
    S_i4p_ p2 = pp2 ? *pp2 : S_i4p_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4p_ p1, struct S_i4p_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEngine.RenderBuffer, UnityEngine.RenderBuffer, Int32)bool w_vtS_i4p_S_i4p_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4p_S_i4p_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_i4p_* pp1 = DataTransfer::GetPointer<S_i4p_>(env, _sv1);
    S_i4p_ p1 = pp1 ? *pp1 : S_i4p_ {};
        
     // LuaValToCSVal struct
    S_i4p_* pp2 = DataTransfer::GetPointer<S_i4p_>(env, _sv2);
    S_i4p_ p2 = pp2 ? *pp2 : S_i4p_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_i4p_ p1, struct S_i4p_ p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(UnityEngine.RenderBuffer, UnityEngine.RenderBuffer, Int32, UnityEngine.CubemapFace)bool w_vtS_i4p_S_i4p_i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4p_S_i4p_i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_i4p_* pp1 = DataTransfer::GetPointer<S_i4p_>(env, _sv1);
    S_i4p_ p1 = pp1 ? *pp1 : S_i4p_ {};
        
     // LuaValToCSVal struct
    S_i4p_* pp2 = DataTransfer::GetPointer<S_i4p_>(env, _sv2);
    S_i4p_ p2 = pp2 ? *pp2 : S_i4p_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_i4p_ p1, struct S_i4p_ p2, int32_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(UnityEngine.RenderBuffer, UnityEngine.RenderBuffer, Int32, UnityEngine.CubemapFace, Int32)bool w_vtS_i4p_S_i4p_i4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4p_S_i4p_i4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal struct
    S_i4p_* pp1 = DataTransfer::GetPointer<S_i4p_>(env, _sv1);
    S_i4p_ p1 = pp1 ? *pp1 : S_i4p_ {};
        
     // LuaValToCSVal struct
    S_i4p_* pp2 = DataTransfer::GetPointer<S_i4p_>(env, _sv2);
    S_i4p_ p2 = pp2 ? *pp2 : S_i4p_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void*,struct S_i4p_ p1, struct S_i4p_ p2, int32_t p3, int32_t p4, int32_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void set_directionX(MinMaxCurve)bool w_vtS_i4r4oor4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4r4oor4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4r4oor4r4_* pp1 = DataTransfer::GetPointer<S_i4r4oor4r4_>(env, _sv1);
    S_i4r4oor4r4_ p1 = pp1 ? *pp1 : S_i4r4oor4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4r4oor4r4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void RemoveCondition(UnityEditor.Animations.AnimatorCondition)bool w_vtS_i4sr4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4sr4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4sr4_* pp1 = DataTransfer::GetPointer<S_i4sr4_>(env, _sv1);
    S_i4sr4_ p1 = pp1 ? *pp1 : S_i4sr4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4sr4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_cameraMode(CameraMode)bool w_vtS_i4ss_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4ss_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4ss_* pp1 = DataTransfer::GetPointer<S_i4ss_>(env, _sv1);
    S_i4ss_ p1 = pp1 ? *pp1 : S_i4ss_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4ss_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_faceInfo(UnityEngine.TextCore.FaceInfo)bool w_vtS_i4ssi4r4i4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4ssi4r4i4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4ssi4r4i4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_i4ssi4r4i4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv1);
    S_i4ssi4r4i4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1 = pp1 ? *pp1 : S_i4ssi4r4i4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4ssi4r4i4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_color(UnityEngine.Color32)bool w_vtS_i4u1u1u1u1_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i4u1u1u1u1_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i4u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_i4u1u1u1u1_>(env, _sv1);
    S_i4u1u1u1u1_ p1 = pp1 ? *pp1 : S_i4u1u1u1u1_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i4u1u1u1u1_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void CancelAfter(System.TimeSpan)bool w_vtS_i8_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i8_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_i8_* pp1 = DataTransfer::GetPointer<S_i8_>(env, _sv1);
    S_i8_ p1 = pp1 ? *pp1 : S_i8_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i8_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void TryEnter(System.TimeSpan, Boolean ByRef)bool w_vtS_i8_Pb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i8_Pb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_i8_* pp1 = DataTransfer::GetPointer<S_i8_>(env, _sv1);
    S_i8_ p1 = pp1 ? *pp1 : S_i8_ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_i8_ p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(System.TimeSpan, System.TimeSpan)bool w_vtS_i8_S_i8_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i8_S_i8_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_i8_* pp1 = DataTransfer::GetPointer<S_i8_>(env, _sv1);
    S_i8_ p1 = pp1 ? *pp1 : S_i8_ {};
        
     // LuaValToCSVal struct
    S_i8_* pp2 = DataTransfer::GetPointer<S_i8_>(env, _sv2);
    S_i8_ p2 = pp2 ? *pp2 : S_i8_ {};
        
    typedef void (*FuncToCall)(void*,struct S_i8_ p1, struct S_i8_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(System.TimeSpan, System.TimeSpan, Boolean)bool w_vtS_i8_S_i8_b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i8_S_i8_b");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_i8_* pp1 = DataTransfer::GetPointer<S_i8_>(env, _sv1);
    S_i8_ p1 = pp1 ? *pp1 : S_i8_ {};
        
     // LuaValToCSVal struct
    S_i8_* pp2 = DataTransfer::GetPointer<S_i8_>(env, _sv2);
    S_i8_ p2 = pp2 ? *pp2 : S_i8_ {};
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_i8_ p1, struct S_i8_ p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(System.TimeSpan, System.TimeSpan, Boolean, Int64)bool w_vtS_i8_S_i8_bi8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i8_S_i8_bi8");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_i8_* pp1 = DataTransfer::GetPointer<S_i8_>(env, _sv1);
    S_i8_ p1 = pp1 ? *pp1 : S_i8_ {};
        
     // LuaValToCSVal struct
    S_i8_* pp2 = DataTransfer::GetPointer<S_i8_>(env, _sv2);
    S_i8_ p2 = pp2 ? *pp2 : S_i8_ {};
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int64_t p4 = converter::Converter<int64_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_i8_ p1, struct S_i8_ p2, bool p3, int64_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetStaticPusherStruct(StaticPusherStructAll, StaticPusherStructAll ByRef, StaticPusherStructAll ByRef)bool w_vtS_i8u8r4r8S_u1i1_S_i2u2i4u4__PS_i8u8r4r8S_u1i1_S_i2u2i4u4__PS_i8u8r4r8S_u1i1_S_i2u2i4u4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_i8u8r4r8S_u1i1_S_i2u2i4u4__PS_i8u8r4r8S_u1i1_S_i2u2i4u4__PS_i8u8r4r8S_u1i1_S_i2u2i4u4__");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_i8u8r4r8S_u1i1_S_i2u2i4u4__* pp1 = DataTransfer::GetPointer<S_i8u8r4r8S_u1i1_S_i2u2i4u4__>(env, _sv1);
    S_i8u8r4r8S_u1i1_S_i2u2i4u4__ p1 = pp1 ? *pp1 : S_i8u8r4r8S_u1i1_S_i2u2i4u4__ {};
        
     // LuaValToCSVal Pstruct
    S_i8u8r4r8S_u1i1_S_i2u2i4u4__* p2 = DataTransfer::GetPointer<S_i8u8r4r8S_u1i1_S_i2u2i4u4__>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_i8u8r4r8S_u1i1_S_i2u2i4u4__ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
     // LuaValToCSVal Pstruct
    S_i8u8r4r8S_u1i1_S_i2u2i4u4__* p3 = DataTransfer::GetPointer<S_i8u8r4r8S_u1i1_S_i2u2i4u4__>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_i8u8r4r8S_u1i1_S_i2u2i4u4__ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
    typedef void (*FuncToCall)(void*,struct S_i8u8r4r8S_u1i1_S_i2u2i4u4__ p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void set_Start(Mono.Cecil.Cil.InstructionOffset)bool w_vtS_oN_bi4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_oN_bi4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_oN_bi4__* pp1 = DataTransfer::GetPointer<S_oN_bi4__>(env, _sv1);
    S_oN_bi4__ p1 = pp1 ? *pp1 : S_oN_bi4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_oN_bi4__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_Item(System.ComponentModel.Design.Serialization.MemberRelationship, System.ComponentModel.Design.Serialization.MemberRelationship)bool w_vtS_oO_S_oO_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_oO_S_oO_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_oO_* pp1 = DataTransfer::GetPointer<S_oO_>(env, _sv1);
    S_oO_ p1 = pp1 ? *pp1 : S_oO_ {};
        
     // LuaValToCSVal struct
    S_oO_* pp2 = DataTransfer::GetPointer<S_oO_>(env, _sv2);
    S_oO_ p2 = pp2 ? *pp2 : S_oO_ {};
        
    typedef void (*FuncToCall)(void*,struct S_oO_ p1, struct S_oO_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetRenderTarget(UnityEngine.Rendering.RenderTargetBinding)bool w_vtS_oS_i4i4i4pi4i4i4_ooi4i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_oS_i4i4i4pi4i4i4_ooi4i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_oS_i4i4i4pi4i4i4_ooi4i4i4_* pp1 = DataTransfer::GetPointer<S_oS_i4i4i4pi4i4i4_ooi4i4i4_>(env, _sv1);
    S_oS_i4i4i4pi4i4i4_ooi4i4i4_ p1 = pp1 ? *pp1 : S_oS_i4i4i4pi4i4i4_ooi4i4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_oS_i4i4i4pi4i4i4_ooi4i4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void SetRenderTarget(UnityEngine.Rendering.RenderTargetBinding, Int32, UnityEngine.CubemapFace, Int32)bool w_vtS_oS_i4i4i4pi4i4i4_ooi4i4i4_i4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_oS_i4i4i4pi4i4i4_ooi4i4i4_i4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_oS_i4i4i4pi4i4i4_ooi4i4i4_* pp1 = DataTransfer::GetPointer<S_oS_i4i4i4pi4i4i4_ooi4i4i4_>(env, _sv1);
    S_oS_i4i4i4pi4i4i4_ooi4i4i4_ p1 = pp1 ? *pp1 : S_oS_i4i4i4pi4i4i4_ooi4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_oS_i4i4i4pi4i4i4_ooi4i4i4_ p1, int32_t p2, int32_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(UnityEngine.RenderTargetSetup)bool w_vtS_oS_i4p_i4i4i4ooi4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_oS_i4p_i4i4i4ooi4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_oS_i4p_i4i4i4ooi4i4_* pp1 = DataTransfer::GetPointer<S_oS_i4p_i4i4i4ooi4i4_>(env, _sv1);
    S_oS_i4p_i4i4i4ooi4i4_ p1 = pp1 ? *pp1 : S_oS_i4p_i4i4i4ooi4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_oS_i4p_i4i4i4ooi4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_value(UnityEngine.UIElements.Cursor)bool w_vtS_oS_r4r4_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_oS_r4r4_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_oS_r4r4_i4_* pp1 = DataTransfer::GetPointer<S_oS_r4r4_i4_>(env, _sv1);
    S_oS_r4r4_i4_ p1 = pp1 ? *pp1 : S_oS_r4r4_i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_oS_r4r4_i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Wait(System.Threading.CancellationToken)bool w_vtS_o_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_o_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_o_* pp1 = DataTransfer::GetPointer<S_o_>(env, _sv1);
    S_o_ p1 = pp1 ? *pp1 : S_o_ {};
        
    typedef void (*FuncToCall)(void*,struct S_o_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)bool w_vtS_o_i4i4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_o_i4i4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;            }
     // LuaValToCSVal struct
    S_o_* pp1 = DataTransfer::GetPointer<S_o_>(env, _sv1);
    S_o_ p1 = pp1 ? *pp1 : S_o_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(void*,struct S_o_ p1, int32_t p2, int32_t p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(JetBrains.Lifetimes.Lifetime, JetBrains.Rd.IProtocol)bool w_vtS_o_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_o_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
     // LuaValToCSVal struct
    S_o_* pp1 = DataTransfer::GetPointer<S_o_>(env, _sv1);
    S_o_ p1 = pp1 ? *pp1 : S_o_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,struct S_o_ p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void CopyTo(System.ArraySegment`1[T])bool w_vtS_oi4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_oi4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_oi4i4_* pp1 = DataTransfer::GetPointer<S_oi4i4_>(env, _sv1);
    S_oi4i4_ p1 = pp1 ? *pp1 : S_oi4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_oi4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(System.Net.Sockets.SocketInformation)bool w_vtS_oi4o_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_oi4o_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_oi4o_* pp1 = DataTransfer::GetPointer<S_oi4o_>(env, _sv1);
    S_oi4o_ p1 = pp1 ? *pp1 : S_oi4o_ {};
        
    typedef void (*FuncToCall)(void*,struct S_oi4o_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void GenerateKey(System.Security.Cryptography.ECCurve)bool w_vtS_ooS_oo_oooi4N_bS_s__ooo_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_ooS_oo_oooi4N_bS_s__ooo_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_ooS_oo_oooi4N_bS_s__ooo_* pp1 = DataTransfer::GetPointer<S_ooS_oo_oooi4N_bS_s__ooo_>(env, _sv1);
    S_ooS_oo_oooi4N_bS_s__ooo_ p1 = pp1 ? *pp1 : S_ooS_oo_oooi4N_bS_s__ooo_ {};
        
    typedef void (*FuncToCall)(void*,struct S_ooS_oo_oooi4N_bS_s__ooo_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_value(UnityEngine.UIElements.FontDefinition)bool w_vtS_oo_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_oo_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_oo_* pp1 = DataTransfer::GetPointer<S_oo_>(env, _sv1);
    S_oo_ p1 = pp1 ? *pp1 : S_oo_ {};
        
    typedef void (*FuncToCall)(void*,struct S_oo_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(UnityEditor.Search.SearchColumnEventArgs, UnityEditor.Search.SearchColumnEventArgs, Boolean)bool w_vtS_oooObS_r4r4r4r4_bb_S_oooObS_r4r4r4r4_bb_b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_oooObS_r4r4r4r4_bb_S_oooObS_r4r4r4r4_bb_b");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_oooObS_r4r4r4r4_bb_* pp1 = DataTransfer::GetPointer<S_oooObS_r4r4r4r4_bb_>(env, _sv1);
    S_oooObS_r4r4r4r4_bb_ p1 = pp1 ? *pp1 : S_oooObS_r4r4r4r4_bb_ {};
        
     // LuaValToCSVal struct
    S_oooObS_r4r4r4r4_bb_* pp2 = DataTransfer::GetPointer<S_oooObS_r4r4r4r4_bb_>(env, _sv2);
    S_oooObS_r4r4r4r4_bb_ p2 = pp2 ? *pp2 : S_oooObS_r4r4r4r4_bb_ {};
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_oooObS_r4r4r4r4_bb_ p1, struct S_oooObS_r4r4r4r4_bb_ p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void ImportParameters(Mono.Security.Cryptography.DHParameters)bool w_vtS_ooo_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_ooo_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_ooo_* pp1 = DataTransfer::GetPointer<S_ooo_>(env, _sv1);
    S_ooo_ p1 = pp1 ? *pp1 : S_ooo_ {};
        
    typedef void (*FuncToCall)(void*,struct S_ooo_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_icon(UnityEngine.UIElements.Background)bool w_vtS_oooo_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_oooo_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_oooo_* pp1 = DataTransfer::GetPointer<S_oooo_>(env, _sv1);
    S_oooo_ p1 = pp1 ? *pp1 : S_oooo_ {};
        
    typedef void (*FuncToCall)(void*,struct S_oooo_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void SetTrails(Trails)bool w_vtS_oooooi4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_oooooi4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_oooooi4i4_* pp1 = DataTransfer::GetPointer<S_oooooi4i4_>(env, _sv1);
    S_oooooi4i4_ p1 = pp1 ? *pp1 : S_oooooi4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_oooooi4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void ImportParameters(System.Security.Cryptography.DSAParameters)bool w_vtS_oooooooi4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_oooooooi4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_oooooooi4_* pp1 = DataTransfer::GetPointer<S_oooooooi4_>(env, _sv1);
    S_oooooooi4_ p1 = pp1 ? *pp1 : S_oooooooi4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_oooooooi4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void ImportParameters(System.Security.Cryptography.RSAParameters)bool w_vtS_oooooooo_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_oooooooo_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_oooooooo_* pp1 = DataTransfer::GetPointer<S_oooooooo_>(env, _sv1);
    S_oooooooo_ p1 = pp1 ? *pp1 : S_oooooooo_ {};
        
    typedef void (*FuncToCall)(void*,struct S_oooooooo_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_pointerCurrentRaycast(UnityEngine.EventSystems.RaycastResult)bool w_vtS_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_* pp1 = DataTransfer::GetPointer<S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_>(env, _sv1);
    S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ p1 = pp1 ? *pp1 : S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_oor4r4i4i4i4i4i4S_r4r4r4_S_r4r4r4_S_r4r4_i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_humanDescription(UnityEngine.HumanDescription)bool w_vtS_oor4r4r4r4r4r4r4r4sbbb_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_oor4r4r4r4r4r4r4r4sbbb_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_oor4r4r4r4r4r4r4r4sbbb_* pp1 = DataTransfer::GetPointer<S_oor4r4r4r4r4r4r4r4sbbb_>(env, _sv1);
    S_oor4r4r4r4r4r4r4r4sbbb_ p1 = pp1 ? *pp1 : S_oor4r4r4r4r4r4r4r4sbbb_ {};
        
    typedef void (*FuncToCall)(void*,struct S_oor4r4r4r4r4r4r4r4sbbb_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void AddRemap(SourceAssetIdentifier, UnityEngine.Object)bool w_vtS_os_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_os_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
     // LuaValToCSVal struct
    S_os_* pp1 = DataTransfer::GetPointer<S_os_>(env, _sv1);
    S_os_ p1 = pp1 ? *pp1 : S_os_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,struct S_os_ p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void set_cullingResults(UnityEngine.Rendering.CullingResults)bool w_vtS_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__* pp1 = DataTransfer::GetPointer<S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__>(env, _sv1);
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p1 = pp1 ? *pp1 : S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void DrawRenderers(UnityEngine.Rendering.CullingResults, UnityEngine.Rendering.DrawingSettings ByRef, UnityEngine.Rendering.FilteringSettings ByRef)bool w_vtS_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__PS_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_PS_S_i4i4_i4u4i4S_i2i2_S_i2i2__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__PS_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_PS_S_i4i4_i4u4i4S_i2i2_S_i2i2__");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__* pp1 = DataTransfer::GetPointer<S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__>(env, _sv1);
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p1 = pp1 ? *pp1 : S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ {};
        
     // LuaValToCSVal Pstruct
    S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_* p2 = DataTransfer::GetPointer<S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
     // LuaValToCSVal Pstruct
    S_S_i4i4_i4u4i4S_i2i2_S_i2i2__* p3 = DataTransfer::GetPointer<S_S_i4i4_i4u4i4S_i2i2_S_i2i2__>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_S_i4i4_i4u4i4S_i2i2_S_i2i2__ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
    typedef void (*FuncToCall)(void*,struct S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void DrawRenderers(UnityEngine.Rendering.CullingResults, UnityEngine.Rendering.DrawingSettings ByRef, UnityEngine.Rendering.FilteringSettings ByRef, UnityEngine.Rendering.RenderStateBlock ByRef)bool w_vtS_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__PS_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_PS_S_i4i4_i4u4i4S_i2i2_S_i2i2__PS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__PS_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_PS_S_i4i4_i4u4i4S_i2i2_S_i2i2__PS_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__* pp1 = DataTransfer::GetPointer<S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__>(env, _sv1);
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p1 = pp1 ? *pp1 : S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ {};
        
     // LuaValToCSVal Pstruct
    S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_* p2 = DataTransfer::GetPointer<S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
     // LuaValToCSVal Pstruct
    S_S_i4i4_i4u4i4S_i2i2_S_i2i2__* p3 = DataTransfer::GetPointer<S_S_i4i4_i4u4i4S_i2i2_S_i2i2__>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_S_i4i4_i4u4i4S_i2i2_S_i2i2__ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
     // LuaValToCSVal Pstruct
    S_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_* p4 = DataTransfer::GetPointer<S_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_>(env, pesapi_unboxing(env, _sv4)); // valuetype ref
    S_S_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_S_u1u1u1u1u1u1u1u1_u1u1i2_S_i4i4r4u1u1u1u1_S_u1i1_S_u1u1u1u1u1u1u1u1u1u1u1u1_i4i4_ up4;
    if (!p4) {
        memset(&up4, 0, sizeof(p4));
    }
        
    typedef void (*FuncToCall)(void*,struct S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p1, void* p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void DrawRenderers(UnityEngine.Rendering.CullingResults, UnityEngine.Rendering.DrawingSettings ByRef, UnityEngine.Rendering.FilteringSettings ByRef, Unity.Collections.NativeArray`1[UnityEngine.Rendering.ShaderTagId], Unity.Collections.NativeArray`1[UnityEngine.Rendering.RenderStateBlock])bool w_vtS_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__PS_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_PS_S_i4i4_i4u4i4S_i2i2_S_i2i2__S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__PS_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_PS_S_i4i4_i4u4i4S_i2i2_S_i2i2__S_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;            }
     // LuaValToCSVal struct
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__* pp1 = DataTransfer::GetPointer<S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__>(env, _sv1);
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p1 = pp1 ? *pp1 : S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ {};
        
     // LuaValToCSVal Pstruct
    S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_* p2 = DataTransfer::GetPointer<S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
     // LuaValToCSVal Pstruct
    S_S_i4i4_i4u4i4S_i2i2_S_i2i2__* p3 = DataTransfer::GetPointer<S_S_i4i4_i4u4i4S_i2i2_S_i2i2__>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_S_i4i4_i4u4i4S_i2i2_S_i2i2__ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp4 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv4);
    S_Pvi4i4i4S_pi4i4_i4_ p4 = pp4 ? *pp4 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp5 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv5);
    S_Pvi4i4i4S_pi4i4_i4_ p5 = pp5 ? *pp5 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p1, void* p2, void* p3, struct S_Pvi4i4i4S_pi4i4_i4_ p4, struct S_Pvi4i4i4S_pi4i4_i4_ p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void DrawRenderers(UnityEngine.Rendering.CullingResults, UnityEngine.Rendering.DrawingSettings ByRef, UnityEngine.Rendering.FilteringSettings ByRef, UnityEngine.Rendering.ShaderTagId, Boolean, Unity.Collections.NativeArray`1[UnityEngine.Rendering.ShaderTagId], Unity.Collections.NativeArray`1[UnityEngine.Rendering.RenderStateBlock])bool w_vtS_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__PS_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_PS_S_i4i4_i4u4i4S_i2i2_S_i2i2__S_i4_bS_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__PS_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_PS_S_i4i4_i4u4i4S_i2i2_S_i2i2__S_i4_bS_Pvi4i4i4S_pi4i4_i4_S_Pvi4i4i4S_pi4i4_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp7 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, true)) return false;            }
     // LuaValToCSVal struct
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__* pp1 = DataTransfer::GetPointer<S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__>(env, _sv1);
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p1 = pp1 ? *pp1 : S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ {};
        
     // LuaValToCSVal Pstruct
    S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_* p2 = DataTransfer::GetPointer<S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
     // LuaValToCSVal Pstruct
    S_S_i4i4_i4u4i4S_i2i2_S_i2i2__* p3 = DataTransfer::GetPointer<S_S_i4i4_i4u4i4S_i2i2_S_i2i2__>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_S_i4i4_i4u4i4S_i2i2_S_i2i2__ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
     // LuaValToCSVal struct
    S_i4_* pp4 = DataTransfer::GetPointer<S_i4_>(env, _sv4);
    S_i4_ p4 = pp4 ? *pp4 : S_i4_ {};
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp6 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv6);
    S_Pvi4i4i4S_pi4i4_i4_ p6 = pp6 ? *pp6 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
     // LuaValToCSVal struct
    S_Pvi4i4i4S_pi4i4_i4_* pp7 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, _sv7);
    S_Pvi4i4i4S_pi4i4_i4_ p7 = pp7 ? *pp7 : S_Pvi4i4i4S_pi4i4_i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p1, void* p2, void* p3, struct S_i4_ p4, bool p5, struct S_Pvi4i4i4S_pi4i4_i4_ p6, struct S_Pvi4i4i4S_pi4i4_i4_ p7, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Rendering.CullingResults, UnityEngine.Rendering.DrawingSettings, UnityEngine.Rendering.FilteringSettings)bool w_vtS_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_S_S_i4i4_i4u4i4S_i2i2_S_i2i2__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_S_S_i4i4_i4u4i4S_i2i2_S_i2i2__");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal struct
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__* pp1 = DataTransfer::GetPointer<S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__>(env, _sv1);
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p1 = pp1 ? *pp1 : S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ {};
        
     // LuaValToCSVal struct
    S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_* pp2 = DataTransfer::GetPointer<S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_>(env, _sv2);
    S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_ p2 = pp2 ? *pp2 : S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_ {};
        
     // LuaValToCSVal struct
    S_S_i4i4_i4u4i4S_i2i2_S_i2i2__* pp3 = DataTransfer::GetPointer<S_S_i4i4_i4u4i4S_i2i2_S_i2i2__>(env, _sv3);
    S_S_i4i4_i4u4i4S_i2i2_S_i2i2__ p3 = pp3 ? *pp3 : S_S_i4i4_i4u4i4S_i2i2_S_i2i2__ {};
        
    typedef void (*FuncToCall)(void*,struct S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p1, struct S_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4_S_r4r4r4_i4i4_S_i4_i4i4i4i4i4S_i4_i4i4i4i4i4i4i4_ p2, struct S_S_i4i4_i4u4i4S_i2i2_S_i2i2__ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Rendering.CullingResults, Int32)bool w_vtS_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__* pp1 = DataTransfer::GetPointer<S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__>(env, _sv1);
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p1 = pp1 ? *pp1 : S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Rendering.CullingResults, Int32, UnityEngine.Rendering.BatchCullingProjectionType)bool w_vtS_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__* pp1 = DataTransfer::GetPointer<S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__>(env, _sv1);
    S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p1 = pp1 ? *pp1 : S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_pPS_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_i4S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4i4i4_PS_S_S_r4r4r4_S_r4r4r4__S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4_S_r4r4r4_r4i4i4i4i4_i4i4i4_S_pi4i4__ p1, int32_t p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void BeginSample(Unity.Profiling.ProfilerMarker)bool w_vtS_p_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_p_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_p_* pp1 = DataTransfer::GetPointer<S_p_>(env, _sv1);
    S_p_ p1 = pp1 ? *pp1 : S_p_ {};
        
    typedef void (*FuncToCall)(void*,struct S_p_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(Unity.Profiling.ProfilerMarker, Int32, Unity.Profiling.ProfilerRecorderOptions)bool w_vtS_p_Di4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_p_Di4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_p_* pp1 = DataTransfer::GetPointer<S_p_>(env, _sv1);
    S_p_ p1 = pp1 ? *pp1 : S_p_ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_p_ p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(System.RuntimeArgumentHandle, Void*)bool w_vtS_p_Pv(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_p_Pv");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!pesapi_is_binary(env, _sv2) && !pesapi_is_null(env, _sv2) && !pesapi_is_undefined(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_p_* pp1 = DataTransfer::GetPointer<S_p_>(env, _sv1);
    S_p_ p1 = pp1 ? *pp1 : S_p_ {};
        
 // LuaValToCSVal P any
    void* p2 = DataTransfer::GetPointer<void>(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_p_ p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Experimental.AI.NavMeshWorld, Unity.Collections.Allocator, Int32)bool w_vtS_p_i4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_p_i4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_p_* pp1 = DataTransfer::GetPointer<S_p_>(env, _sv1);
    S_p_ p1 = pp1 ? *pp1 : S_p_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_p_ p1, int32_t p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void WaitOnAsyncGraphicsFence(UnityEngine.Rendering.GraphicsFence)bool w_vtS_pi4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_pi4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_pi4i4_* pp1 = DataTransfer::GetPointer<S_pi4i4_>(env, _sv1);
    S_pi4i4_ p1 = pp1 ? *pp1 : S_pi4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_pi4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void WaitOnAsyncGraphicsFence(UnityEngine.Rendering.GraphicsFence, UnityEngine.Rendering.SynchronisationStage)bool w_vtS_pi4i4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_pi4i4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_pi4i4_* pp1 = DataTransfer::GetPointer<S_pi4i4_>(env, _sv1);
    S_pi4i4_ p1 = pp1 ? *pp1 : S_pi4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_pi4i4_ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetHandle(UnityEngine.Playables.PlayableHandle)bool w_vtS_pu4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_pu4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_pu4_* pp1 = DataTransfer::GetPointer<S_pu4_>(env, _sv1);
    S_pu4_ p1 = pp1 ? *pp1 : S_pu4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_pu4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void DrawRendererList(UnityEngine.Rendering.RendererList)bool w_vtS_pu4u4u4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_pu4u4u4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_pu4u4u4_* pp1 = DataTransfer::GetPointer<S_pu4u4u4_>(env, _sv1);
    S_pu4u4u4_ p1 = pp1 ? *pp1 : S_pu4u4u4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_pu4u4u4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_x(UnityEngine.UIElements.Length)bool w_vtS_r4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_r4i4_* pp1 = DataTransfer::GetPointer<S_r4i4_>(env, _sv1);
    S_r4i4_ p1 = pp1 ? *pp1 : S_r4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(UnityEngine.UIElements.Length, UnityEngine.UIElements.Length)bool w_vtS_r4i4_S_r4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4i4_S_r4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_r4i4_* pp1 = DataTransfer::GetPointer<S_r4i4_>(env, _sv1);
    S_r4i4_ p1 = pp1 ? *pp1 : S_r4i4_ {};
        
     // LuaValToCSVal struct
    S_r4i4_* pp2 = DataTransfer::GetPointer<S_r4i4_>(env, _sv2);
    S_r4i4_ p2 = pp2 ? *pp2 : S_r4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4i4_ p1, struct S_r4i4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEngine.UIElements.Length, UnityEngine.UIElements.Length, Single)bool w_vtS_r4i4_S_r4i4_r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4i4_S_r4i4_r4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4i4_* pp1 = DataTransfer::GetPointer<S_r4i4_>(env, _sv1);
    S_r4i4_ p1 = pp1 ? *pp1 : S_r4i4_ {};
        
     // LuaValToCSVal struct
    S_r4i4_* pp2 = DataTransfer::GetPointer<S_r4i4_>(env, _sv2);
    S_r4i4_ p2 = pp2 ? *pp2 : S_r4i4_ {};
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4i4_ p1, struct S_r4i4_ p2, float p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void RemoveKeyframe(UnityEditorInternal.AnimationKeyTime)bool w_vtS_r4i4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4i4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_r4i4r4_* pp1 = DataTransfer::GetPointer<S_r4i4r4_>(env, _sv1);
    S_r4i4r4_ p1 = pp1 ? *pp1 : S_r4i4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4i4r4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_curvature(UnityEngine.Vector2)bool w_vtS_r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4_>(env, _sv1);
    S_r4r4_ p1 = pp1 ? *pp1 : S_r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector2, System.Action)bool w_vtS_r4r4_Do(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4_Do");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4_>(env, _sv1);
    S_r4r4_ p1 = pp1 ? *pp1 : S_r4r4_ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4_ p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector2, Single, Single)bool w_vtS_r4r4_Dr4Dr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4_Dr4Dr4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4_>(env, _sv1);
    S_r4r4_ p1 = pp1 ? *pp1 : S_r4r4_ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4_ p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void AddForceAtPosition(UnityEngine.Vector2, UnityEngine.Vector2)bool w_vtS_r4r4_S_r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4_S_r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4_>(env, _sv1);
    S_r4r4_ p1 = pp1 ? *pp1 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4_>(env, _sv2);
    S_r4r4_ p2 = pp2 ? *pp2 : S_r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4_ p1, struct S_r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void BezierCurveTo(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2)bool w_vtS_r4r4_S_r4r4_S_r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4_S_r4r4_S_r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4_>(env, _sv1);
    S_r4r4_ p1 = pp1 ? *pp1 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4_>(env, _sv2);
    S_r4r4_ p2 = pp2 ? *pp2 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4_>(env, _sv3);
    S_r4r4_ p3 = pp3 ? *pp3 : S_r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4_ p1, struct S_r4r4_ p2, struct S_r4r4_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void SetScaleFocused(UnityEngine.Vector2, UnityEngine.Vector2, Boolean, Boolean)bool w_vtS_r4r4_S_r4r4_bb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4_S_r4r4_bb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4_>(env, _sv1);
    S_r4r4_ p1 = pp1 ? *pp1 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4_>(env, _sv2);
    S_r4r4_ p2 = pp2 ? *pp2 : S_r4r4_ {};
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4_ p1, struct S_r4r4_ p2, bool p3, bool p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void AddForceAtPosition(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.ForceMode2D)bool w_vtS_r4r4_S_r4r4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4_S_r4r4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4_>(env, _sv1);
    S_r4r4_ p1 = pp1 ? *pp1 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4_>(env, _sv2);
    S_r4r4_ p2 = pp2 ? *pp2 : S_r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4_ p1, struct S_r4r4_ p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void ArcTo(UnityEngine.Vector2, UnityEngine.Vector2, Single)bool w_vtS_r4r4_S_r4r4_r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4_S_r4r4_r4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4_>(env, _sv1);
    S_r4r4_ p1 = pp1 ? *pp1 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4_>(env, _sv2);
    S_r4r4_ p2 = pp2 ? *pp2 : S_r4r4_ {};
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4_ p1, struct S_r4r4_ p2, float p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void AddForce(UnityEngine.Vector2, UnityEngine.ForceMode2D)bool w_vtS_r4r4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4_>(env, _sv1);
    S_r4r4_ p1 = pp1 ? *pp1 : S_r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4_ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(System.Numerics.Vector2, Single)bool w_vtS_r4r4_r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4_r4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4_>(env, _sv1);
    S_r4r4_ p1 = pp1 ? *pp1 : S_r4r4_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4_ p1, float p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Arc(UnityEngine.Vector2, Single, UnityEngine.UIElements.Angle, UnityEngine.UIElements.Angle, UnityEngine.UIElements.ArcDirection)bool w_vtS_r4r4_r4S_r4i4_S_r4i4_Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4_r4S_r4i4_S_r4i4_Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4_>(env, _sv1);
    S_r4r4_ p1 = pp1 ? *pp1 : S_r4r4_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
     // LuaValToCSVal struct
    S_r4i4_* pp3 = DataTransfer::GetPointer<S_r4i4_>(env, _sv3);
    S_r4i4_ p3 = pp3 ? *pp3 : S_r4i4_ {};
        
     // LuaValToCSVal struct
    S_r4i4_* pp4 = DataTransfer::GetPointer<S_r4i4_>(env, _sv4);
    S_r4i4_ p4 = pp4 ? *pp4 : S_r4i4_ {};
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4_ p1, float p2, struct S_r4i4_ p3, struct S_r4i4_ p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void .ctor(System.Numerics.Vector2, Single, Single)bool w_vtS_r4r4_r4r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4_r4r4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4_>(env, _sv1);
    S_r4r4_ p1 = pp1 ? *pp1 : S_r4r4_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4_ p1, float p2, float p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void set_motor(UnityEngine.JointMotor)bool w_vtS_r4r4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4i4_* pp1 = DataTransfer::GetPointer<S_r4r4i4_>(env, _sv1);
    S_r4r4i4_ p1 = pp1 ? *pp1 : S_r4r4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void StartVideoModeAsync(UnityEngine.Windows.WebCam.CameraParameters, AudioState, OnVideoModeStartedCallback)bool w_vtS_r4r4i4i4i4_i4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4i4i4i4_i4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal struct
    S_r4r4i4i4i4_* pp1 = DataTransfer::GetPointer<S_r4r4i4i4i4_>(env, _sv1);
    S_r4r4i4i4i4_ p1 = pp1 ? *pp1 : S_r4r4i4i4i4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,struct S_r4r4i4i4i4_ p1, int32_t p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void StartPhotoModeAsync(UnityEngine.Windows.WebCam.CameraParameters, OnPhotoModeStartedCallback)bool w_vtS_r4r4i4i4i4_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4i4i4i4_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
     // LuaValToCSVal struct
    S_r4r4i4i4i4_* pp1 = DataTransfer::GetPointer<S_r4r4i4i4i4_>(env, _sv1);
    S_r4r4i4i4i4_ p1 = pp1 ? *pp1 : S_r4r4i4i4i4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,struct S_r4r4i4i4i4_ p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void set_destination(UnityEngine.Vector3)bool w_vtS_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void CalculateInterpolatedLightAndOcclusionProbe(UnityEngine.Vector3, Int32 ByRef, UnityEngine.Rendering.SphericalHarmonicsL2 ByRef, UnityEngine.Vector4 ByRef)bool w_vtS_r4r4r4_Pi4PS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_PS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_Pi4PS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_PS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
     // LuaValToCSVal Pstruct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* p3 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
     // LuaValToCSVal Pstruct
    S_r4r4r4r4_* p4 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, pesapi_unboxing(env, _sv4)); // valuetype ref
    S_r4r4r4r4_ up4;
    if (!p4) {
        memset(&up4, 0, sizeof(p4));
    }
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, void* p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void AddVertUv0(UnityEngine.Vector3, UnityEngine.Color32, UnityEngine.Vector2)bool w_vtS_r4r4r4_S_i4u1u1u1u1_S_r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_i4u1u1u1u1_S_r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4u1u1u1u1_* pp2 = DataTransfer::GetPointer<S_i4u1u1u1u1_>(env, _sv2);
    S_i4u1u1u1u1_ p2 = pp2 ? *pp2 : S_i4u1u1u1u1_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4_>(env, _sv3);
    S_r4r4_ p3 = pp3 ? *pp3 : S_r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_i4u1u1u1u1_ p2, struct S_r4r4_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void AddVertUv01(UnityEngine.Vector3, UnityEngine.Color32, UnityEngine.Vector2, UnityEngine.Vector2)bool w_vtS_r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4u1u1u1u1_* pp2 = DataTransfer::GetPointer<S_i4u1u1u1u1_>(env, _sv2);
    S_i4u1u1u1u1_ p2 = pp2 ? *pp2 : S_i4u1u1u1u1_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4_>(env, _sv3);
    S_r4r4_ p3 = pp3 ? *pp3 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4_>(env, _sv4);
    S_r4r4_ p4 = pp4 ? *pp4 : S_r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_i4u1u1u1u1_ p2, struct S_r4r4_ p3, struct S_r4r4_ p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void AddVertUv0123NT(UnityEngine.Vector3, UnityEngine.Color32, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector3, UnityEngine.Vector4)bool w_vtS_r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4r4_S_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4_S_r4r4_S_r4r4r4_S_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];
    auto TIp7 = wrapData->TypeInfos[7];
    auto TIp8 = wrapData->TypeInfos[8];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    if (checkLuaArgument) {
        if (lua_args_len != 8) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4u1u1u1u1_* pp2 = DataTransfer::GetPointer<S_i4u1u1u1u1_>(env, _sv2);
    S_i4u1u1u1u1_ p2 = pp2 ? *pp2 : S_i4u1u1u1u1_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4_>(env, _sv3);
    S_r4r4_ p3 = pp3 ? *pp3 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4_>(env, _sv4);
    S_r4r4_ p4 = pp4 ? *pp4 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp5 = DataTransfer::GetPointer<S_r4r4_>(env, _sv5);
    S_r4r4_ p5 = pp5 ? *pp5 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp6 = DataTransfer::GetPointer<S_r4r4_>(env, _sv6);
    S_r4r4_ p6 = pp6 ? *pp6 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp7 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv7);
    S_r4r4r4_ p7 = pp7 ? *pp7 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp8 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv8);
    S_r4r4r4r4_ p8 = pp8 ? *pp8 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_i4u1u1u1u1_ p2, struct S_r4r4_ p3, struct S_r4r4_ p4, struct S_r4r4_ p5, struct S_r4r4_ p6, struct S_r4r4r4_ p7, struct S_r4r4r4r4_ p8, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7, p8,  method);
    

        return true;
}
// Void AddVertUv01NT(UnityEngine.Vector3, UnityEngine.Color32, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector3, UnityEngine.Vector4)bool w_vtS_r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4r4_S_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4_S_r4r4r4_S_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4u1u1u1u1_* pp2 = DataTransfer::GetPointer<S_i4u1u1u1u1_>(env, _sv2);
    S_i4u1u1u1u1_ p2 = pp2 ? *pp2 : S_i4u1u1u1u1_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4_>(env, _sv3);
    S_r4r4_ p3 = pp3 ? *pp3 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4_>(env, _sv4);
    S_r4r4_ p4 = pp4 ? *pp4 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp5 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv5);
    S_r4r4r4_ p5 = pp5 ? *pp5 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp6 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv6);
    S_r4r4r4r4_ p6 = pp6 ? *pp6 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_i4u1u1u1u1_ p2, struct S_r4r4_ p3, struct S_r4r4_ p4, struct S_r4r4r4_ p5, struct S_r4r4r4r4_ p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void AddVertUv0NT(UnityEngine.Vector3, UnityEngine.Color32, UnityEngine.Vector2, UnityEngine.Vector3, UnityEngine.Vector4)bool w_vtS_r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4r4_S_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_i4u1u1u1u1_S_r4r4_S_r4r4r4_S_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4u1u1u1u1_* pp2 = DataTransfer::GetPointer<S_i4u1u1u1u1_>(env, _sv2);
    S_i4u1u1u1u1_ p2 = pp2 ? *pp2 : S_i4u1u1u1u1_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4_>(env, _sv3);
    S_r4r4_ p3 = pp3 ? *pp3 : S_r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv4);
    S_r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp5 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv5);
    S_r4r4r4r4_ p5 = pp5 ? *pp5 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_i4u1u1u1u1_ p2, struct S_r4r4_ p3, struct S_r4r4r4_ p4, struct S_r4r4r4r4_ p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void AddVert(UnityEngine.Vector3, UnityEngine.Color32, UnityEngine.Vector4)bool w_vtS_r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4u1u1u1u1_* pp2 = DataTransfer::GetPointer<S_i4u1u1u1u1_>(env, _sv2);
    S_i4u1u1u1u1_ p2 = pp2 ? *pp2 : S_i4u1u1u1u1_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_i4u1u1u1u1_ p2, struct S_r4r4r4r4_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void AddVert(UnityEngine.Vector3, UnityEngine.Color32, UnityEngine.Vector4, UnityEngine.Vector4, UnityEngine.Vector3, UnityEngine.Vector4)bool w_vtS_r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4u1u1u1u1_* pp2 = DataTransfer::GetPointer<S_i4u1u1u1u1_>(env, _sv2);
    S_i4u1u1u1u1_ p2 = pp2 ? *pp2 : S_i4u1u1u1u1_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv4);
    S_r4r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp5 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv5);
    S_r4r4r4_ p5 = pp5 ? *pp5 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp6 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv6);
    S_r4r4r4r4_ p6 = pp6 ? *pp6 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_i4u1u1u1u1_ p2, struct S_r4r4r4r4_ p3, struct S_r4r4r4r4_ p4, struct S_r4r4r4_ p5, struct S_r4r4r4r4_ p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void AddVert(UnityEngine.Vector3, UnityEngine.Color32, UnityEngine.Vector4, UnityEngine.Vector4, UnityEngine.Vector4, UnityEngine.Vector4, UnityEngine.Vector3, UnityEngine.Vector4)bool w_vtS_r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_i4u1u1u1u1_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4_S_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];
    auto TIp7 = wrapData->TypeInfos[7];
    auto TIp8 = wrapData->TypeInfos[8];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    if (checkLuaArgument) {
        if (lua_args_len != 8) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv8, TIp8, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4u1u1u1u1_* pp2 = DataTransfer::GetPointer<S_i4u1u1u1u1_>(env, _sv2);
    S_i4u1u1u1u1_ p2 = pp2 ? *pp2 : S_i4u1u1u1u1_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv4);
    S_r4r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp5 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv5);
    S_r4r4r4r4_ p5 = pp5 ? *pp5 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp6 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv6);
    S_r4r4r4r4_ p6 = pp6 ? *pp6 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp7 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv7);
    S_r4r4r4_ p7 = pp7 ? *pp7 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp8 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv8);
    S_r4r4r4r4_ p8 = pp8 ? *pp8 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_i4u1u1u1u1_ p2, struct S_r4r4r4r4_ p3, struct S_r4r4r4r4_ p4, struct S_r4r4r4r4_ p5, struct S_r4r4r4r4_ p6, struct S_r4r4r4_ p7, struct S_r4r4r4r4_ p8, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7, p8,  method);
    

        return true;
}
// Void SetMinMax(UnityEngine.Vector3, UnityEngine.Vector3)bool w_vtS_r4r4r4_S_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector3, UnityEngine.Vector3, Single, Int32, Int32)bool w_vtS_r4r4r4_S_r4r4r4_Dr4Di4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4_Dr4Di4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4_ p2, void* p3, void* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.QueryParameters, Single)bool w_vtS_r4r4r4_S_r4r4r4_S_i4bi4b_Dr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4_S_i4bi4b_Dr4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4bi4b_* pp3 = DataTransfer::GetPointer<S_i4bi4b_>(env, _sv3);
    S_i4bi4b_ p3 = pp3 ? *pp3 : S_i4bi4b_ {};
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4_ p2, struct S_i4bi4b_ p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void Set3Points(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3)bool w_vtS_r4r4r4_S_r4r4r4_S_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4_S_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv3);
    S_r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4_ p2, struct S_r4r4r4_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.QueryParameters)bool w_vtS_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4bi4b_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_i4bi4b_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4bi4b_* pp4 = DataTransfer::GetPointer<S_i4bi4b_>(env, _sv4);
    S_i4bi4b_ p4 = pp4 ? *pp4 : S_i4bi4b_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, struct S_i4bi4b_ p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Vector3, Single, Int32)bool w_vtS_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_r4r4r4_Dr4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_r4r4r4_Dr4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv4);
    S_r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, struct S_r4r4r4_ p4, void* p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Vector3, UnityEngine.QueryParameters, Single)bool w_vtS_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_i4bi4b_Dr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4_S_r4r4r4r4_S_r4r4r4_S_i4bi4b_Dr4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];
    auto TIp6 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv4);
    S_r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4bi4b_* pp5 = DataTransfer::GetPointer<S_i4bi4b_>(env, _sv5);
    S_i4bi4b_ p5 = pp5 ? *pp5 : S_i4bi4b_ {};
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, struct S_r4r4r4_ p4, struct S_i4bi4b_ p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void AddForceAtPosition(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.ForceMode)bool w_vtS_r4r4r4_S_r4r4r4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4_ p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void RotateAround(UnityEngine.Vector3, UnityEngine.Vector3, Single)bool w_vtS_r4r4r4_S_r4r4r4_r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4_r4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4_ p2, float p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector3, UnityEngine.Vector3, Single, UnityEngine.QueryParameters)bool w_vtS_r4r4r4_S_r4r4r4_r4S_i4bi4b_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4_r4S_i4bi4b_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
     // LuaValToCSVal struct
    S_i4bi4b_* pp4 = DataTransfer::GetPointer<S_i4bi4b_>(env, _sv4);
    S_i4bi4b_ p4 = pp4 ? *pp4 : S_i4bi4b_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4_ p2, float p3, struct S_i4bi4b_ p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector3, UnityEngine.Vector3, Single, UnityEngine.Vector3, Single, Int32)bool w_vtS_r4r4r4_S_r4r4r4_r4S_r4r4r4_Dr4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4_r4S_r4r4r4_Dr4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv4);
    S_r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4_ p2, float p3, struct S_r4r4r4_ p4, void* p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector3, UnityEngine.Vector3, Single, UnityEngine.Vector3, UnityEngine.QueryParameters, Single)bool w_vtS_r4r4r4_S_r4r4r4_r4S_r4r4r4_S_i4bi4b_Dr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4_r4S_r4r4r4_S_i4bi4b_Dr4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv4);
    S_r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4bi4b_* pp5 = DataTransfer::GetPointer<S_i4bi4b_>(env, _sv5);
    S_i4bi4b_ p5 = pp5 ? *pp5 : S_i4bi4b_ {};
        
 // LuaValToCSVal P any
    void* p6 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4_ p2, float p3, struct S_r4r4r4_ p4, struct S_i4bi4b_ p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void Emit(UnityEngine.Vector3, UnityEngine.Vector3, Single, Single, UnityEngine.Color32)bool w_vtS_r4r4r4_S_r4r4r4_r4r4S_i4u1u1u1u1_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4_r4r4S_i4u1u1u1u1_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp5 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!converter::Converter<float>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    float p4 = converter::Converter<float>::toCpp(env, _sv4);        
        
     // LuaValToCSVal struct
    S_i4u1u1u1u1_* pp5 = DataTransfer::GetPointer<S_i4u1u1u1u1_>(env, _sv5);
    S_i4u1u1u1u1_ p5 = pp5 ? *pp5 : S_i4u1u1u1u1_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4_ p2, float p3, float p4, struct S_i4u1u1u1u1_ p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void SetPositionAndRotation(UnityEngine.Vector3, UnityEngine.Quaternion)bool w_vtS_r4r4r4_S_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetTRS(UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Vector3)bool w_vtS_r4r4r4_S_r4r4r4r4_S_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4r4_S_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv3);
    S_r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4r4_ p2, struct S_r4r4r4_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void MatchTarget(UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.AvatarTarget, UnityEngine.MatchTargetWeightMask, Single)bool w_vtS_r4r4r4_S_r4r4r4r4_i4S_S_r4r4r4_r4_r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4r4_i4S_S_r4r4r4_r4_r4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!converter::Converter<float>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal struct
    S_S_r4r4r4_r4_* pp4 = DataTransfer::GetPointer<S_S_r4r4r4_r4_>(env, _sv4);
    S_S_r4r4r4_r4_ p4 = pp4 ? *pp4 : S_S_r4r4r4_r4_ {};
        
 // LuaValToCSVal P any
    float p5 = converter::Converter<float>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4r4_ p2, int32_t p3, struct S_S_r4r4r4_r4_ p4, float p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void MatchTarget(UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.AvatarTarget, UnityEngine.MatchTargetWeightMask, Single, Single)bool w_vtS_r4r4r4_S_r4r4r4r4_i4S_S_r4r4r4_r4_r4r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4r4_i4S_S_r4r4r4_r4_r4r4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!converter::Converter<float>::accept(env, _sv5)) return false;                if (!converter::Converter<float>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal struct
    S_S_r4r4r4_r4_* pp4 = DataTransfer::GetPointer<S_S_r4r4r4_r4_>(env, _sv4);
    S_S_r4r4r4_r4_ p4 = pp4 ? *pp4 : S_S_r4r4r4_r4_ {};
        
 // LuaValToCSVal P any
    float p5 = converter::Converter<float>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    float p6 = converter::Converter<float>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4r4_ p2, int32_t p3, struct S_S_r4r4r4_r4_ p4, float p5, float p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void MatchTarget(UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.AvatarTarget, UnityEngine.MatchTargetWeightMask, Single, Single, Boolean)bool w_vtS_r4r4r4_S_r4r4r4r4_i4S_S_r4r4r4_r4_r4r4b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4r4_i4S_S_r4r4r4_r4_r4r4b");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!converter::Converter<float>::accept(env, _sv5)) return false;                if (!converter::Converter<float>::accept(env, _sv6)) return false;                if (!converter::Converter<bool>::accept(env, _sv7)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal struct
    S_S_r4r4r4_r4_* pp4 = DataTransfer::GetPointer<S_S_r4r4r4_r4_>(env, _sv4);
    S_S_r4r4r4_r4_ p4 = pp4 ? *pp4 : S_S_r4r4r4_r4_ {};
        
 // LuaValToCSVal P any
    float p5 = converter::Converter<float>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    float p6 = converter::Converter<float>::toCpp(env, _sv6);        
        
 // LuaValToCSVal P any
    bool p7 = converter::Converter<bool>::toCpp(env, _sv7);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4r4_ p2, int32_t p3, struct S_S_r4r4r4_r4_ p4, float p5, float p6, bool p7, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void AddDirectionalLight(UnityEngine.Vector3, UnityEngine.Color, Single)bool w_vtS_r4r4r4_S_r4r4r4r4_r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4r4_r4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4r4_ p2, float p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void LookAt(UnityEngine.Vector3, UnityEngine.Quaternion, Single, Boolean)bool w_vtS_r4r4r4_S_r4r4r4r4_r4b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4r4_r4b");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4r4_ p2, float p3, bool p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void LookAt(UnityEngine.Vector3, UnityEngine.Quaternion, Single, Boolean, Boolean)bool w_vtS_r4r4r4_S_r4r4r4r4_r4bb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_S_r4r4r4r4_r4bb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, struct S_r4r4r4r4_ p2, float p3, bool p4, bool p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Translate(UnityEngine.Vector3, UnityEngine.Space)bool w_vtS_r4r4r4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector3, Int32, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Vector3)bool w_vtS_r4r4r4_i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_i4S_r4r4r4_S_r4r4r4r4_S_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv3);
    S_r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv4);
    S_r4r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp5 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv5);
    S_r4r4r4_ p5 = pp5 ? *pp5 : S_r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, int32_t p2, struct S_r4r4r4_ p3, struct S_r4r4r4r4_ p4, struct S_r4r4r4_ p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void ApplyInputDeviceDelta(UnityEngine.Vector3, UnityEngine.UIElements.DeltaSpeed, Int32)bool w_vtS_r4r4r4_i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, int32_t p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void ApplyInputDeviceDelta(UnityEngine.Vector3, UnityEngine.UIElements.DeltaSpeed, Int64)bool w_vtS_r4r4r4_i4i8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_i4i8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int64_t p3 = converter::Converter<int64_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, int32_t p2, int64_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void ApplyInputDeviceDelta(UnityEngine.Vector3, UnityEngine.UIElements.DeltaSpeed, TValueType)bool w_vtS_r4r4r4_i4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_i4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, int32_t p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void ApplyInputDeviceDelta(UnityEngine.Vector3, UnityEngine.UIElements.DeltaSpeed, Single)bool w_vtS_r4r4r4_i4r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_i4r4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, int32_t p2, float p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void ApplyInputDeviceDelta(UnityEngine.Vector3, UnityEngine.UIElements.DeltaSpeed, Double)bool w_vtS_r4r4r4_i4r8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_i4r8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<double>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    double p3 = converter::Converter<double>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, int32_t p2, double p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void ApplyInputDeviceDelta(UnityEngine.Vector3, UnityEngine.UIElements.DeltaSpeed, UInt32)bool w_vtS_r4r4r4_i4u4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_i4u4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<uint32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    uint32_t p3 = converter::Converter<uint32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, int32_t p2, uint32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void ApplyInputDeviceDelta(UnityEngine.Vector3, UnityEngine.UIElements.DeltaSpeed, UInt64)bool w_vtS_r4r4r4_i4u8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_i4u8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<uint64_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    uint64_t p3 = converter::Converter<uint64_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, int32_t p2, uint64_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void Translate(UnityEngine.Vector3, UnityEngine.Transform)bool w_vtS_r4r4r4_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector3, UnityEngine.Collider, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Vector3)bool w_vtS_r4r4r4_oS_r4r4r4_S_r4r4r4r4_S_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_oS_r4r4r4_S_r4r4r4r4_S_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv3);
    S_r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv4);
    S_r4r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp5 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv5);
    S_r4r4r4_ p5 = pp5 ? *pp5 : S_r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, Il2CppObject* p2, struct S_r4r4r4_ p3, struct S_r4r4r4r4_ p4, struct S_r4r4r4_ p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void GetInterpolatedLightProbe(UnityEngine.Vector3, UnityEngine.Renderer, Single[])bool w_vtS_r4r4r4_oo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_oo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, Il2CppObject* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void SetAxisAngle(UnityEngine.Vector3, Single)bool w_vtS_r4r4r4_r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_r4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, float p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector3, Single, UnityEngine.QueryParameters)bool w_vtS_r4r4r4_r4S_i4bi4b_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_r4S_i4bi4b_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
     // LuaValToCSVal struct
    S_i4bi4b_* pp3 = DataTransfer::GetPointer<S_i4bi4b_>(env, _sv3);
    S_i4bi4b_ p3 = pp3 ? *pp3 : S_i4bi4b_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, float p2, struct S_i4bi4b_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector3, Single, UnityEngine.Vector3, Single, Int32)bool w_vtS_r4r4r4_r4S_r4r4r4_Dr4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_r4S_r4r4r4_Dr4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv3);
    S_r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, float p2, struct S_r4r4r4_ p3, void* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector3, Single, UnityEngine.Vector3, UnityEngine.QueryParameters, Single)bool w_vtS_r4r4r4_r4S_r4r4r4_S_i4bi4b_Dr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_r4S_r4r4r4_S_i4bi4b_Dr4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv3);
    S_r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_i4bi4b_* pp4 = DataTransfer::GetPointer<S_i4bi4b_>(env, _sv4);
    S_i4bi4b_ p4 = pp4 ? *pp4 : S_i4bi4b_ {};
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, float p2, struct S_r4r4r4_ p3, struct S_i4bi4b_ p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Rotate(UnityEngine.Vector3, Single, UnityEngine.Space)bool w_vtS_r4r4r4_r4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_r4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, float p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector3, Single, Single)bool w_vtS_r4r4r4_r4r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4_r4r4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv1);
    S_r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4_ p1, float p2, float p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void SetPlaybackState(PlaybackState)bool w_vtS_r4r4r4i4S_r4r4S_u4u4u4u4__S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4__r4r4r4r4r4r4i4_S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_r4_S_S_u4u4u4u4_r4_S_r4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4i4S_r4r4S_u4u4u4u4__S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4__r4r4r4r4r4r4i4_S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_r4_S_S_u4u4u4u4_r4_S_r4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4i4S_r4r4S_u4u4u4u4__S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4__r4r4r4r4r4r4i4_S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_r4_S_S_u4u4u4u4_r4_S_r4__* pp1 = DataTransfer::GetPointer<S_r4r4r4i4S_r4r4S_u4u4u4u4__S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4__r4r4r4r4r4r4i4_S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_r4_S_S_u4u4u4u4_r4_S_r4__>(env, _sv1);
    S_r4r4r4i4S_r4r4S_u4u4u4u4__S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4__r4r4r4r4r4r4i4_S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_r4_S_S_u4u4u4u4_r4_S_r4__ p1 = pp1 ? *pp1 : S_r4r4r4i4S_r4r4S_u4u4u4u4__S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4__r4r4r4r4r4r4i4_S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_r4_S_S_u4u4u4u4_r4_S_r4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4i4S_r4r4S_u4u4u4u4__S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4__r4r4r4r4r4r4i4_S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_S_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4_S_u4u4u4u4___S_r4_S_S_u4u4u4u4_r4_S_r4__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_xDrive(UnityEngine.JointDrive)bool w_vtS_r4r4r4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4i4_* pp1 = DataTransfer::GetPointer<S_r4r4r4i4_>(env, _sv1);
    S_r4r4r4i4_ p1 = pp1 ? *pp1 : S_r4r4r4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_rotation(UnityEngine.Quaternion)bool w_vtS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void DropDown(UnityEngine.Rect, UnityEngine.UIElements.VisualElement, Boolean)bool w_vtS_r4r4r4r4_DoDb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_DoDb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void ConfigureClear(UnityEngine.Color, Single, UInt32)bool w_vtS_r4r4r4r4_Dr4Du4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_Dr4Du4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void ShowAsDropDown(UnityEngine.Rect, UnityEngine.Vector2)bool w_vtS_r4r4r4r4_S_r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_S_r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4_>(env, _sv2);
    S_r4r4_ p2 = pp2 ? *pp2 : S_r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, struct S_r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void ShowAsDropDown(UnityEngine.Rect, UnityEngine.Vector2, UnityEditor.PopupLocation[])bool w_vtS_r4r4r4r4_S_r4r4_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_S_r4r4_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4_>(env, _sv2);
    S_r4r4_ p2 = pp2 ? *pp2 : S_r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, struct S_r4r4_ p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void ShowAsDropDown(UnityEngine.Rect, UnityEngine.Vector2, UnityEditor.PopupLocation[], UnityEditor.ShowMode)bool w_vtS_r4r4r4r4_S_r4r4_oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_S_r4r4_oi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4_>(env, _sv2);
    S_r4r4_ p2 = pp2 ? *pp2 : S_r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, struct S_r4r4_ p2, Il2CppObject* p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void ShowAsDropDown(UnityEngine.Rect, UnityEngine.Vector2, UnityEditor.PopupLocation[], UnityEditor.ShowMode, Boolean)bool w_vtS_r4r4r4r4_S_r4r4_oi4b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_S_r4r4_oi4b");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4_>(env, _sv2);
    S_r4r4_ p2 = pp2 ? *pp2 : S_r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, struct S_r4r4_ p2, Il2CppObject* p3, int32_t p4, bool p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void SetColors(UnityEngine.Color, UnityEngine.Color)bool w_vtS_r4r4r4r4_S_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_S_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, struct S_r4r4r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Vector4, UnityEngine.Vector4, UnityEngine.Vector4, UnityEngine.Vector4)bool w_vtS_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_S_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv4);
    S_r4r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, struct S_r4r4r4r4_ p2, struct S_r4r4r4r4_ p3, struct S_r4r4r4r4_ p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void Cull(UnityEngine.Rect, Boolean)bool w_vtS_r4r4r4r4_b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_b");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, bool p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Draw(UnityEngine.Rect, Boolean, Boolean, Boolean, Boolean)bool w_vtS_r4r4r4r4_bbbb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_bbbb");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, bool p2, bool p3, bool p4, bool p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void LightmapEmissionProperty(UnityEngine.Rect, Int32)bool w_vtS_r4r4r4r4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void ReadPixels(UnityEngine.Rect, Int32, Int32)bool w_vtS_r4r4r4r4_i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, int32_t p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void ReadPixels(UnityEngine.Rect, Int32, Int32, Boolean)bool w_vtS_r4r4r4r4_i4i4b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_i4i4b");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, int32_t p2, int32_t p3, bool p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void OnPreviewGUI(UnityEngine.Rect, UnityEngine.GUIStyle)bool w_vtS_r4r4r4r4_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Rect, UnityEditor.CurveWrapper[], Boolean)bool w_vtS_r4r4r4r4_ob(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_ob");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, Il2CppObject* p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void Draw(UnityEngine.Rect, UnityEngine.Texture, Boolean, Boolean, Boolean, Boolean)bool w_vtS_r4r4r4r4_obbbb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_obbbb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;                if (!converter::Converter<bool>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    bool p6 = converter::Converter<bool>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, Il2CppObject* p2, bool p3, bool p4, bool p5, bool p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void Draw(UnityEngine.Rect, UnityEngine.GUIContent, Int32)bool w_vtS_r4r4r4r4_oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_oi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, Il2CppObject* p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void Draw(UnityEngine.Rect, UnityEngine.GUIContent, Int32, Boolean)bool w_vtS_r4r4r4r4_oi4b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_oi4b");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, Il2CppObject* p2, int32_t p3, bool p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void Draw(UnityEngine.Rect, UnityEngine.GUIContent, Int32, Boolean, Boolean)bool w_vtS_r4r4r4r4_oi4bb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_oi4bb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, Il2CppObject* p2, int32_t p3, bool p4, bool p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void DrawCursor(UnityEngine.Rect, UnityEngine.GUIContent, Int32, Int32)bool w_vtS_r4r4r4r4_oi4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_oi4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, Il2CppObject* p2, int32_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void DrawWithTextSelection(UnityEngine.Rect, UnityEngine.GUIContent, Int32, Int32, Int32)bool w_vtS_r4r4r4r4_oi4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_oi4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, Il2CppObject* p2, int32_t p3, int32_t p4, int32_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void OnGUI(UnityEngine.Rect, UnityEditor.SerializedProperty, UnityEngine.GUIContent)bool w_vtS_r4r4r4r4_oo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_oo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, Il2CppObject* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void ShaderProperty(UnityEngine.Rect, UnityEditor.MaterialProperty, UnityEngine.GUIContent, Int32)bool w_vtS_r4r4r4r4_ooi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_ooi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, Il2CppObject* p2, Il2CppObject* p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void OnGUI(UnityEngine.Rect, UnityEditor.MaterialProperty, UnityEngine.GUIContent, UnityEditor.MaterialEditor)bool w_vtS_r4r4r4r4_ooo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_ooo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void ShaderProperty(UnityEngine.Rect, UnityEditor.MaterialProperty, System.String)bool w_vtS_r4r4r4r4_os(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_os");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, Il2CppObject* p2, Il2CppString* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void ShaderProperty(UnityEngine.Rect, UnityEditor.MaterialProperty, System.String, Int32)bool w_vtS_r4r4r4r4_osi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_osi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, Il2CppObject* p2, Il2CppString* p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void OnGUI(UnityEngine.Rect, UnityEditor.MaterialProperty, System.String, UnityEditor.MaterialEditor)bool w_vtS_r4r4r4r4_oso(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_oso");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, Il2CppObject* p2, Il2CppString* p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void DrawMajorTicks(UnityEngine.Rect, Single)bool w_vtS_r4r4r4r4_r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_r4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, float p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void CrossFadeColor(UnityEngine.Color, Single, Boolean, Boolean)bool w_vtS_r4r4r4r4_r4bb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_r4bb");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, float p2, bool p3, bool p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void CrossFadeColor(UnityEngine.Color, Single, Boolean, Boolean, Boolean)bool w_vtS_r4r4r4r4_r4bbb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_r4bbb");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, float p2, bool p3, bool p4, bool p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void TimeRuler(UnityEngine.Rect, Single, Boolean, Boolean, Single, TimeFormat)bool w_vtS_r4r4r4r4_r4bbr4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_r4bbr4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;                if (!converter::Converter<float>::accept(env, _sv5)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    float p5 = converter::Converter<float>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, float p2, bool p3, bool p4, float p5, int32_t p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void CalculateFrustumCorners(UnityEngine.Rect, Single, MonoOrStereoscopicEye, UnityEngine.Vector3[])bool w_vtS_r4r4r4r4_r4i4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_r4i4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, float p2, int32_t p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void Draw(UnityEngine.Rect, System.String, Boolean, Boolean, Boolean, Boolean)bool w_vtS_r4r4r4r4_sbbbb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_sbbbb");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;                if (!converter::Converter<bool>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    bool p6 = converter::Converter<bool>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, Il2CppString* p2, bool p3, bool p4, bool p5, bool p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void Slot(UnityEngine.Rect, System.String, UnityEditor.Graphs.Slot, Boolean, Boolean, Boolean, UnityEngine.GUIStyle)bool w_vtS_r4r4r4r4_sobbbo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4_sobbbo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp7 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;                if (!converter::Converter<bool>::accept(env, _sv6)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    bool p6 = converter::Converter<bool>::toCpp(env, _sv6);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4_ p1, Il2CppString* p2, Il2CppObject* p3, bool p4, bool p5, bool p6, Il2CppObject* p7, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void set_metrics(UnityEngine.TextCore.GlyphMetrics)bool w_vtS_r4r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4r4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_Struct6(NoGen6FloatStruct)bool w_vtS_r4r4r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4r4r4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_limits(UnityEngine.JointLimits)bool w_vtS_r4r4r4r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4r4r4r4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_xDrive(UnityEngine.ArticulationDrive)bool w_vtS_r4r4r4r4r4r4r4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4r4r4r4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4i4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4i4_>(env, _sv1);
    S_r4r4r4r4r4r4r4i4_ p1 = pp1 ? *pp1 : S_r4r4r4r4r4r4r4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4r4r4r4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_transform(UnityEngine.Matrix4x4)bool w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void PreviewMesh(UnityEngine.Matrix4x4, UnityEngine.Material[] ByRef)bool w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_Po(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_Po");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal Po/PO
    Il2CppObject* up2 = DataTransfer::GetPointer<Il2CppObject>(env, pesapi_unboxing(env, _sv2)); // object ret
    Il2CppObject** p2 = &up2;
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetStereoViewMatrices(UnityEngine.Matrix4x4, UnityEngine.Matrix4x4)bool w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1, struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void TransformSelectedKeys(UnityEngine.Matrix4x4, Boolean, Boolean, Boolean)bool w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_bbb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_bbb");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1, bool p2, bool p3, bool p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void DrawProcedural(UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.MeshTopology, Int32)bool w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1, Il2CppObject* p2, int32_t p3, int32_t p4, int32_t p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void DrawProcedural(UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.MeshTopology, Int32, Int32)bool w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4i4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4i4i4i4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1, Il2CppObject* p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void DrawProcedural(UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.MeshTopology, Int32, Int32, UnityEngine.MaterialPropertyBlock)bool w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4i4i4i4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4i4i4i4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp7 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1, Il2CppObject* p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, Il2CppObject* p7, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void DrawProceduralIndirect(UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.MeshTopology, UnityEngine.ComputeBuffer)bool w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4i4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4i4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp5 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1, Il2CppObject* p2, int32_t p3, int32_t p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void DrawProceduralIndirect(UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.MeshTopology, UnityEngine.ComputeBuffer, Int32)bool w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4i4oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4i4oi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp5 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1, Il2CppObject* p2, int32_t p3, int32_t p4, Il2CppObject* p5, int32_t p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void DrawProceduralIndirect(UnityEngine.Matrix4x4, UnityEngine.Material, Int32, UnityEngine.MeshTopology, UnityEngine.ComputeBuffer, Int32, UnityEngine.MaterialPropertyBlock)bool w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4i4oi4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_oi4i4oi4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp5 = wrapData->TypeInfos[3];
    auto TIp7 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1, Il2CppObject* p2, int32_t p3, int32_t p4, Il2CppObject* p5, int32_t p6, Il2CppObject* p7, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void UpdateMesh(UnityEngine.Matrix4x4, System.Collections.Generic.List`1[TreeEditor.TreeMaterial], System.Collections.Generic.List`1[TreeEditor.TreeVertex], System.Collections.Generic.List`1[TreeEditor.TreeTriangle], System.Collections.Generic.List`1[TreeEditor.TreeAOSphere], Int32, Single, Single)bool w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ooooi4r4r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ooooi4r4r4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];
    auto TIp5 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    if (checkLuaArgument) {
        if (lua_args_len != 8) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!converter::Converter<float>::accept(env, _sv7)) return false;                if (!converter::Converter<float>::accept(env, _sv8)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
 // LuaValToCSVal P any
    float p7 = converter::Converter<float>::toCpp(env, _sv7);        
        
 // LuaValToCSVal P any
    float p8 = converter::Converter<float>::toCpp(env, _sv8);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1, Il2CppObject* p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, int32_t p6, float p7, float p8, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7, p8,  method);
    

        return true;
}
// Void TransformRippleKeys(UnityEngine.Matrix4x4, Single, Single, Boolean, Boolean)bool w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4bb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_r4r4bb");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal struct
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_* pp1 = DataTransfer::GetPointer<S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_>(env, _sv1);
    S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1 = pp1 ? *pp1 : S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void*,struct S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ p1, float p2, float p3, bool p4, bool p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Sub(EmployeestructReflect, EmployeestructReflect, EmployeestructReflect ByRef, EmployeestructReflect ByRef)bool w_vtS_si4i4i4_PS_si4i4i4_PS_si4i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_si4i4i4_PS_si4i4i4_PS_si4i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_si4i4i4_* pp1 = DataTransfer::GetPointer<S_si4i4i4_>(env, _sv1);
    S_si4i4i4_ p1 = pp1 ? *pp1 : S_si4i4i4_ {};
        
     // LuaValToCSVal Pstruct
    S_si4i4i4_* p2 = DataTransfer::GetPointer<S_si4i4i4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_si4i4i4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
     // LuaValToCSVal Pstruct
    S_si4i4i4_* p3 = DataTransfer::GetPointer<S_si4i4i4_>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_si4i4i4_ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
    typedef void (*FuncToCall)(void*,struct S_si4i4i4_ p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void set_fontAssetCreationEditorSettings(UnityEngine.TextCore.Text.FontAssetCreationEditorSettings)bool w_vtS_si4i4i4i4i4i4i4i4i4sssi4r4i4b_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_si4i4i4i4i4i4i4i4i4sssi4r4i4b_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_si4i4i4i4i4i4i4i4i4sssi4r4i4b_* pp1 = DataTransfer::GetPointer<S_si4i4i4i4i4i4i4i4i4sssi4r4i4b_>(env, _sv1);
    S_si4i4i4i4i4i4i4i4i4sssi4r4i4b_ p1 = pp1 ? *pp1 : S_si4i4i4i4i4i4i4i4i4sssi4r4i4b_ {};
        
    typedef void (*FuncToCall)(void*,struct S_si4i4i4i4i4i4i4i4i4sssi4r4i4b_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void SetProperty(System.Security.Cryptography.CngProperty)bool w_vtS_si4oN_bi4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_si4oN_bi4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_si4oN_bi4__* pp1 = DataTransfer::GetPointer<S_si4oN_bi4__>(env, _sv1);
    S_si4oN_bi4__ p1 = pp1 ? *pp1 : S_si4oN_bi4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_si4oN_bi4__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(UnityEditor.Search.SearchDocument, Int32)bool w_vtS_si4ssi4_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_si4ssi4_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_si4ssi4_* pp1 = DataTransfer::GetPointer<S_si4ssi4_>(env, _sv1);
    S_si4ssi4_ p1 = pp1 ? *pp1 : S_si4ssi4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_si4ssi4_ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEditor.Search.SearchDocument, System.String)bool w_vtS_si4ssi4_s(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_si4ssi4_s");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_si4ssi4_* pp1 = DataTransfer::GetPointer<S_si4ssi4_>(env, _sv1);
    S_si4ssi4_ p1 = pp1 ? *pp1 : S_si4ssi4_ {};
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
    typedef void (*FuncToCall)(void*,struct S_si4ssi4_ p1, Il2CppString* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Bind(UnityEditor.EditorCurveBinding)bool w_vtS_sosi4i4i4i4i4i4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_sosi4i4i4i4i4i4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_sosi4i4i4i4i4i4i4_* pp1 = DataTransfer::GetPointer<S_sosi4i4i4i4i4i4i4_>(env, _sv1);
    S_sosi4i4i4i4i4i4i4_ p1 = pp1 ? *pp1 : S_sosi4i4i4i4i4i4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_sosi4i4i4i4i4i4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Enable(UnityEngine.Rendering.ShaderKeyword)bool w_vtS_su4bbb_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_su4bbb_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_su4bbb_* pp1 = DataTransfer::GetPointer<S_su4bbb_>(env, _sv1);
    S_su4bbb_ p1 = pp1 ? *pp1 : S_su4bbb_ {};
        
    typedef void (*FuncToCall)(void*,struct S_su4bbb_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_debug(UnityEngine.AI.NavMeshBuildDebugSettings)bool w_vtS_u1_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_u1_* pp1 = DataTransfer::GetPointer<S_u1_>(env, _sv1);
    S_u1_ p1 = pp1 ? *pp1 : S_u1_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u1_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_depthState(UnityEngine.Rendering.DepthState)bool w_vtS_u1i1_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1i1_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_u1i1_* pp1 = DataTransfer::GetPointer<S_u1i1_>(env, _sv1);
    S_u1i1_ p1 = pp1 ? *pp1 : S_u1i1_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u1i1_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void SetStruct(GenCodeStruct, Int32 ByRef, NoGenCodeStruct ByRef)bool w_vtS_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__Pi4PS_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__Pi4PS_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__* pp1 = DataTransfer::GetPointer<S_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__>(env, _sv1);
    S_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__ p1 = pp1 ? *pp1 : S_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
     // LuaValToCSVal Pstruct
    S_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__* p3 = DataTransfer::GetPointer<S_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
    typedef void (*FuncToCall)(void*,struct S_u1i2u2i4i4u4i8u8r8r4cS_i4i4i4i4u8_sS_i4i4s__ p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void Emit(System.Reflection.Emit.OpCode)bool w_vtS_u1u1u1u1u1u1u1u1_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1u1u1u1u1u1u1u1_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_u1u1u1u1u1u1u1u1_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u1u1u1u1u1u1u1u1_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label)bool w_vtS_u1u1u1u1u1u1u1u1_S_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1u1u1u1u1u1u1u1_S_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_u1u1u1u1u1u1u1u1_ {};
        
     // LuaValToCSVal struct
    S_i4_* pp2 = DataTransfer::GetPointer<S_i4_>(env, _sv2);
    S_i4_ p2 = pp2 ? *pp2 : S_i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u1u1u1u1u1u1u1u1_ p1, struct S_i4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Emit(System.Reflection.Emit.OpCode, SByte)bool w_vtS_u1u1u1u1u1u1u1u1_i1(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1u1u1u1u1u1u1u1_i1");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int8_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_u1u1u1u1u1u1u1u1_ {};
        
 // LuaValToCSVal P any
    int8_t p2 = converter::Converter<int8_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_u1u1u1u1u1u1u1u1_ p1, int8_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Emit(System.Reflection.Emit.OpCode, Int16)bool w_vtS_u1u1u1u1u1u1u1u1_i2(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1u1u1u1u1u1u1u1_i2");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int16_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_u1u1u1u1u1u1u1u1_ {};
        
 // LuaValToCSVal P any
    int16_t p2 = converter::Converter<int16_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_u1u1u1u1u1u1u1u1_ p1, int16_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Emit(System.Reflection.Emit.OpCode, Int32)bool w_vtS_u1u1u1u1u1u1u1u1_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1u1u1u1u1u1u1u1_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_u1u1u1u1u1u1u1u1_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_u1u1u1u1u1u1u1u1_ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void EmitCalli(System.Reflection.Emit.OpCode, System.Runtime.InteropServices.CallingConvention, System.Type, System.Type[])bool w_vtS_u1u1u1u1u1u1u1u1_i4oo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1u1u1u1u1u1u1u1_i4oo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;            }
     // LuaValToCSVal struct
    S_u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_u1u1u1u1u1u1u1u1_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(void*,struct S_u1u1u1u1u1u1u1u1_ p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void EmitCalli(System.Reflection.Emit.OpCode, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[])bool w_vtS_u1u1u1u1u1u1u1u1_i4ooo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1u1u1u1u1u1u1u1_i4ooo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;            }
     // LuaValToCSVal struct
    S_u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_u1u1u1u1u1u1u1u1_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(void*,struct S_u1u1u1u1u1u1u1u1_ p1, int32_t p2, Il2CppObject* p3, Il2CppObject* p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Emit(System.Reflection.Emit.OpCode, Int64)bool w_vtS_u1u1u1u1u1u1u1u1_i8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1u1u1u1u1u1u1u1_i8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int64_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_u1u1u1u1u1u1u1u1_ {};
        
 // LuaValToCSVal P any
    int64_t p2 = converter::Converter<int64_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_u1u1u1u1u1u1u1u1_ p1, int64_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Emit(System.Reflection.Emit.OpCode, System.Reflection.ConstructorInfo)bool w_vtS_u1u1u1u1u1u1u1u1_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1u1u1u1u1u1u1u1_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
     // LuaValToCSVal struct
    S_u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_u1u1u1u1u1u1u1u1_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,struct S_u1u1u1u1u1u1u1u1_ p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void EmitCall(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo, System.Type[])bool w_vtS_u1u1u1u1u1u1u1u1_oo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1u1u1u1u1u1u1u1_oo");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal struct
    S_u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_u1u1u1u1u1u1u1u1_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,struct S_u1u1u1u1u1u1u1u1_ p1, Il2CppObject* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void Emit(System.Reflection.Emit.OpCode, Single)bool w_vtS_u1u1u1u1u1u1u1u1_r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1u1u1u1u1u1u1u1_r4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_u1u1u1u1u1u1u1u1_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_u1u1u1u1u1u1u1u1_ p1, float p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Emit(System.Reflection.Emit.OpCode, Double)bool w_vtS_u1u1u1u1u1u1u1u1_r8(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1u1u1u1u1u1u1u1_r8");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<double>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_u1u1u1u1u1u1u1u1_ {};
        
 // LuaValToCSVal P any
    double p2 = converter::Converter<double>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_u1u1u1u1u1u1u1u1_ p1, double p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Emit(System.Reflection.Emit.OpCode, System.String)bool w_vtS_u1u1u1u1u1u1u1u1_s(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1u1u1u1u1u1u1u1_s");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_u1u1u1u1u1u1u1u1_ {};
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
    typedef void (*FuncToCall)(void*,struct S_u1u1u1u1u1u1u1u1_ p1, Il2CppString* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Emit(System.Reflection.Emit.OpCode, Byte)bool w_vtS_u1u1u1u1u1u1u1u1_u1(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1u1u1u1u1u1u1u1_u1");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<uint8_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_u1u1u1u1u1u1u1u1_ {};
        
 // LuaValToCSVal P any
    uint8_t p2 = converter::Converter<uint8_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_u1u1u1u1u1u1u1u1_ p1, uint8_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void set_stencilState(UnityEngine.Rendering.StencilState)bool w_vtS_u1u1u1u1u1u1u1u1u1u1u1u1_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u1u1u1u1u1u1u1u1u1u1u1u1_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_u1u1u1u1u1u1u1u1u1u1u1u1_* pp1 = DataTransfer::GetPointer<S_u1u1u1u1u1u1u1u1u1u1u1u1_>(env, _sv1);
    S_u1u1u1u1u1u1u1u1u1u1u1u1_ p1 = pp1 ? *pp1 : S_u1u1u1u1u1u1u1u1u1u1u1u1_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u1u1u1u1u1u1u1u1u1u1u1u1_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(Unity.Profiling.ProfilerCategory, Char*, Int32)bool w_vtS_u2_Pci4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u2_Pci4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_u2_* pp1 = DataTransfer::GetPointer<S_u2_>(env, _sv1);
    S_u2_ p1 = pp1 ? *pp1 : S_u2_ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_u2_ p1, void* p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(Unity.Profiling.ProfilerCategory, Char*, Int32, Int32, Unity.Profiling.ProfilerRecorderOptions)bool w_vtS_u2_Pci4Di4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u2_Pci4Di4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_u2_* pp1 = DataTransfer::GetPointer<S_u2_>(env, _sv1);
    S_u2_ p1 = pp1 ? *pp1 : S_u2_ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
 // LuaValToCSVal P any
    void* p5 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_u2_ p1, void* p2, int32_t p3, void* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void .ctor(Unity.Profiling.ProfilerCategory, Char*, Int32, Unity.Profiling.LowLevel.MarkerFlags)bool w_vtS_u2_Pci4u2(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u2_Pci4u2");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<uint16_t>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_u2_* pp1 = DataTransfer::GetPointer<S_u2_>(env, _sv1);
    S_u2_ p1 = pp1 ? *pp1 : S_u2_ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    uint16_t p4 = converter::Converter<uint16_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_u2_ p1, void* p2, int32_t p3, uint16_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(Unity.Profiling.ProfilerCategory, System.String)bool w_vtS_u2_s(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u2_s");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_u2_* pp1 = DataTransfer::GetPointer<S_u2_>(env, _sv1);
    S_u2_ p1 = pp1 ? *pp1 : S_u2_ {};
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
    typedef void (*FuncToCall)(void*,struct S_u2_ p1, Il2CppString* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(Unity.Profiling.ProfilerCategory, System.String, Int32, Unity.Profiling.ProfilerRecorderOptions)bool w_vtS_u2_sDi4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u2_sDi4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_u2_* pp1 = DataTransfer::GetPointer<S_u2_>(env, _sv1);
    S_u2_ p1 = pp1 ? *pp1 : S_u2_ {};
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_u2_ p1, Il2CppString* p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(Unity.Profiling.ProfilerCategory, System.String, Unity.Profiling.LowLevel.MarkerFlags)bool w_vtS_u2_su2(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u2_su2");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<uint16_t>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_u2_* pp1 = DataTransfer::GetPointer<S_u2_>(env, _sv1);
    S_u2_ p1 = pp1 ? *pp1 : S_u2_ {};
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    uint16_t p3 = converter::Converter<uint16_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,struct S_u2_ p1, Il2CppString* p2, uint16_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void set_firstAdjustmentRecord(UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord)bool w_vtS_u4S_r4r4r4r4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4S_r4r4r4r4__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_u4S_r4r4r4r4__* pp1 = DataTransfer::GetPointer<S_u4S_r4r4r4r4__>(env, _sv1);
    S_u4S_r4r4r4r4__ p1 = pp1 ? *pp1 : S_u4S_r4r4r4r4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_u4S_r4r4r4r4__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord, UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord)bool w_vtS_u4S_r4r4r4r4__S_u4S_r4r4r4r4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4S_r4r4r4r4__S_u4S_r4r4r4r4__");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_u4S_r4r4r4r4__* pp1 = DataTransfer::GetPointer<S_u4S_r4r4r4r4__>(env, _sv1);
    S_u4S_r4r4r4r4__ p1 = pp1 ? *pp1 : S_u4S_r4r4r4r4__ {};
        
     // LuaValToCSVal struct
    S_u4S_r4r4r4r4__* pp2 = DataTransfer::GetPointer<S_u4S_r4r4r4r4__>(env, _sv2);
    S_u4S_r4r4r4r4__ p2 = pp2 ? *pp2 : S_u4S_r4r4r4r4__ {};
        
    typedef void (*FuncToCall)(void*,struct S_u4S_r4r4r4r4__ p1, struct S_u4S_r4r4r4r4__ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void RemoveBatch(UnityEngine.Rendering.BatchID)bool w_vtS_u4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_u4_* pp1 = DataTransfer::GetPointer<S_u4_>(env, _sv1);
    S_u4_ p1 = pp1 ? *pp1 : S_u4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void SetBatchBuffer(UnityEngine.Rendering.BatchID, UnityEngine.GraphicsBufferHandle)bool w_vtS_u4_S_u4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4_S_u4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_u4_* pp1 = DataTransfer::GetPointer<S_u4_>(env, _sv1);
    S_u4_ p1 = pp1 ? *pp1 : S_u4_ {};
        
     // LuaValToCSVal struct
    S_u4_* pp2 = DataTransfer::GetPointer<S_u4_>(env, _sv2);
    S_u4_ p2 = pp2 ? *pp2 : S_u4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u4_ p1, struct S_u4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEditor.Media.VP8EncoderAttributes)bool w_vtS_u4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_u4i4_* pp1 = DataTransfer::GetPointer<S_u4i4_>(env, _sv1);
    S_u4i4_ p1 = pp1 ? *pp1 : S_u4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void CopyAnimationStreamMotion(UnityEngine.Animations.AnimationStream)bool w_vtS_u4pppppp_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4pppppp_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_u4pppppp_* pp1 = DataTransfer::GetPointer<S_u4pppppp_>(env, _sv1);
    S_u4pppppp_ p1 = pp1 ? *pp1 : S_u4pppppp_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u4pppppp_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void GetGlobalTR(UnityEngine.Animations.AnimationStream, UnityEngine.Vector3 ByRef, UnityEngine.Quaternion ByRef)bool w_vtS_u4pppppp_PS_r4r4r4_PS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4pppppp_PS_r4r4r4_PS_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_u4pppppp_* pp1 = DataTransfer::GetPointer<S_u4pppppp_>(env, _sv1);
    S_u4pppppp_ p1 = pp1 ? *pp1 : S_u4pppppp_ {};
        
     // LuaValToCSVal Pstruct
    S_r4r4r4_* p2 = DataTransfer::GetPointer<S_r4r4r4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_r4r4r4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
     // LuaValToCSVal Pstruct
    S_r4r4r4r4_* p3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_r4r4r4r4_ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
    typedef void (*FuncToCall)(void*,struct S_u4pppppp_ p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void GetLocalTRS(UnityEngine.Animations.AnimationStream, UnityEngine.Vector3 ByRef, UnityEngine.Quaternion ByRef, UnityEngine.Vector3 ByRef)bool w_vtS_u4pppppp_PS_r4r4r4_PS_r4r4r4r4_PS_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4pppppp_PS_r4r4r4_PS_r4r4r4r4_PS_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_u4pppppp_* pp1 = DataTransfer::GetPointer<S_u4pppppp_>(env, _sv1);
    S_u4pppppp_ p1 = pp1 ? *pp1 : S_u4pppppp_ {};
        
     // LuaValToCSVal Pstruct
    S_r4r4r4_* p2 = DataTransfer::GetPointer<S_r4r4r4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_r4r4r4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
     // LuaValToCSVal Pstruct
    S_r4r4r4r4_* p3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_r4r4r4r4_ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
     // LuaValToCSVal Pstruct
    S_r4r4r4_* p4 = DataTransfer::GetPointer<S_r4r4r4_>(env, pesapi_unboxing(env, _sv4)); // valuetype ref
    S_r4r4r4_ up4;
    if (!p4) {
        memset(&up4, 0, sizeof(p4));
    }
        
    typedef void (*FuncToCall)(void*,struct S_u4pppppp_ p1, void* p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetPosition(UnityEngine.Animations.AnimationStream, UnityEngine.Vector3)bool w_vtS_u4pppppp_S_r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4pppppp_S_r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_u4pppppp_* pp1 = DataTransfer::GetPointer<S_u4pppppp_>(env, _sv1);
    S_u4pppppp_ p1 = pp1 ? *pp1 : S_u4pppppp_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u4pppppp_ p1, struct S_r4r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetLocalTRS(UnityEngine.Animations.AnimationStream, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Vector3, Boolean)bool w_vtS_u4pppppp_S_r4r4r4_S_r4r4r4r4_S_r4r4r4_b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4pppppp_S_r4r4r4_S_r4r4r4r4_S_r4r4r4_b");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp4 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;            }
     // LuaValToCSVal struct
    S_u4pppppp_* pp1 = DataTransfer::GetPointer<S_u4pppppp_>(env, _sv1);
    S_u4pppppp_ p1 = pp1 ? *pp1 : S_u4pppppp_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp4 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv4);
    S_r4r4r4_ p4 = pp4 ? *pp4 : S_r4r4r4_ {};
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void*,struct S_u4pppppp_ p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, struct S_r4r4r4_ p4, bool p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void SetGlobalTR(UnityEngine.Animations.AnimationStream, UnityEngine.Vector3, UnityEngine.Quaternion, Boolean)bool w_vtS_u4pppppp_S_r4r4r4_S_r4r4r4r4_b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4pppppp_S_r4r4r4_S_r4r4r4r4_b");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;            }
     // LuaValToCSVal struct
    S_u4pppppp_* pp1 = DataTransfer::GetPointer<S_u4pppppp_>(env, _sv1);
    S_u4pppppp_ p1 = pp1 ? *pp1 : S_u4pppppp_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4_>(env, _sv2);
    S_r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,struct S_u4pppppp_ p1, struct S_r4r4r4_ p2, struct S_r4r4r4r4_ p3, bool p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetRotation(UnityEngine.Animations.AnimationStream, UnityEngine.Quaternion)bool w_vtS_u4pppppp_S_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4pppppp_S_r4r4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_u4pppppp_* pp1 = DataTransfer::GetPointer<S_u4pppppp_>(env, _sv1);
    S_u4pppppp_ p1 = pp1 ? *pp1 : S_u4pppppp_ {};
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp2 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv2);
    S_r4r4r4r4_ p2 = pp2 ? *pp2 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u4pppppp_ p1, struct S_r4r4r4r4_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetBool(UnityEngine.Animations.AnimationStream, Boolean)bool w_vtS_u4pppppp_b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4pppppp_b");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_u4pppppp_* pp1 = DataTransfer::GetPointer<S_u4pppppp_>(env, _sv1);
    S_u4pppppp_ p1 = pp1 ? *pp1 : S_u4pppppp_ {};
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_u4pppppp_ p1, bool p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetInt(UnityEngine.Animations.AnimationStream, Int32)bool w_vtS_u4pppppp_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4pppppp_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_u4pppppp_* pp1 = DataTransfer::GetPointer<S_u4pppppp_>(env, _sv1);
    S_u4pppppp_ p1 = pp1 ? *pp1 : S_u4pppppp_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_u4pppppp_ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetFloat(UnityEngine.Animations.AnimationStream, Single)bool w_vtS_u4pppppp_r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4pppppp_r4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_u4pppppp_* pp1 = DataTransfer::GetPointer<S_u4pppppp_>(env, _sv1);
    S_u4pppppp_ p1 = pp1 ? *pp1 : S_u4pppppp_ {};
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_u4pppppp_ p1, float p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void set_refreshRateRatio(UnityEngine.RefreshRate)bool w_vtS_u4u4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4u4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_u4u4_* pp1 = DataTransfer::GetPointer<S_u4u4_>(env, _sv1);
    S_u4u4_ p1 = pp1 ? *pp1 : S_u4u4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u4u4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(UnityEditor.Media.H264EncoderAttributes)bool w_vtS_u4u4i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4u4i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_u4u4i4_* pp1 = DataTransfer::GetPointer<S_u4u4i4_>(env, _sv1);
    S_u4u4i4_ p1 = pp1 ? *pp1 : S_u4u4i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u4u4i4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_guid(UnityEditor.GUID)bool w_vtS_u4u4u4u4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4u4u4u4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_u4u4u4u4_* pp1 = DataTransfer::GetPointer<S_u4u4u4u4_>(env, _sv1);
    S_u4u4u4u4_ p1 = pp1 ? *pp1 : S_u4u4u4u4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u4u4u4u4_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(UnityEditor.GUID, Boolean)bool w_vtS_u4u4u4u4_b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4u4u4u4_b");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_u4u4u4u4_* pp1 = DataTransfer::GetPointer<S_u4u4u4u4_>(env, _sv1);
    S_u4u4u4u4_ p1 = pp1 ? *pp1 : S_u4u4u4u4_ {};
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_u4u4u4u4_ p1, bool p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEditor.GUID, Int32, UnityEngine.SceneManagement.Scene)bool w_vtS_u4u4u4u4_i4S_i4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4u4u4u4_i4S_i4_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal struct
    S_u4u4u4u4_* pp1 = DataTransfer::GetPointer<S_u4u4u4u4_>(env, _sv1);
    S_u4u4u4u4_ p1 = pp1 ? *pp1 : S_u4u4u4u4_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal struct
    S_i4_* pp3 = DataTransfer::GetPointer<S_i4_>(env, _sv3);
    S_i4_ p3 = pp3 ? *pp3 : S_i4_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u4u4u4u4_ p1, int32_t p2, struct S_i4_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(UnityEditor.GUID, System.Type)bool w_vtS_u4u4u4u4_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u4u4u4u4_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
     // LuaValToCSVal struct
    S_u4u4u4u4_* pp1 = DataTransfer::GetPointer<S_u4u4u4u4_>(env, _sv1);
    S_u4u4u4u4_ p1 = pp1 ? *pp1 : S_u4u4u4u4_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,struct S_u4u4u4u4_ p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Invalidate(UnityEditor.Search.PropertyDatabaseRecordKey)bool w_vtS_u8S_u8u8__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u8S_u8u8__");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_u8S_u8u8__* pp1 = DataTransfer::GetPointer<S_u8S_u8u8__>(env, _sv1);
    S_u8S_u8u8__ p1 = pp1 ? *pp1 : S_u8S_u8u8__ {};
        
    typedef void (*FuncToCall)(void*,struct S_u8S_u8u8__ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void StoreProperty(UnityEditor.Search.PropertyDatabaseRecordKey, System.Object)bool w_vtS_u8S_u8u8__O(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u8S_u8u8__O");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                            }
     // LuaValToCSVal struct
    S_u8S_u8u8__* pp1 = DataTransfer::GetPointer<S_u8S_u8u8__>(env, _sv1);
    S_u8S_u8u8__ p1 = pp1 ? *pp1 : S_u8S_u8u8__ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,struct S_u8S_u8u8__ p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void StoreProperty(UnityEditor.Search.PropertyDatabaseRecordKey, System.Object, System.String)bool w_vtS_u8S_u8u8__Os(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u8S_u8u8__Os");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;            }
     // LuaValToCSVal struct
    S_u8S_u8u8__* pp1 = DataTransfer::GetPointer<S_u8S_u8u8__>(env, _sv1);
    S_u8S_u8u8__ p1 = pp1 ? *pp1 : S_u8S_u8u8__ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
    typedef void (*FuncToCall)(void*,struct S_u8S_u8u8__ p1, Il2CppObject* p2, Il2CppString* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void StoreAlias(UnityEditor.Search.PropertyDatabaseRecordKey, System.String)bool w_vtS_u8S_u8u8__s(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u8S_u8u8__s");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_u8S_u8u8__* pp1 = DataTransfer::GetPointer<S_u8S_u8u8__>(env, _sv1);
    S_u8S_u8u8__ p1 = pp1 ? *pp1 : S_u8S_u8u8__ {};
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
    typedef void (*FuncToCall)(void*,struct S_u8S_u8u8__ p1, Il2CppString* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void set_Value(System.DateTime)bool w_vtS_u8_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u8_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_u8_* pp1 = DataTransfer::GetPointer<S_u8_>(env, _sv1);
    S_u8_ p1 = pp1 ? *pp1 : S_u8_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u8_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle, Int32, Unity.Profiling.ProfilerRecorderOptions)bool w_vtS_u8_Di4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u8_Di4Di4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!!true) return false;                if (!!true) return false;            }
     // LuaValToCSVal struct
    S_u8_* pp1 = DataTransfer::GetPointer<S_u8_>(env, _sv1);
    S_u8_ p1 = pp1 ? *pp1 : S_u8_ {};
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,struct S_u8_ p1, void* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(System.DateTime, System.TimeSpan)bool w_vtS_u8_S_i8_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u8_S_i8_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;            }
     // LuaValToCSVal struct
    S_u8_* pp1 = DataTransfer::GetPointer<S_u8_>(env, _sv1);
    S_u8_ p1 = pp1 ? *pp1 : S_u8_ {};
        
     // LuaValToCSVal struct
    S_i8_* pp2 = DataTransfer::GetPointer<S_i8_>(env, _sv2);
    S_i8_ p2 = pp2 ? *pp2 : S_i8_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u8_ p1, struct S_i8_ p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(System.DateTime, System.DateTime, System.TimeSpan)bool w_vtS_u8_S_u8_S_i8_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u8_S_u8_S_i8_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal struct
    S_u8_* pp1 = DataTransfer::GetPointer<S_u8_>(env, _sv1);
    S_u8_ p1 = pp1 ? *pp1 : S_u8_ {};
        
     // LuaValToCSVal struct
    S_u8_* pp2 = DataTransfer::GetPointer<S_u8_>(env, _sv2);
    S_u8_ p2 = pp2 ? *pp2 : S_u8_ {};
        
     // LuaValToCSVal struct
    S_i8_* pp3 = DataTransfer::GetPointer<S_i8_>(env, _sv3);
    S_i8_ p3 = pp3 ? *pp3 : S_i8_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u8_ p1, struct S_u8_ p2, struct S_i8_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(System.DateTime, Int32)bool w_vtS_u8_i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u8_i4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
     // LuaValToCSVal struct
    S_u8_* pp1 = DataTransfer::GetPointer<S_u8_>(env, _sv1);
    S_u8_ p1 = pp1 ? *pp1 : S_u8_ {};
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,struct S_u8_ p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void AddDependency(Unity.Jobs.JobHandle)bool w_vtS_u8i4i4p_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u8i4i4p_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_u8i4i4p_* pp1 = DataTransfer::GetPointer<S_u8i4i4p_>(env, _sv1);
    S_u8i4i4p_ p1 = pp1 ? *pp1 : S_u8i4i4p_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u8i4i4p_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void Prepare(Unity.Jobs.JobHandle, UnityEngine.U2D.SpriteShapeParameters, UnityEngine.Sprite[])bool w_vtS_u8i4i4p_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ou4u4r4r4r4r4bbbbb_o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u8i4i4p_S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ou4u4r4r4r4r4bbbbb_o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
     // LuaValToCSVal struct
    S_u8i4i4p_* pp1 = DataTransfer::GetPointer<S_u8i4i4p_>(env, _sv1);
    S_u8i4i4p_ p1 = pp1 ? *pp1 : S_u8i4i4p_ {};
        
     // LuaValToCSVal struct
    S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ou4u4r4r4r4r4bbbbb_* pp2 = DataTransfer::GetPointer<S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ou4u4r4r4r4r4bbbbb_>(env, _sv2);
    S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ou4u4r4r4r4r4bbbbb_ p2 = pp2 ? *pp2 : S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ou4u4r4r4r4r4bbbbb_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,struct S_u8i4i4p_ p1, struct S_S_r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4r4_ou4u4r4r4r4r4bbbbb_ p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void set_hash(UnityEngine.Hash128)bool w_vtS_u8u8_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u8u8_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;            }
     // LuaValToCSVal struct
    S_u8u8_* pp1 = DataTransfer::GetPointer<S_u8u8_>(env, _sv1);
    S_u8u8_ p1 = pp1 ? *pp1 : S_u8u8_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u8u8_ p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Hash128, UnityEngine.Hash128, UnityEngine.Hash128)bool w_vtS_u8u8_S_u8u8_S_u8u8_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u8u8_S_u8u8_S_u8u8_");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
     // LuaValToCSVal struct
    S_u8u8_* pp1 = DataTransfer::GetPointer<S_u8u8_>(env, _sv1);
    S_u8u8_ p1 = pp1 ? *pp1 : S_u8u8_ {};
        
     // LuaValToCSVal struct
    S_u8u8_* pp2 = DataTransfer::GetPointer<S_u8u8_>(env, _sv2);
    S_u8u8_ p2 = pp2 ? *pp2 : S_u8u8_ {};
        
     // LuaValToCSVal struct
    S_u8u8_* pp3 = DataTransfer::GetPointer<S_u8u8_>(env, _sv3);
    S_u8u8_ p3 = pp3 ? *pp3 : S_u8u8_ {};
        
    typedef void (*FuncToCall)(void*,struct S_u8u8_ p1, struct S_u8u8_ p2, struct S_u8u8_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void GenerateMeshAsync(UnityEngine.XR.MeshId, UnityEngine.Mesh, UnityEngine.MeshCollider, UnityEngine.XR.MeshVertexAttributes, System.Action`1[UnityEngine.XR.MeshGenerationResult])bool w_vtS_u8u8_ooi4o(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u8u8_ooi4o");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;            }
     // LuaValToCSVal struct
    S_u8u8_* pp1 = DataTransfer::GetPointer<S_u8u8_>(env, _sv1);
    S_u8u8_ p1 = pp1 ? *pp1 : S_u8u8_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(void*,struct S_u8u8_ p1, Il2CppObject* p2, Il2CppObject* p3, int32_t p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void GenerateMeshAsync(UnityEngine.XR.MeshId, UnityEngine.Mesh, UnityEngine.MeshCollider, UnityEngine.XR.MeshVertexAttributes, System.Action`1[UnityEngine.XR.MeshGenerationResult], UnityEngine.XR.MeshGenerationOptions)bool w_vtS_u8u8_ooi4oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtS_u8u8_ooi4oi4");
    
    auto TIp1 = wrapData->TypeInfos[1];
    auto TIp2 = wrapData->TypeInfos[2];
    auto TIp3 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!DataTransfer::IsAssignable(env, _sv1, TIp1, true)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;            }
     // LuaValToCSVal struct
    S_u8u8_* pp1 = DataTransfer::GetPointer<S_u8u8_>(env, _sv1);
    S_u8u8_ p1 = pp1 ? *pp1 : S_u8u8_ {};
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(void*,struct S_u8u8_ p1, Il2CppObject* p2, Il2CppObject* p3, int32_t p4, Il2CppObject* p5, int32_t p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void Add(System.Object[])bool w_vtVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtVO");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Keyframe[])bool w_vtVS_r4r4r4r4i4i4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtVS_r4r4r4r4i4i4r4r4_");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Rendering.GraphicsDeviceType[])bool w_vtVi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtVi4");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void SetInterfaceConstraints(System.Type[])bool w_vtVo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtVo");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(System.String[])bool w_vtVs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtVs");
    
    auto TIp1 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!!true) return false;            }
 // LuaValToCSVal P any
    void* p1 = nullptr;        
        
    typedef void (*FuncToCall)(void*,void* p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void set_AllowMultiple(Boolean)bool w_vtb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtb");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
    typedef void (*FuncToCall)(void*,bool p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(Boolean, System.String, System.String, System.String)bool w_vtbDsDsDs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbDsDsDs");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(void*,bool p1, void* p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(Boolean, UnityEngine.Rendering.GraphicsDeviceType[])bool w_vtbVi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbVi4");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,bool p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(Boolean, System.String[])bool w_vtbVs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbVs");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,bool p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetDiscretionaryAclProtection(Boolean, Boolean)bool w_vtbb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbb");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,bool p1, bool p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void ClearRenderTarget(Boolean, Boolean, UnityEngine.Color)bool w_vtbbS_r4r4r4r4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbbS_r4r4r4r4_");
    
    auto TIp3 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
    typedef void (*FuncToCall)(void*,bool p1, bool p2, struct S_r4r4r4r4_ p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void ClearRenderTarget(Boolean, Boolean, UnityEngine.Color, Single)bool w_vtbbS_r4r4r4r4_r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbbS_r4r4r4r4_r4");
    
    auto TIp3 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, true)) return false;                if (!converter::Converter<float>::accept(env, _sv4)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
     // LuaValToCSVal struct
    S_r4r4r4r4_* pp3 = DataTransfer::GetPointer<S_r4r4r4r4_>(env, _sv3);
    S_r4r4r4r4_ p3 = pp3 ? *pp3 : S_r4r4r4r4_ {};
        
 // LuaValToCSVal P any
    float p4 = converter::Converter<float>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,bool p1, bool p2, struct S_r4r4r4r4_ p3, float p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(Boolean, Boolean, Boolean)bool w_vtbbb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbbb");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,bool p1, bool p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(Boolean, Boolean, Boolean, Int32)bool w_vtbbbi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbbbi4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,bool p1, bool p2, bool p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(Boolean, Boolean, Boolean, System.String)bool w_vtbbbs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbbbs");
    
    auto TIp4 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv4)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
     // LuaValToCSVal s
    Il2CppString* p4 = converter::Converter<Il2CppString*>::toCpp(env, _sv4);
    typedef void (*FuncToCall)(void*,bool p1, bool p2, bool p3, Il2CppString* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(Boolean, Boolean, Int32)bool w_vtbbi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbbi4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,bool p1, bool p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(Boolean, Boolean, Int32, System.Nullable`1[Mono.Security.Interface.MonoSslPolicyErrors])bool w_vtbbi4N_bi4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbbi4N_bi4_");
    
    auto TIp4 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, true)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal struct
    N_bi4_* pp4 = DataTransfer::GetPointer<N_bi4_>(env, _sv4);
    N_bi4_ p4 = pp4 ? *pp4 : N_bi4_ {};
        
    typedef void (*FuncToCall)(void*,bool p1, bool p2, int32_t p3, struct N_bi4_ p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(Boolean, Boolean, Int32, Boolean)bool w_vtbbi4b(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbbi4b");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,bool p1, bool p2, int32_t p3, bool p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(Boolean, Boolean, System.Security.AccessControl.ControlFlags, System.Security.Principal.SecurityIdentifier, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.SystemAcl, System.Security.AccessControl.DiscretionaryAcl)bool w_vtbbi4oooo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbbi4oooo");
    
    auto TIp4 = wrapData->TypeInfos[1];
    auto TIp5 = wrapData->TypeInfos[2];
    auto TIp6 = wrapData->TypeInfos[3];
    auto TIp7 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv6, TIp6, false)) return false;                if (!DataTransfer::IsAssignable(env, _sv7, TIp7, false)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
     // LuaValToCSVal o/O
    Il2CppObject* p6 = LuaValToCSRef(TIp6, env _sv6);
        
     // LuaValToCSVal o/O
    Il2CppObject* p7 = LuaValToCSRef(TIp7, env _sv7);
        
    typedef void (*FuncToCall)(void*,bool p1, bool p2, int32_t p3, Il2CppObject* p4, Il2CppObject* p5, Il2CppObject* p6, Il2CppObject* p7, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void .ctor(Boolean, Boolean, System.Security.AccessControl.RawSecurityDescriptor)bool w_vtbbo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbbo");
    
    auto TIp3 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,bool p1, bool p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(Boolean, Boolean, Byte[], Int32)bool w_vtbboi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbboi4");
    
    auto TIp3 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,bool p1, bool p2, Il2CppObject* p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(Boolean, Boolean, Single, Single, Single, Single)bool w_vtbbr4r4r4r4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbbr4r4r4r4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!converter::Converter<float>::accept(env, _sv3)) return false;                if (!converter::Converter<float>::accept(env, _sv4)) return false;                if (!converter::Converter<float>::accept(env, _sv5)) return false;                if (!converter::Converter<float>::accept(env, _sv6)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    float p3 = converter::Converter<float>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    float p4 = converter::Converter<float>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    float p5 = converter::Converter<float>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    float p6 = converter::Converter<float>::toCpp(env, _sv6);        
        
    typedef void (*FuncToCall)(void*,bool p1, bool p2, float p3, float p4, float p5, float p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void .ctor(Boolean, Boolean, System.String)bool w_vtbbs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbbs");
    
    auto TIp3 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
    typedef void (*FuncToCall)(void*,bool p1, bool p2, Il2CppString* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(Boolean, Boolean, Byte, Int32)bool w_vtbbu1i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbbu1i4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<bool>::accept(env, _sv2)) return false;                if (!converter::Converter<uint8_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    bool p2 = converter::Converter<bool>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    uint8_t p3 = converter::Converter<uint8_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,bool p1, bool p2, uint8_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void Stop(Boolean, UnityEngine.ParticleSystemStopBehavior)bool w_vtbi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbi4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,bool p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetTcpKeepAlive(Boolean, Int32, Int32)bool w_vtbi4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbi4i4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,bool p1, int32_t p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(Boolean, System.Threading.EventResetMode, System.String)bool w_vtbi4s(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbi4s");
    
    auto TIp3 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
    typedef void (*FuncToCall)(void*,bool p1, int32_t p2, Il2CppString* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(Boolean, System.Threading.EventResetMode, System.String, Boolean ByRef)bool w_vtbi4sPb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbi4sPb");
    
    auto TIp3 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(void*,bool p1, int32_t p2, Il2CppString* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(Boolean, System.Threading.EventResetMode, System.String, Boolean ByRef, System.Security.AccessControl.EventWaitHandleSecurity)bool w_vtbi4sPbo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbi4sPbo");
    
    auto TIp3 = wrapData->TypeInfos[1];
    auto TIp4 = wrapData->TypeInfos[2];
    auto TIp5 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv5, TIp5, false)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
     // LuaValToCSVal o/O
    Il2CppObject* p5 = LuaValToCSRef(TIp5, env _sv5);
        
    typedef void (*FuncToCall)(void*,bool p1, int32_t p2, Il2CppString* p3, void* p4, Il2CppObject* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void .ctor(Boolean, UnityEngine.Events.UnityAction)bool w_vtbo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbo");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!DataTransfer::IsAssignable(env, _sv2, TIp2, false)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,bool p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetEnabledFading(Boolean, Single)bool w_vtbr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbr4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<float>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    float p2 = converter::Converter<float>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,bool p1, float p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(Boolean, System.String)bool w_vtbs(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbs");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
    typedef void (*FuncToCall)(void*,bool p1, Il2CppString* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void setResult(Boolean, System.String, TestResult ByRef)bool w_vtbsPS_bs_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbsPS_bs_");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal Pstruct
    S_bs_* p3 = DataTransfer::GetPointer<S_bs_>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_bs_ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
    typedef void (*FuncToCall)(void*,bool p1, Il2CppString* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(Boolean, System.String, Boolean ByRef)bool w_vtbsPb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbsPb");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,bool p1, Il2CppString* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(Boolean, System.String, Boolean ByRef, System.Security.AccessControl.MutexSecurity)bool w_vtbsPbo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbsPbo");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!!true) return false;                if (!DataTransfer::IsAssignable(env, _sv4, TIp4, false)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
     // LuaValToCSVal o/O
    Il2CppObject* p4 = LuaValToCSRef(TIp4, env _sv4);
        
    typedef void (*FuncToCall)(void*,bool p1, Il2CppString* p2, void* p3, Il2CppObject* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void Expect(Boolean, System.String, System.Object[])bool w_vtbsVO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbsVO");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
    typedef void (*FuncToCall)(void*,bool p1, Il2CppString* p2, void* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(Boolean, System.String, Boolean)bool w_vtbsb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbsb");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,bool p1, Il2CppString* p2, bool p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(Boolean, System.String, System.Action`1[System.String], Boolean)bool w_vtbsoDb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbsoDb");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(void*,bool p1, Il2CppString* p2, Il2CppObject* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(Boolean, System.String, System.String)bool w_vtbss(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbss");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
    typedef void (*FuncToCall)(void*,bool p1, Il2CppString* p2, Il2CppString* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(Boolean, System.String, System.String, System.String)bool w_vtbsss(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbsss");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv2)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv3)) return false;                if (!converter::Converter<Il2CppString*>::accept(env, _sv4)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
     // LuaValToCSVal s
    Il2CppString* p2 = converter::Converter<Il2CppString*>::toCpp(env, _sv2);
     // LuaValToCSVal s
    Il2CppString* p3 = converter::Converter<Il2CppString*>::toCpp(env, _sv3);
     // LuaValToCSVal s
    Il2CppString* p4 = converter::Converter<Il2CppString*>::toCpp(env, _sv4);
    typedef void (*FuncToCall)(void*,bool p1, Il2CppString* p2, Il2CppString* p3, Il2CppString* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(Boolean, Byte, Byte, UnityEngine.Rendering.CompareFunction, UnityEngine.Rendering.StencilOp, UnityEngine.Rendering.StencilOp, UnityEngine.Rendering.StencilOp, UnityEngine.Rendering.CompareFunction, UnityEngine.Rendering.StencilOp, UnityEngine.Rendering.StencilOp, UnityEngine.Rendering.StencilOp)bool w_vtbu1u1i4i4i4i4i4i4i4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtbu1u1i4i4i4i4i4i4i4i4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    pesapi_value_sv8 = pesapi_get_arg(info, 8);
    pesapi_value_sv9 = pesapi_get_arg(info, 9);
    pesapi_value_sv10 = pesapi_get_arg(info, 10);
    pesapi_value_sv11 = pesapi_get_arg(info, 11);
    if (checkLuaArgument) {
        if (lua_args_len != 11) return false;
                if (!converter::Converter<bool>::accept(env, _sv1)) return false;                if (!converter::Converter<uint8_t>::accept(env, _sv2)) return false;                if (!converter::Converter<uint8_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv5)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv6)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv7)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv8)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv9)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv10)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv11)) return false;            }
 // LuaValToCSVal P any
    bool p1 = converter::Converter<bool>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    uint8_t p2 = converter::Converter<uint8_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    uint8_t p3 = converter::Converter<uint8_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    int32_t p5 = converter::Converter<int32_t>::toCpp(env, _sv5);        
        
 // LuaValToCSVal P any
    int32_t p6 = converter::Converter<int32_t>::toCpp(env, _sv6);        
        
 // LuaValToCSVal P any
    int32_t p7 = converter::Converter<int32_t>::toCpp(env, _sv7);        
        
 // LuaValToCSVal P any
    int32_t p8 = converter::Converter<int32_t>::toCpp(env, _sv8);        
        
 // LuaValToCSVal P any
    int32_t p9 = converter::Converter<int32_t>::toCpp(env, _sv9);        
        
 // LuaValToCSVal P any
    int32_t p10 = converter::Converter<int32_t>::toCpp(env, _sv10);        
        
 // LuaValToCSVal P any
    int32_t p11 = converter::Converter<int32_t>::toCpp(env, _sv11);        
        
    typedef void (*FuncToCall)(void*,bool p1, uint8_t p2, uint8_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8, int32_t p9, int32_t p10, int32_t p11, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11,  method);
    

        return true;
}
// Void AppendChar(Char)bool w_vtc(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtc");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!converter::Converter<Il2CppChar>::accept(env, _sv1)) return false;            }
 // LuaValToCSVal P any
    Il2CppChar p1 = converter::Converter<Il2CppChar>::toCpp(env, _sv1);        
        
    typedef void (*FuncToCall)(void*,Il2CppChar p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(Char, Byte)bool w_vtcDu1(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtcDu1");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppChar>::accept(env, _sv1)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    Il2CppChar p1 = converter::Converter<Il2CppChar>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,Il2CppChar p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void WriteSurrogateCharEntity(Char, Char)bool w_vtcc(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtcc");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppChar>::accept(env, _sv1)) return false;                if (!converter::Converter<Il2CppChar>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    Il2CppChar p1 = converter::Converter<Il2CppChar>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    Il2CppChar p2 = converter::Converter<Il2CppChar>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,Il2CppChar p1, Il2CppChar p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(Char, Int32)bool w_vtci4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtci4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<Il2CppChar>::accept(env, _sv1)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    Il2CppChar p1 = converter::Converter<Il2CppChar>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,Il2CppChar p1, int32_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(Char, System.ConsoleKey, Boolean, Boolean, Boolean)bool w_vtci4bbb(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vtci4bbb");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!converter::Converter<Il2CppChar>::accept(env, _sv1)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv2)) return false;                if (!converter::Converter<bool>::accept(env, _sv3)) return false;                if (!converter::Converter<bool>::accept(env, _sv4)) return false;                if (!converter::Converter<bool>::accept(env, _sv5)) return false;            }
 // LuaValToCSVal P any
    Il2CppChar p1 = converter::Converter<Il2CppChar>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    int32_t p2 = converter::Converter<int32_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    bool p3 = converter::Converter<bool>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    bool p4 = converter::Converter<bool>::toCpp(env, _sv4);        
        
 // LuaValToCSVal P any
    bool p5 = converter::Converter<bool>::toCpp(env, _sv5);        
        
    typedef void (*FuncToCall)(void*,Il2CppChar p1, int32_t p2, bool p3, bool p4, bool p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void Write(SByte)bool w_vti1(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti1");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!converter::Converter<int8_t>::accept(env, _sv1)) return false;            }
 // LuaValToCSVal P any
    int8_t p1 = converter::Converter<int8_t>::toCpp(env, _sv1);        
        
    typedef void (*FuncToCall)(void*,int8_t p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(SByte, SByte, Int32)bool w_vti1i1i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti1i1i4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<int8_t>::accept(env, _sv1)) return false;                if (!converter::Converter<int8_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    int8_t p1 = converter::Converter<int8_t>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    int8_t p2 = converter::Converter<int8_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,int8_t p1, int8_t p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void Write(Int16)bool w_vti2(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti2");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!converter::Converter<int16_t>::accept(env, _sv1)) return false;            }
 // LuaValToCSVal P any
    int16_t p1 = converter::Converter<int16_t>::toCpp(env, _sv1);        
        
    typedef void (*FuncToCall)(void*,int16_t p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void .ctor(Int16, Int16)bool w_vti2i2(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti2i2");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<int16_t>::accept(env, _sv1)) return false;                if (!converter::Converter<int16_t>::accept(env, _sv2)) return false;            }
 // LuaValToCSVal P any
    int16_t p1 = converter::Converter<int16_t>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    int16_t p2 = converter::Converter<int16_t>::toCpp(env, _sv2);        
        
    typedef void (*FuncToCall)(void*,int16_t p1, int16_t p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(Int16, Int16, Int32)bool w_vti2i2i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti2i2i4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<int16_t>::accept(env, _sv1)) return false;                if (!converter::Converter<int16_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    int16_t p1 = converter::Converter<int16_t>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    int16_t p2 = converter::Converter<int16_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,int16_t p1, int16_t p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(Int16, UInt16, Int32, UInt32)bool w_vti2u2i4u4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti2u2i4u4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<int16_t>::accept(env, _sv1)) return false;                if (!converter::Converter<uint16_t>::accept(env, _sv2)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<uint32_t>::accept(env, _sv4)) return false;            }
 // LuaValToCSVal P any
    int16_t p1 = converter::Converter<int16_t>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    uint16_t p2 = converter::Converter<uint16_t>::toCpp(env, _sv2);        
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    uint32_t p4 = converter::Converter<uint32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,int16_t p1, uint16_t p2, int32_t p3, uint32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)bool w_vti4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4");
    

    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    if (checkLuaArgument) {
        if (lua_args_len != 1) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
    typedef void (*FuncToCall)(void*,int32_t p1, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1,  method);
    

        return true;
}
// Void CollapseItem(Int32, Boolean)bool w_vti4Db(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4Db");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,int32_t p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Set(Int32, Int32)bool w_vti4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4Di4");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,int32_t p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void .ctor(UnityEngine.Rendering.BuiltinRenderTextureType, Int32, UnityEngine.CubemapFace, Int32)bool w_vti4Di4Di4Di4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4Di4Di4Di4");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
 // LuaValToCSVal P any
    void* p3 = nullptr;        
        
 // LuaValToCSVal P any
    void* p4 = nullptr;        
        
    typedef void (*FuncToCall)(void*,int32_t p1, void* p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void RecalculateUVDistributionMetric(Int32, Single)bool w_vti4Dr4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4Dr4");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
 // LuaValToCSVal P any
    void* p2 = nullptr;        
        
    typedef void (*FuncToCall)(void*,int32_t p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void SetByIndex(Int32, System.Object)bool w_vti4O(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4O");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
    typedef void (*FuncToCall)(void*,int32_t p1, Il2CppObject* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void Insert(Int32, System.Object, System.Object)bool w_vti4OO(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4OO");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                                            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,int32_t p1, Il2CppObject* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Object, Int32)bool w_vti4OOi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4OOi4");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                                                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,int32_t p1, Il2CppObject* p2, Il2CppObject* p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void .ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, Int32)bool w_vti4Oi4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4Oi4");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
    typedef void (*FuncToCall)(void*,int32_t p1, Il2CppObject* p2, int32_t p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void .ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, Int32, Int32)bool w_vti4Oi4i4(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4Oi4i4");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                                if (!converter::Converter<int32_t>::accept(env, _sv3)) return false;                if (!converter::Converter<int32_t>::accept(env, _sv4)) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
 // LuaValToCSVal P any
    int32_t p3 = converter::Converter<int32_t>::toCpp(env, _sv3);        
        
 // LuaValToCSVal P any
    int32_t p4 = converter::Converter<int32_t>::toCpp(env, _sv4);        
        
    typedef void (*FuncToCall)(void*,int32_t p1, Il2CppObject* p2, int32_t p3, int32_t p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void Log(UnityEngine.LogType, System.Object, UnityEngine.Object)bool w_vti4Oo(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4Oo");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    if (checkLuaArgument) {
        if (lua_args_len != 3) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                                if (!DataTransfer::IsAssignable(env, _sv3, TIp3, false)) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal o/O
    Il2CppObject* p2 = LuaValToCSRef(TIp2, env _sv2);
        
     // LuaValToCSVal o/O
    Il2CppObject* p3 = LuaValToCSRef(TIp3, env _sv3);
        
    typedef void (*FuncToCall)(void*,int32_t p1, Il2CppObject* p2, Il2CppObject* p3, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3,  method);
    

        return true;
}
// Void GetChannels(Int32, Unity.Collections.NativeArray`1[System.UInt16] ByRef, Unity.Collections.NativeSlice`1[UnityEngine.Vector3] ByRef, Unity.Collections.NativeSlice`1[UnityEngine.Vector2] ByRef)bool w_vti4PS_Pvi4i4i4S_pi4i4_i4_PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4PS_Pvi4i4i4S_pi4i4_i4_PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    if (checkLuaArgument) {
        if (lua_args_len != 4) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal Pstruct
    S_Pvi4i4i4S_pi4i4_i4_* p2 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_Pvi4i4i4S_pi4i4_i4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
     // LuaValToCSVal Pstruct
    S_Pu1i4i4i4i4S_pi4i4__* p3 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_Pu1i4i4i4i4S_pi4i4__ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
     // LuaValToCSVal Pstruct
    S_Pu1i4i4i4i4S_pi4i4__* p4 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, pesapi_unboxing(env, _sv4)); // valuetype ref
    S_Pu1i4i4i4i4S_pi4i4__ up4;
    if (!p4) {
        memset(&up4, 0, sizeof(p4));
    }
        
    typedef void (*FuncToCall)(void*,int32_t p1, void* p2, void* p3, void* p4, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4,  method);
    

        return true;
}
// Void GetChannels(Int32, Unity.Collections.NativeArray`1[System.UInt16] ByRef, Unity.Collections.NativeSlice`1[UnityEngine.Vector3] ByRef, Unity.Collections.NativeSlice`1[UnityEngine.Vector2] ByRef, Unity.Collections.NativeSlice`1[UnityEngine.Color32] ByRef)bool w_vti4PS_Pvi4i4i4S_pi4i4_i4_PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4PS_Pvi4i4i4S_pi4i4_i4_PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    if (checkLuaArgument) {
        if (lua_args_len != 5) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal Pstruct
    S_Pvi4i4i4S_pi4i4_i4_* p2 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_Pvi4i4i4S_pi4i4_i4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
     // LuaValToCSVal Pstruct
    S_Pu1i4i4i4i4S_pi4i4__* p3 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_Pu1i4i4i4i4S_pi4i4__ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
     // LuaValToCSVal Pstruct
    S_Pu1i4i4i4i4S_pi4i4__* p4 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, pesapi_unboxing(env, _sv4)); // valuetype ref
    S_Pu1i4i4i4i4S_pi4i4__ up4;
    if (!p4) {
        memset(&up4, 0, sizeof(p4));
    }
        
     // LuaValToCSVal Pstruct
    S_Pu1i4i4i4i4S_pi4i4__* p5 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, pesapi_unboxing(env, _sv5)); // valuetype ref
    S_Pu1i4i4i4i4S_pi4i4__ up5;
    if (!p5) {
        memset(&up5, 0, sizeof(p5));
    }
        
    typedef void (*FuncToCall)(void*,int32_t p1, void* p2, void* p3, void* p4, void* p5, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5,  method);
    

        return true;
}
// Void GetChannels(Int32, Unity.Collections.NativeArray`1[System.UInt16] ByRef, Unity.Collections.NativeSlice`1[UnityEngine.Vector3] ByRef, Unity.Collections.NativeSlice`1[UnityEngine.Vector2] ByRef, Unity.Collections.NativeSlice`1[UnityEngine.Color32] ByRef, Unity.Collections.NativeSlice`1[UnityEngine.Vector4] ByRef)bool w_vti4PS_Pvi4i4i4S_pi4i4_i4_PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4PS_Pvi4i4i4S_pi4i4_i4_PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    if (checkLuaArgument) {
        if (lua_args_len != 6) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal Pstruct
    S_Pvi4i4i4S_pi4i4_i4_* p2 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_Pvi4i4i4S_pi4i4_i4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
     // LuaValToCSVal Pstruct
    S_Pu1i4i4i4i4S_pi4i4__* p3 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_Pu1i4i4i4i4S_pi4i4__ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
     // LuaValToCSVal Pstruct
    S_Pu1i4i4i4i4S_pi4i4__* p4 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, pesapi_unboxing(env, _sv4)); // valuetype ref
    S_Pu1i4i4i4i4S_pi4i4__ up4;
    if (!p4) {
        memset(&up4, 0, sizeof(p4));
    }
        
     // LuaValToCSVal Pstruct
    S_Pu1i4i4i4i4S_pi4i4__* p5 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, pesapi_unboxing(env, _sv5)); // valuetype ref
    S_Pu1i4i4i4i4S_pi4i4__ up5;
    if (!p5) {
        memset(&up5, 0, sizeof(p5));
    }
        
     // LuaValToCSVal Pstruct
    S_Pu1i4i4i4i4S_pi4i4__* p6 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, pesapi_unboxing(env, _sv6)); // valuetype ref
    S_Pu1i4i4i4i4S_pi4i4__ up6;
    if (!p6) {
        memset(&up6, 0, sizeof(p6));
    }
        
    typedef void (*FuncToCall)(void*,int32_t p1, void* p2, void* p3, void* p4, void* p5, void* p6, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6,  method);
    

        return true;
}
// Void GetChannels(Int32, Unity.Collections.NativeArray`1[System.UInt16] ByRef, Unity.Collections.NativeSlice`1[UnityEngine.Vector3] ByRef, Unity.Collections.NativeSlice`1[UnityEngine.Vector2] ByRef, Unity.Collections.NativeSlice`1[UnityEngine.Color32] ByRef, Unity.Collections.NativeSlice`1[UnityEngine.Vector4] ByRef, Unity.Collections.NativeSlice`1[UnityEngine.Vector3] ByRef)bool w_vti4PS_Pvi4i4i4S_pi4i4_i4_PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4PS_Pvi4i4i4S_pi4i4_i4_PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__PS_Pu1i4i4i4i4S_pi4i4__");
    
    auto TIp2 = wrapData->TypeInfos[1];
    auto TIp3 = wrapData->TypeInfos[2];
    auto TIp4 = wrapData->TypeInfos[3];
    auto TIp5 = wrapData->TypeInfos[4];
    auto TIp6 = wrapData->TypeInfos[5];
    auto TIp7 = wrapData->TypeInfos[6];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    pesapi_value_sv3 = pesapi_get_arg(info, 3);
    pesapi_value_sv4 = pesapi_get_arg(info, 4);
    pesapi_value_sv5 = pesapi_get_arg(info, 5);
    pesapi_value_sv6 = pesapi_get_arg(info, 6);
    pesapi_value_sv7 = pesapi_get_arg(info, 7);
    if (checkLuaArgument) {
        if (lua_args_len != 7) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal Pstruct
    S_Pvi4i4i4S_pi4i4_i4_* p2 = DataTransfer::GetPointer<S_Pvi4i4i4S_pi4i4_i4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_Pvi4i4i4S_pi4i4_i4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
     // LuaValToCSVal Pstruct
    S_Pu1i4i4i4i4S_pi4i4__* p3 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, pesapi_unboxing(env, _sv3)); // valuetype ref
    S_Pu1i4i4i4i4S_pi4i4__ up3;
    if (!p3) {
        memset(&up3, 0, sizeof(p3));
    }
        
     // LuaValToCSVal Pstruct
    S_Pu1i4i4i4i4S_pi4i4__* p4 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, pesapi_unboxing(env, _sv4)); // valuetype ref
    S_Pu1i4i4i4i4S_pi4i4__ up4;
    if (!p4) {
        memset(&up4, 0, sizeof(p4));
    }
        
     // LuaValToCSVal Pstruct
    S_Pu1i4i4i4i4S_pi4i4__* p5 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, pesapi_unboxing(env, _sv5)); // valuetype ref
    S_Pu1i4i4i4i4S_pi4i4__ up5;
    if (!p5) {
        memset(&up5, 0, sizeof(p5));
    }
        
     // LuaValToCSVal Pstruct
    S_Pu1i4i4i4i4S_pi4i4__* p6 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, pesapi_unboxing(env, _sv6)); // valuetype ref
    S_Pu1i4i4i4i4S_pi4i4__ up6;
    if (!p6) {
        memset(&up6, 0, sizeof(p6));
    }
        
     // LuaValToCSVal Pstruct
    S_Pu1i4i4i4i4S_pi4i4__* p7 = DataTransfer::GetPointer<S_Pu1i4i4i4i4S_pi4i4__>(env, pesapi_unboxing(env, _sv7)); // valuetype ref
    S_Pu1i4i4i4i4S_pi4i4__ up7;
    if (!p7) {
        memset(&up7, 0, sizeof(p7));
    }
        
    typedef void (*FuncToCall)(void*,int32_t p1, void* p2, void* p3, void* p4, void* p5, void* p6, void* p7, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2, p3, p4, p5, p6, p7,  method);
    

        return true;
}
// Void GetUpdatePrefabInstancesEvent(Int32, UnityEditor.UpdatePrefabInstancesEventArgs ByRef)bool w_vti4PS_S_i4_S_Pvi4S_pi4i4___(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4PS_S_i4_S_Pvi4S_pi4i4___");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal Pstruct
    S_S_i4_S_Pvi4S_pi4i4___* p2 = DataTransfer::GetPointer<S_S_i4_S_Pvi4S_pi4i4___>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_S_i4_S_Pvi4S_pi4i4___ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,int32_t p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void GetChangeSceneEvent(Int32, UnityEditor.ChangeSceneEventArgs ByRef)bool w_vti4PS_S_i4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4PS_S_i4__");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal Pstruct
    S_S_i4__* p2 = DataTransfer::GetPointer<S_S_i4__>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_S_i4__ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,int32_t p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void TriggerSubEmitter(Int32, Particle ByRef)bool w_vti4PS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4PS_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal Pstruct
    S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_* p2 = DataTransfer::GetPointer<S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_r4r4r4_S_i4u1u1u1u1_u4u4r4r4i4r4r4u4_ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,int32_t p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void GetCreateAssetObjectEvent(Int32, UnityEditor.CreateAssetObjectEventArgs ByRef)bool w_vti4PS_S_u4u4u4u4_i4S_i4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4PS_S_u4u4u4u4_i4S_i4__");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal Pstruct
    S_S_u4u4u4u4_i4S_i4__* p2 = DataTransfer::GetPointer<S_S_u4u4u4u4_i4S_i4__>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_S_u4u4u4u4_i4S_i4__ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,int32_t p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
// Void GetCreateGameObjectHierarchyEvent(Int32, UnityEditor.CreateGameObjectHierarchyEventArgs ByRef)bool w_vti4PS_i4S_i4__(MethodInfo* method, Il2CppMethodPointer methodPointer, pesapi_callback_info info, pesapi_env env, void* self, bool checkLuaArgument, WrapData* wrapData) {
    // PLog("Running w_vti4PS_i4S_i4__");
    
    auto TIp2 = wrapData->TypeInfos[1];    
    int lua_args_len = pesapi_get_args_len(info);
    
    pesapi_value_sv1 = pesapi_get_arg(info, 1);
    pesapi_value_sv2 = pesapi_get_arg(info, 2);
    if (checkLuaArgument) {
        if (lua_args_len != 2) return false;
                if (!converter::Converter<int32_t>::accept(env, _sv1)) return false;                if (!!true) return false;            }
 // LuaValToCSVal P any
    int32_t p1 = converter::Converter<int32_t>::toCpp(env, _sv1);        
        
     // LuaValToCSVal Pstruct
    S_i4S_i4__* p2 = DataTransfer::GetPointer<S_i4S_i4__>(env, pesapi_unboxing(env, _sv2)); // valuetype ref
    S_i4S_i4__ up2;
    if (!p2) {
        memset(&up2, 0, sizeof(p2));
    }
        
    typedef void (*FuncToCall)(void*,int32_t p1, void* p2, const void* method);
    void ret = ((FuncToCall)methodPointer)(self, p1, p2,  method);
    

        return true;
}
}

